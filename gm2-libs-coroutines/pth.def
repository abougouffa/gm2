(* Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc. *)
(* This file is part of GNU Modula-2.

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA *)

(* automatically generated for GNU Modula-2 by:
   h2def -I../../m2/comp/autotest/gm2 modified_pth.h 
*)
DEFINITION MODULE FOR "C" pth ;

FROM SYSTEM IMPORT ADDRESS, BITSET ;

CONST
     PTH_VERSION_STR =  "1.4.1 (27-Jan-2002)" ;
     PTH_VERSION_HEX =  1065473 ;
     PTH_VERSION =  PTH_VERSION_HEX ;
     
TYPE
     fd_set =  ADDRESS ;
     __time_t =   INTEGER ;
     __useconds_t =   CARDINAL ;
     __suseconds_t =   INTEGER ;
     size_t =   CARDINAL ;
    timeval = RECORD
                 tv_sec : __time_t ;
                 tv_usec: __suseconds_t ;
              END ;
    
    sockaddr = RECORD
               END ;
     sigset_t =  ADDRESS ;
     pth_uctx_t =  POINTER TO   pth_uctx_st ;
    pth_uctx_st = RECORD
                  END ;
     pid_t =   INTEGER ;
     ssize_t =   CARDINAL ;
     socklen_t =   CARDINAL ;
     off_t =   INTEGER ;
     sig_atomic_t =   INTEGER ;
     nfds_t =   LONGCARD ;
    
CONST
     PTH_KEY_MAX =  256 ;
     PTH_ATFORK_MAX =  128 ;
     PTH_DESTRUCTOR_ITERATIONS =  4 ;
     PTH_SYSCALL_HARD =  0 ;
     PTH_SYSCALL_SOFT =  0 ;
     
TYPE
     pth_time_t =  ADDRESS ;
     pth_t =  ADDRESS ;
     pth_state_t =   pth_state_en ;
     pth_state_en =  ( PTH_STATE_SCHEDULER, PTH_STATE_NEW, PTH_STATE_READY, PTH_STATE_WAITING, PTH_STATE_DEAD) ;
    
CONST
     PTH_PRIO_MAX =   5 ;
     PTH_PRIO_STD =  0 ;
     PTH_PRIO_MIN =  -( 5) ;
     
TYPE
     pth_attr_t =  ADDRESS ;
    
CONST
     PTH_ATTR_PRIO = 0 ;
     PTH_ATTR_NAME = 1 ;
     PTH_ATTR_JOINABLE = 2 ;
     PTH_ATTR_CANCEL_STATE = 3 ;
     PTH_ATTR_STACK_SIZE = 4 ;
     PTH_ATTR_STACK_ADDR = 5 ;
     PTH_ATTR_TIME_SPAWN = 6 ;
     PTH_ATTR_TIME_LAST = 7 ;
     PTH_ATTR_TIME_RAN = 8 ;
     PTH_ATTR_START_FUNC = 9 ;
     PTH_ATTR_START_ARG = 10 ;
     PTH_ATTR_STATE = 11 ;
     PTH_ATTR_EVENTS = 12 ;
     PTH_ATTR_BOUND = 13 ;
     PTH_ATTR_DEFAULT =  0 ;
     


    (* event subject classes *)
    PTH_EVENT_FD    =  BITSET {1} ;
    PTH_EVENT_SELECT=  BITSET {2} ;
    PTH_EVENT_SIGS  =  BITSET {3} ;
    PTH_EVENT_TIME  =  BITSET {4} ;
    PTH_EVENT_MSG   =  BITSET {5} ;
    PTH_EVENT_MUTEX =  BITSET {6} ;
    PTH_EVENT_COND  =  BITSET {7} ;
    PTH_EVENT_TID   =  BITSET {8} ;
    PTH_EVENT_FUNC  =  BITSET {9} ;

    (* event occurange restrictions *)
    PTH_UNTIL_OCCURRED     =  BITSET {11} ;
    PTH_UNTIL_FD_READABLE  =  BITSET {12} ;
    PTH_UNTIL_FD_WRITEABLE =  BITSET {13} ;
    PTH_UNTIL_FD_EXCEPTION =  BITSET {14} ;
    PTH_UNTIL_TID_NEW      =  BITSET {15} ;
    PTH_UNTIL_TID_READY    =  BITSET {16} ;
    PTH_UNTIL_TID_WAITING  =  BITSET {17} ;
    PTH_UNTIL_TID_DEAD     =  BITSET {18} ;

    (* event structure handling modes *)
    PTH_MODE_REUSE  =  BITSET {20} ;
    PTH_MODE_CHAIN  =  BITSET {21} ;
    PTH_MODE_STATIC =  BITSET {22} ;
     
TYPE
     pth_event_t =  ADDRESS ;
    
CONST
     PTH_FREE_THIS = 0 ;
     PTH_FREE_ALL = 1 ;
     
TYPE
     pth_key_t =   INTEGER ;
    
CONST
     PTH_KEY_INIT =  -( 1) ;
     
TYPE
     pth_once_t =   INTEGER ;
    
CONST
     PTH_ONCE_INIT =  FALSE ;
     
TYPE
     pth_ringnode_t =   pth_ringnode_st ;
    pth_ringnode_st = RECORD
                         rn_next: POINTER TO  pth_ringnode_t ;
                         rn_prev: POINTER TO  pth_ringnode_t ;
                      END ;
     pth_ring_t =   pth_ring_st ;
    pth_ring_st = RECORD
                     r_hook: POINTER TO  pth_ringnode_t ;
                     r_nodes: CARDINAL ;
                  END ;
     pth_msgport_t =  ADDRESS ;
     pth_message_t =   pth_message_st ;
    pth_message_st = RECORD
                        m_node: pth_ringnode_t ;
                        m_replyport: pth_msgport_t ;
                        m_size: CARDINAL ;
                        m_data: ADDRESS ;
                     END ;
     pth_mutex_t =   pth_mutex_st ;
    pth_mutex_st = RECORD
                      mx_node: pth_ringnode_t ;
                      mx_state: INTEGER ;
                      mx_owner: pth_t ;
                      mx_count: CARDINAL ;
                   END ;
     pth_rwlock_t =   pth_rwlock_st ;
    pth_rwlock_st = RECORD
                       rw_state: INTEGER ;
                       rw_mode: CARDINAL ;
                       rw_readers: CARDINAL ;
                       rw_mutex_rd: pth_mutex_t ;
                       rw_mutex_rw: pth_mutex_t ;
                    END ;
     pth_cond_t =   pth_cond_st ;
    pth_cond_st = RECORD
                     cn_state: CARDINAL ;
                     cn_waiters: CARDINAL ;
                  END ;
     pth_barrier_t =   pth_barrier_st ;
    pth_barrier_st = RECORD
                        br_state: CARDINAL ;
                        br_threshold: INTEGER ;
                        br_count: INTEGER ;
                        br_cycle: INTEGER ;
                        br_cond: pth_cond_t ;
                        br_mutex: pth_mutex_t ;
                     END ;
    
CONST
     POLLIN =  1 ;
     POLLPRI =  2 ;
     POLLOUT =  4 ;
     POLLERR =  8 ;
     POLLHUP =  16 ;
     POLLNVAL =  32 ;
     POLLRDNORM =  POLLIN ;
     POLLRDBAND =  POLLIN ;
     POLLWRNORM =  POLLOUT ;
     POLLWRBAND =  POLLOUT ;
     INFTIM =  -( 1) ;
     
CONST
     PTH_FAKE_RWV =  0 ;
     
TYPE
    iovec = RECORD
               iov_base: ADDRESS ;
               iov_len: size_t ;
            END ;
    
CONST
     UIO_MAXIOV =  1024 ;
     PTH_EXT_SFIO =  0 ;
     
TYPE
     Sfdisc_t =  ADDRESS ;
    
 PROCEDURE pth_init () : INTEGER ;
 PROCEDURE pth_kill () : INTEGER ;
 PROCEDURE pth_ctrl (p1: CARDINAL; ...) : INTEGER ;
 PROCEDURE pth_version () : INTEGER ;
 PROCEDURE pth_attr_of (p1: pth_t) : pth_attr_t ;
 PROCEDURE pth_attr_new () : pth_attr_t ;
 PROCEDURE pth_attr_init (p1: pth_attr_t) : INTEGER ;
 PROCEDURE pth_attr_set (p1: pth_attr_t; p2: INTEGER; ...) : INTEGER ;
 PROCEDURE pth_attr_get (p1: pth_attr_t; p2: INTEGER; ...) : INTEGER ;
 PROCEDURE pth_attr_destroy (p1: pth_attr_t) : INTEGER ;
 PROCEDURE pth_spawn (p2: pth_attr_t; p1: t1; p3: ADDRESS) : pth_t;

TYPE
     t1 =    PROCEDURE (ADDRESS) : ADDRESS ;
    
PROCEDURE pth_once (p2: ADDRESS; p1: t2; p3: ADDRESS) : INTEGER;

TYPE
     t2 =    PROCEDURE (ADDRESS) ;
    
 PROCEDURE pth_self () : pth_t ;
 PROCEDURE pth_suspend (p1: pth_t) : INTEGER ;
 PROCEDURE pth_resume (p1: pth_t) : INTEGER ;
 PROCEDURE pth_yield (p1: pth_t) : INTEGER ;
 PROCEDURE pth_nap (p1: pth_time_t) : INTEGER ;
 PROCEDURE pth_wait (p1: pth_event_t) : INTEGER ;
 PROCEDURE pth_cancel (p1: pth_t) : INTEGER ;
 PROCEDURE pth_abort (p1: pth_t) : INTEGER ;
 PROCEDURE pth_raise (p1: pth_t; p2: INTEGER) : INTEGER ;
 PROCEDURE pth_join (p1: pth_t; p2: ADDRESS) : INTEGER ;
 PROCEDURE pth_exit (p1: ADDRESS) ;
 PROCEDURE pth_fdmode (p1: INTEGER; p2: INTEGER) : INTEGER ;
 PROCEDURE pth_time (p1: INTEGER; p2: INTEGER) : pth_time_t ;
 PROCEDURE pth_timeout (p1: INTEGER; p2: INTEGER) : pth_time_t ;
 PROCEDURE pth_cancel_state (p1: INTEGER; p2: ADDRESS) ;
 PROCEDURE pth_cancel_point  ;
 PROCEDURE pth_event (p1: CARDINAL; ...) : pth_event_t ;
 PROCEDURE pth_event_typeof (p1: pth_event_t) : CARDINAL ;
 PROCEDURE pth_event_extract (ev: pth_event_t; ...) : INTEGER ;
 PROCEDURE pth_event_concat (p1: pth_event_t; ...) : pth_event_t ;
 PROCEDURE pth_event_isolate (p1: pth_event_t) : pth_event_t ;
 PROCEDURE pth_event_walk (p1: pth_event_t; p2: CARDINAL) : pth_event_t ;
 PROCEDURE pth_event_occurred (p1: pth_event_t) : INTEGER ;
 PROCEDURE pth_event_free (p1: pth_event_t; p2: INTEGER) : INTEGER ;
 PROCEDURE pth_key_create (p2: ADDRESS; p1: t3) : INTEGER;

TYPE
     t3 =    PROCEDURE (ADDRESS) ;
    
 PROCEDURE pth_key_delete (p1: pth_key_t) : INTEGER ;
 PROCEDURE pth_key_setdata (p1: pth_key_t; p2: ADDRESS) : INTEGER ;
 PROCEDURE pth_key_getdata (p1: pth_key_t) : ADDRESS ;
 PROCEDURE pth_msgport_create (p1: ADDRESS) : pth_msgport_t ;
 PROCEDURE pth_msgport_destroy (p1: pth_msgport_t) ;
 PROCEDURE pth_msgport_find (p1: ADDRESS) : pth_msgport_t ;
 PROCEDURE pth_msgport_pending (p1: pth_msgport_t) : INTEGER ;
 PROCEDURE pth_msgport_put (p1: pth_msgport_t; p2: ADDRESS) : INTEGER ;
 PROCEDURE pth_msgport_get (p1: pth_msgport_t) : ADDRESS ;
 PROCEDURE pth_msgport_reply (p1: ADDRESS) : INTEGER ;
 PROCEDURE pth_cleanup_push (p1: t4; p2: ADDRESS) : INTEGER;

TYPE
     t4 =    PROCEDURE (ADDRESS) ;
    
 PROCEDURE pth_cleanup_pop (p1: INTEGER) : INTEGER ;

TYPE
     t5 =    PROCEDURE (ADDRESS);
    
 PROCEDURE pth_atfork_pop () : INTEGER ;
 PROCEDURE pth_fork () : pid_t ;
 PROCEDURE pth_mutex_init (p1: ADDRESS) : INTEGER ;
 PROCEDURE pth_mutex_acquire (p1: ADDRESS; p2: INTEGER; p3: pth_event_t) : INTEGER ;
 PROCEDURE pth_mutex_release (p1: ADDRESS) : INTEGER ;
 PROCEDURE pth_rwlock_init (p1: ADDRESS) : INTEGER ;
 PROCEDURE pth_rwlock_acquire (p1: ADDRESS; p2: INTEGER; p3: INTEGER; p4: pth_event_t) : INTEGER ;
 PROCEDURE pth_rwlock_release (p1: ADDRESS) : INTEGER ;
 PROCEDURE pth_cond_init (p1: ADDRESS) : INTEGER ;
 PROCEDURE pth_cond_await (p1: ADDRESS; p2: ADDRESS; p3: pth_event_t) : INTEGER ;
 PROCEDURE pth_cond_notify (p1: ADDRESS; p2: INTEGER) : INTEGER ;
 PROCEDURE pth_barrier_init (p1: ADDRESS; p2: INTEGER) : INTEGER ;
 PROCEDURE pth_barrier_reach (p1: ADDRESS) : INTEGER ;
 PROCEDURE pth_uctx_create (p1: ADDRESS) : INTEGER ;
 PROCEDURE pth_uctx_make (p2: pth_uctx_t; p3: ADDRESS; p4: size_t; p5: ADDRESS; p1: t8; p6: ADDRESS; p7: pth_uctx_t) : INTEGER;

TYPE
     t8 =    PROCEDURE (ADDRESS) ;
    
 PROCEDURE pth_uctx_save (p1: pth_uctx_t) : INTEGER ;
 PROCEDURE pth_uctx_restore (p1: pth_uctx_t) : INTEGER ;
 PROCEDURE pth_uctx_switch (p1: pth_uctx_t; p2: pth_uctx_t) : INTEGER ;
 PROCEDURE pth_uctx_destroy (p1: pth_uctx_t) : INTEGER ;
 PROCEDURE pth_sfiodisc () : ADDRESS ;
 PROCEDURE pth_sigwait_ev (p1: ADDRESS; p2: ADDRESS; p3: pth_event_t) : INTEGER ;
 PROCEDURE pth_connect_ev (p1: INTEGER; p2: ADDRESS; p3: socklen_t; p4: pth_event_t) : INTEGER ;
 PROCEDURE pth_accept_ev (p1: INTEGER; p2: ADDRESS; p3: ADDRESS; p4: pth_event_t) : INTEGER ;
 PROCEDURE pth_select_ev (p1: INTEGER; p2: ADDRESS; p3: ADDRESS; p4: ADDRESS; p5: ADDRESS; p6: pth_event_t) : INTEGER ;
 PROCEDURE pth_poll_ev (p1: ADDRESS; p2: nfds_t; p3: INTEGER; p4: pth_event_t) : INTEGER ;
 PROCEDURE pth_read_ev (p1: INTEGER; p2: ADDRESS; p3: size_t; p4: pth_event_t) : ssize_t ;
 PROCEDURE pth_write_ev (p1: INTEGER; p2: ADDRESS; p3: size_t; p4: pth_event_t) : ssize_t ;
 PROCEDURE pth_readv_ev (p1: INTEGER; p2: ADDRESS; p3: INTEGER; p4: pth_event_t) : ssize_t ;
 PROCEDURE pth_writev_ev (p1: INTEGER; p2: ADDRESS; p3: INTEGER; p4: pth_event_t) : ssize_t ;
 PROCEDURE pth_recv_ev (p1: INTEGER; p2: ADDRESS; p3: size_t; p4: INTEGER; p5: pth_event_t) : ssize_t ;
 PROCEDURE pth_send_ev (p1: INTEGER; p2: ADDRESS; p3: size_t; p4: INTEGER; p5: pth_event_t) : ssize_t ;
 PROCEDURE pth_recvfrom_ev (p1: INTEGER; p2: ADDRESS; p3: size_t; p4: INTEGER; p5: ADDRESS; p6: ADDRESS; p7: pth_event_t) : ssize_t ;
 PROCEDURE pth_sendto_ev (p1: INTEGER; p2: ADDRESS; p3: size_t; p4: INTEGER; p5: ADDRESS; p6: socklen_t; p7: pth_event_t) : ssize_t ;
 PROCEDURE pth_usleep (p1: CARDINAL) : INTEGER ;
 PROCEDURE pth_sleep (p1: CARDINAL) : CARDINAL ;
 PROCEDURE pth_waitpid (p1: pid_t; p2: ADDRESS; p3: INTEGER) : pid_t ;
 PROCEDURE pth_system (p1: ADDRESS) : INTEGER ;
 PROCEDURE pth_sigmask (p1: INTEGER; p2: ADDRESS; p3: ADDRESS) : INTEGER ;
 PROCEDURE pth_sigwait (p1: ADDRESS; p2: ADDRESS) : INTEGER ;
 PROCEDURE pth_connect (p1: INTEGER; p2: ADDRESS; p3: socklen_t) : INTEGER ;
 PROCEDURE pth_accept (p1: INTEGER; p2: ADDRESS; p3: ADDRESS) : INTEGER ;
 PROCEDURE pth_select (p1: INTEGER; p2: ADDRESS; p3: ADDRESS; p4: ADDRESS; p5: ADDRESS) : INTEGER ;
 PROCEDURE pth_poll (p1: ADDRESS; p2: nfds_t; p3: INTEGER) : INTEGER ;
 PROCEDURE pth_read (p1: INTEGER; p2: ADDRESS; p3: size_t) : ssize_t ;
 PROCEDURE pth_write (p1: INTEGER; p2: ADDRESS; p3: size_t) : ssize_t ;
 PROCEDURE pth_readv (p1: INTEGER; p2: ADDRESS; p3: INTEGER) : ssize_t ;
 PROCEDURE pth_writev (p1: INTEGER; p2: ADDRESS; p3: INTEGER) : ssize_t ;
 PROCEDURE pth_recv (p1: INTEGER; p2: ADDRESS; p3: size_t; p4: INTEGER) : ssize_t ;
 PROCEDURE pth_send (p1: INTEGER; p2: ADDRESS; p3: size_t; p4: INTEGER) : ssize_t ;
 PROCEDURE pth_recvfrom (p1: INTEGER; p2: ADDRESS; p3: size_t; p4: INTEGER; p5: ADDRESS; p6: ADDRESS) : ssize_t ;
 PROCEDURE pth_sendto (p1: INTEGER; p2: ADDRESS; p3: size_t; p4: INTEGER; p5: ADDRESS; p6: socklen_t) : ssize_t ;
 PROCEDURE pth_pread (p1: INTEGER; p2: ADDRESS; p3: size_t; p4: off_t) : ssize_t ;
 PROCEDURE pth_pwrite (p1: INTEGER; p2: ADDRESS; p3: size_t; p4: off_t) : ssize_t ;

END pth.
