(* Copyright (C) 2001 Free Software Foundation, Inc. *)
(* This file is part of GNU Modula-2.

GNU Modula-2 is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2, or (at your option) any later
version.

GNU Modula-2 is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with gm2; see the file COPYING.  If not, write to the Free Software
Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)
DEFINITION MODULE M2Error ;

(*
    Title      : M2Error
    Author     : Gaius Mulley
    System     : UNIX (gm2)
    Description: provides an interface between the string handling modules
                 and the compiler.
*)

FROM SYSTEM IMPORT WORD ;
FROM DynamicStrings IMPORT String ;
EXPORT QUALIFIED Error,
                 InternalError,
                 WriteFormat0, WriteFormat1, WriteFormat2, WriteFormat3,
                 NewError, ErrorFormat0, ErrorFormat1, ErrorFormat2, ErrorFormat3,
                 ErrorString,
                 NewWarning,
                 FlushErrors, FlushWarnings, ChainError,
                 ErrorStringAt, ErrorStringAt2, ErrorStringsAt2,
                 WarnStringAt, WarnStringAt2, WarnStringsAt2,
                 ErrorAbort0 ;

TYPE
   Error ;


(*
   InternalError - displays an internal error message together with the compiler source
                   file and line number.
                   This function is not buffered and is used when the compiler is about
                   to give up.
*)

PROCEDURE InternalError (a: ARRAY OF CHAR; file: ARRAY OF CHAR; line: CARDINAL) ;



(* ***************************************************************************
   The following routines are used for normal syntax and semantic error reporting
   *************************************************************************** *)


(*
   WriteFormat0 - displays the source module and line together
                  with the encapsulated format string.
                  Used for simple error messages tied to the current token.
*)

PROCEDURE WriteFormat0 (a: ARRAY OF CHAR) ;


(*
   WriteFormat1 - displays the source module and line together
                  with the encapsulated format string.
                  Used for simple error messages tied to the current token.
*)

PROCEDURE WriteFormat1 (a: ARRAY OF CHAR; w: WORD) ;


(*
   WriteFormat2 - displays the module and line together with the encapsulated
                  format strings.
                  Used for simple error messages tied to the current token.
*)

PROCEDURE WriteFormat2 (a: ARRAY OF CHAR; w1, w2: WORD) ;


(*
   WriteFormat3 - displays the module and line together with the encapsulated
                  format strings.
                  Used for simple error messages tied to the current token.
*)

PROCEDURE WriteFormat3 (a: ARRAY OF CHAR; w1: WORD; w2: WORD; w3: WORD) ;


(*
   NewError - creates and returns a new error handle.
*)

PROCEDURE NewError (AtTokenNo: CARDINAL) : Error ;


(*
   NewWarning - creates and returns a new error handle suitable for a warning.
                A warning will not stop compilation.
*)

PROCEDURE NewWarning (AtTokenNo: CARDINAL) : Error ;


(*
   ChainError - creates and returns a new error handle, this new error
                is associated with, e, and is chained onto the end of, e.
*)

PROCEDURE ChainError (AtTokenNo: CARDINAL; e: Error) : Error ;


(*
   ErrorFormat routines provide a printf capability for the error handle.
*)

PROCEDURE ErrorFormat0 (e: Error; a: ARRAY OF CHAR) ;
PROCEDURE ErrorFormat1 (e: Error; a: ARRAY OF CHAR; w: WORD) ;
PROCEDURE ErrorFormat2 (e: Error; a: ARRAY OF CHAR; w1, w2: WORD) ;
PROCEDURE ErrorFormat3 (e: Error; a: ARRAY OF CHAR; w1, w2, w3: WORD) ;
PROCEDURE ErrorString  (e: Error; str: String) ;


(* ***************************************************************************
   The following routines are useful for positioning and warnings and errors
   at tokens. The strings are emitted later, so the caller must not destroy
   the strings.
   *************************************************************************** *)

PROCEDURE ErrorStringAt (s: String; tok: CARDINAL) ;
PROCEDURE ErrorStringAt2 (s: String; tok1, tok2: CARDINAL) ;
PROCEDURE ErrorStringsAt2 (s1, s2: String; tok1, tok2: CARDINAL) ;
PROCEDURE WarnStringAt (s: String; tok: CARDINAL) ;
PROCEDURE WarnStringAt2 (s: String; tok1, tok2: CARDINAL) ;
PROCEDURE WarnStringsAt2 (s1, s2: String; tok1, tok2: CARDINAL) ;


(*
   FlushErrors - switches the output channel to the error channel
                 and then writes out all errors.
                 If an error is present the compilation is terminated.
                 All warnings are ignored.
*)

PROCEDURE FlushErrors ;


(*
   FlushWarnings - switches the output channel to the error channel
                   and then writes out all warnings.
                   If an error is present the compilation is terminated,
                   if warnings only were emitted then compilation will
                   continue.
*)

PROCEDURE FlushWarnings ;


(*
   ErrorAbort0 - aborts compiling, it flushes all warnings and errors before aborting.
*)

PROCEDURE ErrorAbort0 (a: ARRAY OF CHAR) ;


END M2Error.
