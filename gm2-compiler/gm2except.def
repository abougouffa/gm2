(* Copyright (C) 2008 Free Software Foundation, Inc. *)
(* This file is part of GNU Modula-2.

GNU Modula-2 is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2, or (at your option) any later
version.

GNU Modula-2 is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with gm2; see the file COPYING.  If not, write to the Free Software
Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA. *)

DEFINITION MODULE gm2except ;

(*
    Title      : gm2except
    Author     : Gaius Mulley
    System     : GNU Modula-2
    Date       : Tue Jul 15 21:12:53 2008
    Revision   : $Version$ 
    Description: provides an interface to the gm2except.c exception
                 routines.
*)

FROM gccgm2 IMPORT Tree ;


(*
   InitExceptions - initialize this module, it declares the
                    external functions and assigns them to
                    the appropriate global tree variables.
*)

PROCEDURE InitExceptions ;


(*
   BuildThrow - builds a throw statement and return the tree.
*)

PROCEDURE BuildThrow (t: Tree) : Tree ;


(*
    BuildTryBegin - returns a tree representing the 'try' block.
*)

PROCEDURE BuildTryBegin () : Tree ;


(*
   BuildTryEnd - builds the end of the Try block and prepares
                 for the catch handlers.
*)

PROCEDURE BuildTryEnd (tryBlock: Tree) ;


(*
   BuildCatchBegin - creates a handler tree for the C++
                     statement 'catch (...) {'.
                     It returns the handler tree.
*)

PROCEDURE BuildCatchBegin () : Tree ;


(*
   BuildCatchEnd - completes a try catch block.
                   It returns the, try_block, tree.
                   It creates the C++ statement
 
                   '}' which matches the catch above.
*)

PROCEDURE BuildCatchEnd (handler, tryBlock: Tree) : Tree ;


END gm2except.
