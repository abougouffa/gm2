(* Copyright (C) 2008 Free Software Foundation, Inc. *)
(* This file is part of GNU Modula-2.

GNU Modula-2 is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2, or (at your option) any later
version.

GNU Modula-2 is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with gm2; see the file COPYING.  If not, write to the Free Software
Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA. *)

DEFINITION MODULE M2Range ;

(*
    Title      : M2Range
    Author     : Gaius Mulley
    System     : GNU Modula-2
    Date       : Thu Feb 28 10:18:55 2008
    Revision   : $Version$ 
    Description: exports procedures which maintain the range checking
                 state which is explored once all the subrange values
                 have been resolved by the front end (once
                 M2GCCDeclare has completed its task).  We cannot
                 perform this activity during M2Quads, as we dont
                 know the subrange values and also we can do so much
                 more once optimization has occurred.  It should be
                 possible to detect simple overflow errors at compile
                 time, post optimization.
*)

FROM gccgm2 IMPORT Tree ;
FROM Lists IMPORT List ;
FROM DynamicStrings IMPORT String ;

EXPORT QUALIFIED InitAssignmentRangeCheck,
                 InitSubrangeRangeCheck,
                 InitStaticArraySubscriptRangeCheck,
                 InitDynamicArraySubscriptRangeCheck,
                 InitIncRangeCheck,
                 InitDecRangeCheck,
                 InitForLoopBeginRangeCheck,
                 InitForLoopToRangeCheck,
                 InitForLoopEndRangeCheck,
                 InitPointerRangeCheck,
                 InitNoReturnRangeCheck,
                 InitNoElseRangeCheck,
                 CodeRangeCheck, FoldRangeCheck, CodeErrorCheck,
                 CheckRangeAddVariableRead,
                 CheckRangeRemoveVariableRead,
                 WriteRangeCheck ;


(*
   InitAssignmentRangeCheck - returns a range check node which
                              remembers the information necessary
                              so that a range check for d := e
                              can be generated later on.
*)

PROCEDURE InitAssignmentRangeCheck (d, e: CARDINAL) : CARDINAL ;


(*
   InitSubrangeRangeCheck - returns a range check node which
                            remembers the information necessary
                            so that a range check for d := e
                            can be generated later on.
*)

PROCEDURE InitSubrangeRangeCheck (d, e: CARDINAL) : CARDINAL ;


(*
   InitStaticArraySubscriptRangeCheck - returns a range check node which
                                        remembers the information necessary
                                        so that a range check for d[e]
                                        can be generated later on.
*)

PROCEDURE InitStaticArraySubscriptRangeCheck (d, e: CARDINAL) : CARDINAL ;


(*
   InitDynamicArraySubscriptRangeCheck - returns a range check node which
                                         remembers the information necessary
                                         so that a range check for d[e]
                                         can be generated later on.
*)

PROCEDURE InitDynamicArraySubscriptRangeCheck (d, e: CARDINAL) : CARDINAL ;


(*
   InitIncRangeCheck - returns a range check node which
                       remembers the information necessary
                       so that a range check for INC(d, e)
                       can be generated later on.
*)

PROCEDURE InitIncRangeCheck (d, e: CARDINAL) : CARDINAL ;


(*
   InitDecRangeCheck - returns a range check node which
                       remembers the information necessary
                       so that a range check for DEC(d, e)
                       can be generated later on.
*)

PROCEDURE InitDecRangeCheck (d, e: CARDINAL) : CARDINAL ;


(*
   InitForLoopBeginRangeCheck - returns a range check node which
                                remembers the information necessary
                                so that a range check for FOR d := e TO .. DO
                                can be generated later on.
*)

PROCEDURE InitForLoopBeginRangeCheck (d, e: CARDINAL) : CARDINAL ;


(*
   InitForLoopToRangeCheck - returns a range check node which
                             remembers the information necessary
                             so that a range check for the final value
                             implied by ... e1 TO e2 BY e3 DO
                             can be generated later on.
*)

PROCEDURE InitForLoopToRangeCheck (d, e: CARDINAL) : CARDINAL ;


(*
   InitForLoopEndRangeCheck - returns a range check node which
                              remembers the information necessary
                              so that a range check for
                              INC or DEC(d, e)
                              can be generated later on.
*)

PROCEDURE InitForLoopEndRangeCheck (d, e: CARDINAL) : CARDINAL ;


(*
   InitPointerRangeCheck - creates a pointer # NIL check.
*)

PROCEDURE InitPointerRangeCheck (d: CARDINAL; isLeft: BOOLEAN) : CARDINAL ;


(*
   InitNoReturnRangeCheck - creates a check held in the function
                            to detect the absence of a RETURN
                            statement at runtime.
*)

PROCEDURE InitNoReturnRangeCheck () : CARDINAL ;


(*
   InitNoElseRangeCheck - creates a check held at the end of
                          a CASE statement without an ELSE
                          clause to detect its absence
                          at runtime.
*)

PROCEDURE InitNoElseRangeCheck () : CARDINAL ;


(*
   CodeRangeCheck - creates a sequence of Trees representing the code for a
                    range test defined by, r.
*)

PROCEDURE CodeRangeCheck (r: CARDINAL; scopeDesc: String) ;


(*
   FoldRangeCheck - returns a Tree representing the code for a
                    range test defined by, r.
*)

PROCEDURE FoldRangeCheck (tokenno: CARDINAL; l: List; q: CARDINAL; r: CARDINAL) ;


(*
   CodeErrorCheck - returns a Tree calling the approprate exception handler.
*)

PROCEDURE CodeErrorCheck (r: CARDINAL; scopeDesc: String) : Tree ;


(*
   CheckRangeAddVariableRead - ensures that any references to reading
                               variables used by this range check, r,
                               at this, quadNo, are recorded in the
                               symbol table.
*)

PROCEDURE CheckRangeAddVariableRead (r: CARDINAL; quadNo: CARDINAL) ; 


(*
   CheckRangeRemoveVariableRead - ensures that any references to reading
                                  variable at this quadNo are removed from
                                  the symbol table.
*)

PROCEDURE CheckRangeRemoveVariableRead (r: CARDINAL; quadNo: CARDINAL) ; 


(*
   WriteRangeCheck - displays debugging information about range, r.
*)

PROCEDURE WriteRangeCheck (r: CARDINAL) ;


END M2Range.
