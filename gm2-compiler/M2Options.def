(* Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc. *)
(* This file is part of GNU Modula-2.

GNU Modula-2 is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2, or (at your option) any later
version.

GNU Modula-2 is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with gm2; see the file COPYING.  If not, write to the Free Software
Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA. *)

DEFINITION MODULE M2Options ;

(*
   Author     : Gaius Mulley
   Title      : M2Options
   Date       : 27/5/87  [$Date: 2008/05/02 16:16:09 $]
   SYSTEM     : UNIX (GNU Modula-2)
   Description: Initializes the user options in the Modula-2 compiler.
   Version    : $Revision: 1.22 $
*)

FROM SYSTEM IMPORT ADDRESS ;
FROM DynamicStrings IMPORT String ;

EXPORT QUALIFIED IsAnOption, IsAnOptionAndArg, ParseOptions,
                 ScanCppArgs,

                 SetReturnCheck, SetNilCheck, SetCaseCheck,
                 SetCheckAll, SetVerboseUnbounded, SetQuiet, SetCpp,
                 SetMakeall, SetMakeall0, SetIncludePath,
                 SetUnboundedByReference,

                 Iso, Pim, Pim2, Pim3, Pim4,
                 PositiveModFloorDiv,
                 Pedantic, Verbose, Statistics,
                 UnboundedByReference, VerboseUnbounded,
                 Profiling, Coding, Optimizing,
                 OptimizeBasicBlock, OptimizeUncalledProcedures,
                 OptimizeCommonSubExpressions,
                 StudentChecking,
                 BoundsChecking, ReturnChecking, NilChecking, CaseElseChecking,
                 Quiet, LineDirectives, CPreProcessor, Xcode, ExtendedOpaque,
                 PedanticParamNames, PedanticCast,
      	       	 DisplayQuadruples,
                 CompilerDebugging, GenerateDebugging, GenerateLineDebug,
                 CppCommandLine, DumpSystemExports, GenerateSwig ;


VAR
   Iso,                          (* -fiso use ISO SYSTEM.def                 *)
   Pim,                          (* -fpim use PIM [234] SYSTEM.def           *)
   Pim2,                         (* -fpim2 use strict rules.                 *)
   Pim3,                         (* -fpim3 use strict rules.                 *)
   Pim4,                         (* -fpim4 use strict rules.                 *)
   PositiveModFloorDiv,          (* force PIM4 behaviour for DIV and MOD     *)
   CompilerDebugging,            (* -d internal debugging messages           *)
   GenerateDebugging,            (* -g option to generate info for gdb/dbx   *)
   GenerateLineDebug,            (* -gline to generate line debugging.       *)
   Verbose,                      (* -verbose produce verbose error messages. *)
   Pedantic,                     (* -pedantic be pedantic on error checking. *)
   PedanticParamNames,           (* -Wpedantic-param-names                   *)
   PedanticCast,                 (* -Wpedantic-cast warns if sizes differ.   *)
   Statistics,                   (* -fstatistics information about code      *)
   StudentChecking,              (* -Wstudents checks for common student errs*)
   DisplayQuadruples,            (* -Wq option will display quadruples.      *)
   UnboundedByReference,         (* -funbounded-by-reference                 *)
   VerboseUnbounded,             (* -Wverbose-unbounded                      *)
   OptimizeUncalledProcedures,   (* -Ouncalled removes uncalled procedures   *)
   OptimizeBasicBlock,           (* -Obb create basic blocks and optimize.   *)
   OptimizeCommonSubExpressions, (* -Ocse optimize common subexpressions     *)
   BoundsChecking,               (* -fbounds makes compiler generate runtime *)
                                 (* checks. Subranges and array bounds.      *)
   ReturnChecking,               (* -freturn checks that functions always    *)
                                 (* exit with a RETURN statement.            *)
   NilChecking,                  (* -fnil makes compiler test for pointer    *)
                                 (* NIL                                      *)
   CaseElseChecking,             (* -fcase checks program does not need an   *)
                                 (* else statement within an case statement  *)
                                 (* when the user omits one                  *)
   Quiet,                        (* -fquiet option specified.                *)
   Alignment,                    (* should parameters and data be aligned?   *)
   LineDirectives,               (* should compiler understand preprocessor  *)
                                 (* # linenumber "filename" markers?         *)
   CPreProcessor,                (* must we run the cpp on the source?       *)
   Xcode,                        (* should errors follow Xcode format?       *)
   ExtendedOpaque,               (* do we allow non pointer opaque types?    *)
   DumpSystemExports,            (* print all inbuilt system items?          *)
   GenerateSwig,                 (* should we generate a swig interface file?*)
   Optimizing,
   Coding,
   Profiling         : BOOLEAN ;


(*
   IsAnOption - Returns true if a legal option was specified in, s.
                If legal then the appropriate flag was set.
*)

PROCEDURE IsAnOption (s: String) : BOOLEAN ;


(*
   IsAnOptionAndArg - returns TRUE if argument, s, implies that the next argument
                      is associated with this argument.
*)

PROCEDURE IsAnOptionAndArg (s: String) : BOOLEAN ;


(*
   ParseOptions - parses the options and sets the option flags
                  accordingly.
*)

PROCEDURE ParseOptions ;


(*
   ScanCppArgs - scans the cpp arguments and builds up the cpp command line.
*)

PROCEDURE ScanCppArgs (i: CARDINAL) : CARDINAL ;


(*
   CppCommandLine - returns the Cpp command line and all arguments.
*)

PROCEDURE CppCommandLine () : String ;


(*
   SetReturnCheck -
*)

PROCEDURE SetReturnCheck (value: BOOLEAN) : BOOLEAN ;


(*
   SetNilCheck -
*)

PROCEDURE SetNilCheck (value: BOOLEAN) : BOOLEAN ;


(*
   SetCaseCheck - set else case checking to, value.
*)

PROCEDURE SetCaseCheck (value: BOOLEAN) : BOOLEAN ;


(*
   SetCheckAll - set all runtime checking to, value.
*)

PROCEDURE SetCheckAll (value: BOOLEAN) : BOOLEAN ;


(*
   SetVerboseUnbounded - sets the VerboseUnbounded flag to, value.
*)

PROCEDURE SetVerboseUnbounded (value: BOOLEAN) : BOOLEAN ;


(*
   SetQuiet - sets the quiet flag to, value.
*)

PROCEDURE SetQuiet (value: BOOLEAN) : BOOLEAN ;


(*
   SetCpp -
*)

PROCEDURE SetCpp (value: BOOLEAN) : BOOLEAN ;


(*
   SetMakeall -
*)

PROCEDURE SetMakeall (value: BOOLEAN) : BOOLEAN ;


(*
   SetMakeall0 -
*)

PROCEDURE SetMakeall0 (value: BOOLEAN) : BOOLEAN ;


(*
   SetIncludePath -
*)

PROCEDURE SetIncludePath (arg: ADDRESS) : BOOLEAN ;


(*
   SetUnboundedByReference -
*)

PROCEDURE SetUnboundedByReference (value: BOOLEAN) : BOOLEAN ;


END M2Options.
