(* Copyright (C) 2001 Free Software Foundation, Inc. *)
(* This file is part of GNU Modula-2.

GNU Modula-2 is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2, or (at your option) any later
version.

GNU Modula-2 is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with gm2; see the file COPYING.  If not, write to the Free Software
Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA. *)
DEFINITION MODULE M2Options ;

(*
   Author     : Gaius Mulley
   Title      : M2Options
   Date       : 27/5/87  [$Date: 2005/11/10 10:31:08 $]
   SYSTEM     : UNIX (GNU Modula-2)
   Description: Initializes the user options in the Modula-2 compiler.
   Version    : $Revision: 1.14 $
*)

FROM DynamicStrings IMPORT String ;
EXPORT QUALIFIED IsAnOption, IsAnOptionAndArg, ParseOptions, ScanCppArgs,

                 Iso, Pim, Pim2, Pim3, Pim4,
                 PositiveModFloorDiv,
                 Pedantic, Verbose, Statistics,
                 UnboundedByReference, VerboseUnbounded,
                 Profiling, Coding, Optimizing,
                 OptimizeBasicBlock, OptimizeUncalledProcedures,
                 OptimizeCommonSubExpressions,
                 StudentChecking,
                 BoundsChecking, ReturnChecking, NilChecking, CaseElseChecking,
                 Quiet, LineDirectives, CPreProcessor, ExtendedOpaque,
                 PedanticParamNames, PedanticCast,
      	       	 DisplayQuadruples,
                 CompilerDebugging, GenerateDebugging, GenerateLineDebug,
                 CppCommandLine ;


VAR
   Iso,                          (* -Wiso use ISO SYSTEM.def                 *)
   Pim,                          (* -Wpim use PIM [234] SYSTEM.def           *)
   Pim2,                         (* -Wpim2 use strict rules.                 *)
   Pim3,                         (* -Wpim3 use strict rules.                 *)
   Pim4,                         (* -Wpim4 use strict rules.                 *)
   PositiveModFloorDiv,          (* force PIM4 behaviour for DIV and MOD     *)
   CompilerDebugging,            (* -d internal debugging messages           *)
   GenerateDebugging,            (* -g option to generate info for gdb/dbx   *)
   GenerateLineDebug,            (* -gline to generate line debugging.       *)
   Verbose,                      (* -verbose produce verbose error messages. *)
   Pedantic,                     (* -pedantic be pedantic on error checking. *)
   PedanticParamNames,           (* -Wpedantic-param-names                   *)
   PedanticCast,                 (* -Wpedantic-cast warns if sizes differ.   *)
   Statistics,                   (* -statistics information about code       *)
   StudentChecking,              (* -students checks for common student errs *)
   DisplayQuadruples,            (* -q option will display quadruples.       *)
   UnboundedByReference,         (* -Wunbounded-by-reference                 *)
   VerboseUnbounded,             (* -Wverbose-unbounded                      *)
   OptimizeUncalledProcedures,   (* -Ouncalled removes uncalled procedures   *)
   OptimizeBasicBlock,           (* -Obb create basic blocks and optimize.   *)
   OptimizeCommonSubExpressions, (* -Ocse optimize common subexpressions     *)
   BoundsChecking,               (* -bounds makes compiler generate runtime  *)
                                 (* checks. Subranges and array bounds.      *)
   ReturnChecking,               (* -return checks that functions always     *)
                                 (* exit with a RETURN statement.            *)
   NilChecking,                  (* -Wnil makes compiler test for pointer    *)
                                 (* NIL                                      *)
   CaseElseChecking,             (* -Wcase checks program does not need an   *)
                                 (* else statement within an case statement  *)
                                 (* when the user omits one                  *)
   Quiet,                        (* -quiet option specified.                 *)
   Alignment,                    (* should parameters and data be aligned?   *)
   LineDirectives,               (* should compiler understand preprocessor  *)
                                 (* # linenumber "filename" markers?         *)
   CPreProcessor,                (* must we run the cpp on the source?       *)
   ExtendedOpaque,               (* do we allow non pointer opaque types?    *)
   Optimizing,
   Coding,
   Profiling         : BOOLEAN ;


(*
   IsAnOption - Returns true if a legal option was specified in, s.
                If legal then the appropriate flag was set.
*)

PROCEDURE IsAnOption (s: String) : BOOLEAN ;


(*
   IsAnOptionAndArg - returns TRUE if argument, s, implies that the next argument
                      is associated with this argument.
*)

PROCEDURE IsAnOptionAndArg (s: String) : BOOLEAN ;


(*
   ParseOptions - parses the options and sets the option flags
                  accordingly.
*)

PROCEDURE ParseOptions ;


(*
   ScanCppArgs - scans the cpp arguments and builds up the cpp command line.
*)

PROCEDURE ScanCppArgs (i: CARDINAL) : CARDINAL ;


(*
   CppCommandLine - returns the Cpp command line and all arguments.
*)

PROCEDURE CppCommandLine () : String ;


END M2Options.
