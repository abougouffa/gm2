(* Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc. *)
(* This file is part of GNU Modula-2.

GNU Modula-2 is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 3, or (at your option) any later
version.

GNU Modula-2 is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with gm2; see the file COPYING.  If not, write to the Free Software
Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA. *)

DEFINITION MODULE M2MetaError ;

(*
    Title      : M2MetaError
    Author     : Gaius Mulley
    System     : GNU Modula-2
    Date       : Tue Oct 14 12:11:13 2008
    Revision   : $Version$ 
    Description: provides a set of high level error routines.  These
                 routines utilise M2Error and provides the programmer
                 with an easier method to obtain useful symbol table
                 information.
*)

FROM DynamicStrings IMPORT String ;

EXPORT QUALIFIED MetaError1, MetaError2, MetaError3, MetaError4,
                 MetaErrors1, MetaErrors2, MetaErrors3, MetaErrors4,
                 MetaErrorT1, MetaErrorT2, MetaErrorT3, MetaErrorT4,
                 MetaErrorsT1, MetaErrorsT2, MetaErrorsT3, MetaErrorsT4,
                 MetaErrorString1, MetaErrorString2, MetaErrorString3,
                 MetaErrorString4,
                 MetaErrorStringT1, MetaErrorStringT2, MetaErrorStringT3,
                 MetaErrorStringT4 ;


(*
    All the procedures below expect the s, s1, s2, s3, s4 to be symbols
    and m, m1, m2, m3 are error messages and format specifiers.
    The format specifiers are:

    {%1a}     symbol name for the first symbol.
    {%1q}     qualified name for the first symbol.
    {%1t}     type name for the first symbol.
    {%1ts}    skips type pseudonyms.
    {%1d}     symbol description
    {%1td}    type symbol description
    
    {%1D}     sets the error message to where symbol 1 was declared.
    {%1U}     sets the error message to where symbol 1 was first used.
    {%E}      error (default)
    {%W}      message is a warning, not an error.
    %%        %
    %{        {
    %}        }

    the error messages may also embed optional strings such as:

    {%1a:this string is emitted if the symbol name is non null}
    {!%1a:this string is emitted if the symbol name is null}
    {!%1a:{%1d}}
           if the symbol name does not exist then print a description
           of the symbol.
    {%1atd} was incompatible with the return type of the procedure
           means print the symbol name (if null then print the type name
           if null then print out the description) followed by the
           string "was incompatible with the return type of the procedure"

    Note all replaced names or descriptions are enclosed in quotes, like:
    'foo', which matches the behaviour of gcc.  Also note temporary names
    are treated as null.  Finally the order of format specifiers does
    matter, {%1td} means get type name and use it if non null, otherwise
    describe the symbol.
*)

PROCEDURE MetaError1 (m: ARRAY OF CHAR; s: CARDINAL) ;
PROCEDURE MetaError2 (m: ARRAY OF CHAR; s1, s2: CARDINAL) ;
PROCEDURE MetaError3 (m: ARRAY OF CHAR; s1, s2, s3: CARDINAL) ;
PROCEDURE MetaError4 (m: ARRAY OF CHAR; s1, s2, s3, s4: CARDINAL) ;

PROCEDURE MetaErrors1 (m1, m2: ARRAY OF CHAR; s: CARDINAL) ;
PROCEDURE MetaErrors2 (m1, m2: ARRAY OF CHAR; s1, s2: CARDINAL) ;
PROCEDURE MetaErrors3 (m1, m2: ARRAY OF CHAR; s1, s2, s3: CARDINAL) ;
PROCEDURE MetaErrors4 (m1, m2: ARRAY OF CHAR; s1, s2, s3, s4: CARDINAL) ;

PROCEDURE MetaErrorT1 (tok: CARDINAL; m: ARRAY OF CHAR; s: CARDINAL) ;
PROCEDURE MetaErrorT2 (tok: CARDINAL; m: ARRAY OF CHAR; s1, s2: CARDINAL) ;
PROCEDURE MetaErrorT3 (tok: CARDINAL; m: ARRAY OF CHAR; s1, s2, s3: CARDINAL) ;
PROCEDURE MetaErrorT4 (tok: CARDINAL; m: ARRAY OF CHAR; s1, s2, s3, s4: CARDINAL) ;

PROCEDURE MetaErrorsT1 (tok: CARDINAL; m1, m2: ARRAY OF CHAR; s: CARDINAL) ;
PROCEDURE MetaErrorsT2 (tok: CARDINAL; m1, m2: ARRAY OF CHAR; s1, s2: CARDINAL) ;
PROCEDURE MetaErrorsT3 (tok: CARDINAL; m1, m2: ARRAY OF CHAR; s1, s2, s3: CARDINAL) ;
PROCEDURE MetaErrorsT4 (tok: CARDINAL; m1, m2: ARRAY OF CHAR; s1, s2, s3, s4: CARDINAL) ;

PROCEDURE MetaErrorString1 (m: String; s: CARDINAL) ;
PROCEDURE MetaErrorString2 (m: String; s1, s2: CARDINAL) ;
PROCEDURE MetaErrorString3 (m: String; s1, s2, s3: CARDINAL) ;
PROCEDURE MetaErrorString4 (m: String; s1, s2, s3, s4: CARDINAL) ;

PROCEDURE MetaErrorStringT1 (tok: CARDINAL; m: String; s: CARDINAL) ;
PROCEDURE MetaErrorStringT2 (tok: CARDINAL; m: String; s1, s2: CARDINAL) ;
PROCEDURE MetaErrorStringT3 (tok: CARDINAL; m: String; s1, s2, s3: CARDINAL) ;
PROCEDURE MetaErrorStringT4 (tok: CARDINAL; m: String; s1, s2, s3, s4: CARDINAL) ;


END M2MetaError.
