\input texinfo 
@c -*-texinfo-*-

@code{makeinfo}
@code{texinfo-format-buffer}

@c
@c Design notes and documentation about GNU Modula-2
@c
@c
@c part 1 header
@c

@setfilename gm2.info
@settitle The GNU Modula-2 front end to GCC

@c
@c Part 2: Summary Description and Copyright
@c

@ifinfo
This is a short example of a complete Texinfo file.

Copyright @copyright{} 2000 Free Software Foundation, Inc.
@end ifinfo

@c Part 3: Titlepage and Copyright
@c The titlepage segment does not appear in the Info file. 
@titlepage
@sp 10
@comment The title is printed in a large font.
@center @titlefont{The GNU Modula-2 front end to GCC}

@c The following two commands start the copyright page.
@page
@setchapternewpage odd
@sp 2
@center Gaius Mulley
@sp 3
@center Last updated 08 May 2000
@sp 1
@vskip 0pt plus 1filll
Copyright @copyright{} 2000 Free Software Foundation, Inc.
@end titlepage

@c Part 4: `Top' Node and Master Menu

@ifinfo
@node Top, About, (dir), (dir)
@top Introduction
@end ifinfo

@chapter GNU Modula-2 Internals

This document is a small step in the long journey of documenting the GNU
Modula-2 compiler and how it integrates with GCC.

@menu
* About::             What this document explains.
* History::           How GNU Modula-2 came about.
* Integrating::       How m2f is integrated with gcc.
* Practicalities::    Overview of how m2f is built.
* Future::            A future wish list.
* Done list::         Progression of the GNU Modula-2 project.
* To do list::        Outstanding issues.
* Assembly language:: Interface to assembly language.
@end menu

@node About, History, Top, Top
@section About

This file contains design notes accompanying the Modula-2
front end to gcc. The GNU Modula-2 compiler is based on
the language as defined in 'Programming in Modula-2'
2nd Edition, Springer Verlag, 1982, 1983 by Niklaus Wirth.
(PIM2).
Although it does include minor extensions.

The libraries are currently a mixture of ISO Modula-2 and
'Programming in Modula-2'. It is our aim to extend the
GNU Modula-2 to include PIM3 and PIM4 command line switches
to include later language alterations.

@node History, Integrating, About, Top
@section History

The Modula-2 compiler sources have come from the m2f compiler which
runs under GNU/Linux. The original m2f compiler was written in Modula-2
and was bootstrapped via a "hacked" version of p2c 1.20. The m2f
compiler was a recursive descent which generated quadruples as
intermediate code. It also used C style calling convention wherever
possible and utilized a C structure for dynamic arrays.

@node Integrating, Practicalities, History, Top
@section Integrating m2f with gcc

We need to convert the quadruples into tree structure and also
declare variables, functions, modules, types seemingly at the
same time. The m2f native code generators all took the quadruples
and sequentially generated code. The GCC integration needs more
thought as it must only declare items who have had their children
already written out by GCC. The approach taken is as follows:

@itemize @bullet
@item
follow the M2GDB dependancy code to ensure that all TYPEs
are declared and written to the assembly fule *without*
need for forward references.

@item
At this point all of the types *seen* will be declared and
written out in '.stabs'

@item
then we can trawl though the quadruple list happily declaring
functions and generating code in the knowledge that all types
global variables have already been declared.
Lists of quadruples are turned into trees and passed onto GCC.
@end itemize

@node Practicalities, Future, Integrating, Top
@section Practicalities

For the moment the directory gm2/m2 will contain the Modula-2
source code for front end m2f. The m2f compiler will be built
during stage1, stage2, stage3 in line with gcc. We introduce
a stage0 which will build the "hacked" p2c-1.20 which translates
the Modula-2 code into C during stage1. At a later stage we
can dispense with the "hacked" p2c-1.20 and ship C/M2 source
code maybe? Anyhow, currently that is a long way off and since
major development will take place the p2c-1.20 will remain.

In essence m2f will be given a new code generator namely "gcc".
This new code generator performs the quadruples to tree conversion
and symbol table to gcc symbol table conversion. This code will
be a mixture of Modula-2 and C.
The original M2ALU module containing simple arithmetic operators (used for
constant folding) will be replaced by a skeleton M2ALU which utilizes
the GCC tree constant folding functions. The M2Base and M2System
modules containing base types and system types respectively are also
rewritten to utilize the GCC backend data types.

@node Future, Done list, Practicalities, Top
@section Future

In the future it might be sensible to rewrite M2Quads.mod to
directly call gcc routines, rather than generate quadruples.
However this is a large alteration and I'd firstly like to
see gm2 working with the method outlined above, which is
conceptually easier.

@node Done list, To do list, Future, Top
@section Done list

What has been done:

@itemize @bullet
@item
the sources to m2f and gcc compile and link to produce cc1gm2.
The front end works and compiles all legal Modula-2 into
intemediate code.

@item
the back end will generate code and assembly declarations for
modules containing global variables of all types. Procedure
prologue/epilogue is created.

@item
expressions are complete.

@item
all loop constructs, if then else, case statements.

@item
nested module initialization.

@item
pointers, arrays

@item
front end @samp{gm2} can now compile and link modules.

@item  
procedure calls

@item
the ability to insert gnu asm statements within GNU Modula-2.

@item
inbuilt functions, SIZE, ADR, TSIZE, HIGH etc

@item
nested procedures

@item
the front end now utilizes GCC tree constants and types and is no
longer tied to a 32 bit architecture, but reflects the 'configure'
target machine description.

@item
complex procedure parameters (unbounded arrays, strings)

@end itemize

Nearly all the to do work is concerned with interfacing m2f with
gcc and most of this work is localized in the following files:

@file{gm2/gm2.c}
@file{gm2/gccgm2.def}
@file{gm2/m2/comp/gm2s/gcc/M2GenGCC.mod}
@file{gm2/m2/comp/gm2s/gcc/M2GCCDeclare.mod}

@node To do list, Assembly language, Done list, Top
@section To do list

What needs to be done:

@itemize @bullet

@item
complex procedure parameters (passing records?)

@item
the modula-2 front end needs to convert the quadruples into
trees and the convert these trees into gcc trees, rather than
simply translating each quadruple into a separate gcc tree.
The later works but produces very bad code.
The way to solve this is by taking a copy of M2SubExp.mod and
basing the gcc calls on the tree structure that M2SubExp.mod builds.
My belief is that this should not take much time to complete and
should produce much better code.

@item
Fix all C compiler warnings when gcc compiles the p2c generated C
with -Wall.

@item
utilize GNU autoconf rather than the makeconfigure script.

@item
block becomes

@item
error recovery needs to be implemented,
during pass 1 (first and follow sets etc). One of those
to do's which was never done.. use the ppg tool.
See @samp{ gm2/m2/comp/gm2s/gcc/asm.bnf } for an example
of how this could be done.

@item
integrate the small testsuite (gm2/m2/comp/autotest)
into dejagnu ?? and improve

@item
Coroutines - as mentioned by readers of comp.lang.modula2.

@item
improve documentation, specifically this document which should
also include a synopsis of 2nd Edition Modula-2.

@item
testing and fixing bugs

@end itemize

@node Assembly language,, To do list, Top
@section Assembly language

The interface for GNU Modula-2 to assembly language is almost identical to GNU C.
The only alterations are that the keywords asm and volatile are in capitals,
following the Modula-2 convention.

A simple, but highly non optimal, example is given below. Here we want to add the
two @code{CARDINAL}s @code{foo} and @code{bar} together and return the result.

@example
PROCEDURE Example (foo, bar: CARDINAL) : CARDINAL ;
VAR
   myout: CARDINAL ;
BEGIN
   ASM VOLATILE ("movl %1,%%eax; addl %2,%%eax; movl %%eax,%0"
      : "=g" (myout)           (* outputs *)
      : "g" (foo), "g" (bar)   (* inputs  *)
      : "eax") ;               (* we trash *)
   RETURN( myout )
END Example ;
@end example

For a full description of this interface we refer the reader to the GNU C manual.

@xref{Extended Asm, ,Extensions to the C Language Family,gcc}.

@c @printindex cp

@summarycontents
@contents
@bye
