\input texinfo 
@c -*-texinfo-*-

@code{makeinfo}
@code{texinfo-format-buffer}

@c
@c Design notes and documentation about GNU Modula-2
@c
@c
@c part 1 header
@c

@setfilename gm2.info
@settitle The GNU Modula-2 front end to GCC

@c
@c Part 2: Summary Description and Copyright
@c

@ifinfo
This is a short example of a complete Texinfo file.

Copyright @copyright{} 2000, 2001, 2002 Free Software Foundation, Inc.
@end ifinfo

@c Part 3: Titlepage and Copyright
@c The titlepage segment does not appear in the Info file. 
@titlepage
@sp 10
@comment The title is printed in a large font.
@center @titlefont{The GNU Modula-2 front end to GCC}

@c The following two commands start the copyright page.
@page
@setchapternewpage odd
@sp 2
@center Gaius Mulley
@sp 3
@center Last updated 2 May 2002
@sp 10
@c @center @image{gm2/images/gnu,,1.5in}
@vskip 0pt plus 1filll
Copyright @copyright{} 2000, 2001, 2002 Free Software Foundation, Inc.
@end titlepage

@c Part 4: `Top' Node and Master Menu

@ifinfo
@node Top, Using, (dir), (dir)
@top Introduction
@end ifinfo

@menu
* Using::            Using GNU Modula-2
* Internals::        GNU Modula-2 internals
@end menu

@node Using, Internals, Top, Top
@chapter Using GNU Modula-2

@menu
* About::             What this document explains.
* History::           How GNU Modula-2 came about.
* Compiler options::  GNU Modula-2 compiler options.
* Example usage::     Example compile and link.
* Extensions::        GNU Modula-2 language extensions.
* Interface to C::    Interfacing GNU Modula-2 to C
* Assembly language:: Interface to assembly language.
@end menu

@node About, Compiler options, , Using
@section About

This file contains design notes accompanying the Modula-2
front end to gcc. The GNU Modula-2 compiler is based on
the language as defined in 'Programming in Modula-2'
2nd Edition, Springer Verlag, 1982, 1983 by Niklaus Wirth.
(PIM2).
Although it does include minor extensions.

The libraries are currently a mixture of ISO Modula-2 and
'Programming in Modula-2'. It is our aim to extend the
GNU Modula-2 to include PIM3 and PIM4 compatability.

@node Compiler options, Example usage, About, Using
@section Compiler options

This section describe the compiler options specific to GNU Modula-2 for
generic flags details see
@xref{Invoking GCC, , ,gcc}.

@table @code

@item -Wmakeall
generate a temporary makefile and build all dependant modules and
link.

@item -Wbounds
generate code to check the bounds of subranges and array indexes.

@item -Wreturn
generate code to check that functions always exit with a @samp{RETURN} and do not
fall out at the end.

@item -v
display all calls to subsiduary programs, such as the C preprocessor,
the gm2 linker and compiler.

@item -Wstatistics
generates quadruple information: number of quadruples generated,
number of quadruples remaining after optimization.

@item -Wstudents
checks for bad programming style. This option is aimed at
new users of Modula-2 in that it checks for situations which
might cause confusion and thus mistakes.
It checks whether variables of the same name are declared in
different scopes and whether variables look like keywords.
Experienced users might find this option too agressive.

@item -Wpedantic
forces the compiler to reject nested @samp{WITH}
statements referencing the same record type.
Does not allow multiple imports of the same item from a module.
It also checks that: procedure variables are written to before being read;
variables are not only written to but read from; variables are declared and used.
If the compiler encounters a variable being read before written it will terminate
with a message.
It will check that @samp{FOR} loop indices are not used outside the end of this loop
without being reset.

@item -Wmakelist
this option is only applicable when linking a program module.
The compiler will generate a @file{modulename.lst} file which contains
a list indicating the initialization order of all modules which are to be
linked. The actual link does not occur.
The gm2 linker scans all @code{IMPORT}s, generates a list of dependancies
and produces an ordered list for initialization. It will probably get the
order wrong if your project has cyclic dependancies, but
the @file{.lst} file is plain text and can be modified if required.
Once the @file{.lst} file is created it can be used by the compiler
to link your project via the @samp{-Wuselist} option.
It has no effect if the @samp{-c} option is present.

@item -Wuselist
providing @samp{gm2} has been told to link the program module this
option uses the file @file{modulename.lst} for the initialization
order of modules.

@item -Wcpp
do preprocess the source with @samp{cpp -traditional -lang-asm -C}
For further details about these options see
@xref{Invocation, , ,cpp}.
If @samp{-Wcpp} is supplied then all definition modules and implementation
modules which are parsed will be preprocessed by @samp{cpp}.

@end table

@node Example usage, Extensions, Compiler options, Using
@section Example compile and link

This section describes how to compiler and link a simple hello world program.
It provides a few examples of using the different options mentioned in
@xref{Compiler options, , ,gm2}.
Assuming that you have a file called @file{hello.mod} in your current directory
which contains:

@example
MODULE hello ;

FROM StrIO IMPORT WriteString, WriteLn ;

BEGIN
   WriteString('hello world') ; WriteLn
END hello.
@end example

You should be able to compile it by:
@samp{gm2 -c -g -I. hello.mod}
and link via:
@samp{gm2 -g -I. hello.mod}.
The result should be an @samp{a.out} file created in your directory.
Hint, the
@samp{-v} displays the subprocesses initiated by
@samp{gm2}.
This can be useful when trouble shooting.

Alternatively it may be compiled by:

@samp{gm2 -g -I. -Wmakeall hello.mod}

@node Extensions, Interface to C, Example usage, Using
@section GNU Modula-2 language extensions

This section introduces the GNU Modula-2 language extensions.
The GNU Modula-2 compiler allows abstract data types to be
@code{any} type, not just restricted to a pointer type.

It also allows declarations in any order. Type, constant, procedure and
variable declarations can be in any order. Nested modules may also declare
types in any order, consider:

@example
MODULE colour ;

   PROCEDURE make (VAR c: colours) ;
   BEGIN
      c := yellow
   END make ;

   MODULE inner ;
   EXPORT colours ;

   TYPE
      colours = (red, blue, yellow, white) ;
   END inner ;

VAR
   g: colours
BEGIN
   make(g)
END colour.
@end example

The preprocessor @samp{cpp} can be invoked via the @samp{-Wcpp} command
line option. This in turn invokes @samp{cpp} with the following
arguments @samp{-traditional -lang-asm -C}.
These options preserve comments and all quotations.
@samp{gm2} treats a @samp{#} character in the first column
as a preprocessor directive.

@node Interface to C, Assembly language, Extensions, Using
@section Interfacing GNU Modula-2 to C

The GNU Modula-2 compiler tries to use the C calling convention wherever
possible however some parameters have no C equivalent and
thus a language specific method is used. For example unbounded
arrays are passed as a @code{struct void *address, unsigned int high}
and the contents of these arrays are copied by callee functions
when they are declared as non @code{VAR} parameters.
The @code{VAR} equivalent unbounded array parameters need no copy,
but still use the @code{struct} representation.

The recommended method of interfacing GNU Modula-2 to C is by telling
the definition module that the implmentation is in the C language.
This is achieved by using the tokens @code{DEFINITION MODULE FOR "C"}.
Here is an example which can be found in the source tree
@file{gcc-version/gcc/gm2/examples/callingC/libprintf.def}

@example
DEFINITION MODULE FOR "C" libprintf ;

EXPORT UNQUALIFIED printf ;

PROCEDURE printf (a: ARRAY OF CHAR; ...) ;

END libprintf.
@end example

the @code{UNQUALIFIED} keyword in the definition module informs
GNU Modula-2 not to prefix the module name to exported references
in the object file.

The @code{printf} declaration states that the first parameter semantically
matches @code{ARRAY OF CHAR} but since the module is for the C language
it will be mapped onto @code{char *}. The token @code{...} indicates
a variable number of arguments (varargs) and all parameters passed
here are mapped onto their C equivalents. Arrays and constant strings
are passed as pointers.

The hello world program can be rewritten as:

@example
MODULE hello ;

FROM libprintf IMPORT printf ;

BEGIN
   printf("hello world\n")
END hello.
@end example

and it can be compiled by:

@samp{gm2 -Wmakeall -g -I. hello.mod -lc}

In reality the @samp{-lc} is redundant as libc is always included in the
linking process. It is shown here to emphasise that the C library or
object file containing @code{printf} must be present.

@node Assembly language, , Interface to C, Using
@section Interface to assembly language

The interface for GNU Modula-2 to assembly language is almost identical to GNU C.
The only alterations are that the keywords asm and volatile are in capitals,
following the Modula-2 convention.

A simple, but highly non optimal, example is given below. Here we want to add the
two @code{CARDINAL}s @code{foo} and @code{bar} together and return the result.

@example
PROCEDURE Example (foo, bar: CARDINAL) : CARDINAL ;
VAR
   myout: CARDINAL ;
BEGIN
   ASM VOLATILE ("movl %1,%%eax; addl %2,%%eax; movl %%eax,%0"
      : "=g" (myout)           (* outputs *)
      : "g" (foo), "g" (bar)   (* inputs  *)
      : "eax") ;               (* we trash *)
   RETURN( myout )
END Example ;
@end example

For a full description of this interface we refer the reader to the GNU C manual.

@xref{Extended Asm, ,Extensions to the C Language Family,gcc}.

@node Internals, , Using, Top
@chapter GNU Modula-2 Internals

This document is a small step in the long journey of documenting the GNU
Modula-2 compiler and how it integrates with GCC.
The document is still in it's infancy.

@menu
* History::                 Where the sources came from.
* Overview::                Overview of the structure of GNU Modula-2.
* Integrating::             How the front end integrates with gcc.
* Building and installing:: How to build gm2.
* Future::                  A future wish list.
* Done list::               Progression of the GNU Modula-2 project.
* To do list::              Outstanding issues.
@end menu

@node History, Overview, , Internals
@section History

The Modula-2 compiler sources have come from the m2f compiler which
runs under GNU/Linux. The original m2f compiler was written in Modula-2
and was bootstrapped via a modified version of p2c 1.20. The m2f
compiler was a recursive descent which generated quadruples as
intermediate code. It also used C style calling convention wherever
possible and utilized a C structure for dynamic arrays.

@node Overview, Integrating, History, Internals
@section Overview

GNU Modula-2 uses flex and a machine generated recursive descent
parser. Most of the source code is written in Modula-2 and
bootstrapping is achieved via a modified version of p2c-1.20.
The modified p2c-1.20 is contained in the GNU Modula-2 source
tree as are a number of other tools necessary for bootstrapping.

@node Integrating, Building and installing, Overview, Internals
@section How the front end integrates with gcc

The M2Base and M2System
modules contain base types and system types respectively they
map onto GCC backend data types.

@node Building and installing, Future, Integrating, Internals
@section Building

The GNU Modula-2 source tree should be unpacked in the GNU GCC
source tree directory @file{gcc-version/gcc}. Typically this
is achieved by the commands:

@example
cd gcc-version/gcc
tar zxf gm2-version.tar.gz
cd ../..
@end example

GNU Modula-2 can be built by typing:

@example
cd gcc-version
./configure
make
@end example

It can be installed by:

@example
su
cd gcc-version
make install
@end example

@node Future, Done list, Building and installing, Internals
@section A future wish list

In the future it might be sensible to rewrite M2Quads.mod to
directly call gcc routines, rather than generate quadruples.
However this is a large alteration and I'd firstly like to
see gm2 working with the method outlined above, which is
conceptually easier.

@node Done list, To do list, Future, Internals
@section Done list

What has been done:

@itemize @bullet

@item
added @code{DEFINITION MODULE FOR "C"} method of linking
to C. Also added varargs handling in C definition modules.

@item
cpp can be run on definition and implementation modules.

@item
@samp{-Wmakell} generates a temporary @code{Makefile} and
will build all dependant modules.

@item
Compiler will bootstrap itself and three generations of the
compiler all produce the same code.

@item
the back end will generate code and assembly declarations for
modules containing global variables of all types. Procedure
prologue/epilogue is created.

@item
all loop constructs, if then else, case statements and expressions.

@item
nested module initialization.

@item
pointers, arrays, procedure calls, nested procedures.

@item
front end @samp{gm2} can now compile and link modules.

@item
the ability to insert gnu asm statements within GNU Modula-2.

@item
inbuilt functions, SIZE, ADR, TSIZE, HIGH etc

@item
block becomes and complex procedure parameters (unbounded arrays, strings).

@item
the front end now utilizes GCC tree constants and types and is no
longer tied to a 32 bit architecture, but reflects the 'configure'
target machine description.

@item
fixed all C compiler warnings when gcc compiles the p2c generated C
with -Wall.

@item
built a new parser which implements error recovery.

@item
added mechanism to invoke cpp to support conditional compilation if required.

@item
all @samp{Makefile}s are generated via @samp{./configure}

@end itemize

@node To do list, , Done list, Internals
@section To do list

What needs to be done:

@itemize @bullet

@item
rewrite documentation.

@item
profile compiler and improve compilation speed.
Compiling @file{P1SyntaxCheck.mod} takes far too long.

@item
the modula-2 front end needs to convert the quadruples into
trees and the convert these trees into gcc trees, rather than
simply translating each quadruple into a separate gcc tree.
The later works but better code could be generated by
building a large tree and passing this tree to gcc.
One way to implement this is by taking a copy of M2SubExp.mod and
basing the gcc calls on the tree structure that M2SubExp.mod builds.
My belief is that this should not take much time to complete and
should produce better code.

This requires separating the semantic checking routines away from M2Quads.mod.
Propose a new module M2Tree which contains the functionality of M2Quads/M2SubExp.
We should be able to remove M2Quads, M2SubExp, M2Optimize, M2GenGCC, M2EvalSym
once this is complete.

SymbolTable needs to be modified.

@item
investigate the use of collect2 during link/module initialization.

@item
utilize GNU autoconf rather than the makeconfigure script.

@item
integrate the small testsuite (gm2/m2/comp/autotest)
into dejagnu ?? and improve

@item
Coroutines - as mentioned by readers of comp.lang.modula2.

@item
improve documentation, specifically this document which should
also include a synopsis of 2nd Edition Modula-2.

@item
testing and fixing bugs

@end itemize

@c @printindex cp

@summarycontents
@contents
@bye
