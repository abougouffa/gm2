#!/bin/sh

source config-values
source shell-bin/libs


function unpack () {
   if [ -f $1.tar.gz ] ; then
       gzip -dc $1.tar.gz | tar xf -
   elif [ -f $1.tar.bz2 ] ; then
       bzip2 -dc $1.tar.bz2 | tar xf -
   else
       echo "cannot find $1.tar.gz or $1.tar.bz2"
   fi
}

function unpackgcc () {
   if [ -f $1.tar.gz ] ; then
       gzip -dc $1.tar.gz | tar xf -
   elif [ -f $1.tar.bz2 ] ; then
       bzip2 -dc $1.tar.bz2 | tar xf -
   else
       echo "cannot find $1.tar.gz or $1.tar.bz2"
       echo "will try and download it"
       if wget -c -t 5 ${GCCURL}/gcc-${GCC}/$1.tar.bz2 ; then
           unpackgcc $*
       elif wget -c -t 5 ${GCCURL}/gcc-${GCC}/$1.tar.gz ; then
           unpackgcc $*
       else
	   echo "cannot find $1 at ${GCCURL}/gcc-${GCC}/$1.tar.bz2"
	   echo "and cannot find $1 at ${GCCURL}/gcc-${GCC}/$1.tar.gz"
           exit 1
       fi
   fi
}

function unpackgdb () {
   if [ -f $1.tar.gz ] ; then
       gzip -dc $1.tar.gz | tar xf -
   elif [ -f $1.tar.bz2 ] ; then
       bzip2 -dc $1.tar.bz2 | tar xf -
   else
       echo "cannot find $1.tar.gz or $1.tar.bz2"
       echo "will try and download it"
       if wget -c -t 5 ${GDBURL}/$1.tar.bz2 ; then
           unpackgcc $*
       elif wget -c -t 5 ${GDBURL}/$1.tar.gz ; then
           unpackgcc $*
       else
	   echo "cannot find $1 at ${GDBURL}/$1.tar.bz2"
	   echo "and cannot find $1 at ${GDBURL}/$1.tar.gz"
           exit 1
       fi
   fi
}

#
#  checkPatchGCC - tests to see whether gm2 has a patch for gcc
#                  and if so it applies it
#

function checkPatchGCC () {
   if [ -d gcc/gm2/patches/gcc/${GCC} ] ; then
      rm -f ../gcc-patch.log
      touch ../gcc-patch.log
      for i in gcc/gm2/patches/gcc/${GCC}/* xyz ; do
          if [ -f $i ] ; then
              echo "found a patch for gcc-${GCC} inside the gm2 release"
              echo -n "will try and apply the patch: "
              if patch -p1 < $i >> ../gcc-patch.log 2>&1 ; then
                  echo "succeeded"
              else
                  echo "failed (result in ${DOWNLOADDIR}/gcc-patch.log)"
                  exit 1
              fi
          fi
      done
   else
       echo "no patch found for gcc-${GCC}"
   fi
}

#
#  checkPatchGDB - tests to see whether gm2 has a patch for gdb
#                  and if so it applies it
#

function checkPatchGDB () {
   if [ -d ../../${SOURCEDIR}/gcc-${GCC}/gcc/gm2/patches/gdb/${GDB} ] ; then
       rm -f ../gdb-patch.log
       touch ../gdb-patch.log
       for i in ../../${SOURCEDIR}/gcc-${GCC}/gcc/gm2/patches/gdb/${GDB}/* xyz ; do
           if [ -f $i ] ; then
               echo "found a patch for gdb-${GDB} inside the gm2 release"
               echo -n "will try and apply the patch: "
               if patch -p2 < $i >> ../gdb-patch.log 2>&1 ; then
                   echo "succeeded"
               else
                   echo "failed (result in ${DOWNLOADDIR}/gdb-patch.log)"
                   exit 1
               fi
           fi
       done
   else
       echo "no patch needed for gdb-${GDB}"
   fi
}

WANTGDB=$1
FORCECVS=$2
export FORCECVS
ULMLIB=$3

checkok shell-bin/packgm2 "retrieving gm2 from cvs"

cd ${DOWNLOADDIR}
rm -rf gcc-${GCC}
unpackgcc gcc-${GCC}
unpackgcc gcc-testsuite-${GCC}

cd gcc-${GCC}/gcc
tar zxf ../../gm2-current.tar.gz
cd ..
checkPatchGCC
cd ../..
cd ${SOURCEDIR}
rm -rf gcc-${GCC}
cd ..
mv ${DOWNLOADDIR}/gcc-${GCC} ${SOURCEDIR}/gcc-${GCC}

#
#  now retrieve, patch, build gdb
#

if [ "$WANTGDB" = "yes" ] ; then
   echo "attempting to download, patch and build gdb"
   cd ${DOWNLOADDIR}
   rm -rf gdb-${GDB}
   unpackgdb gdb-${GDB}
   cd gdb-${GDB}
   # checkPatchGDB
   cd ../..
   checkok shell-bin/makegdb "building gdb"
fi

echo "now to build gm2"
checkok "shell-bin/remake ${ULMLIB}" "building gm2"
