-- Copyright (C) 2001 Free Software Foundation, Inc.
-- This file is part of GNU Modula-2.
--
-- GNU Modula-2 is free software; you can redistribute it and/or modify it under
-- the terms of the GNU General Public License as published by the Free
-- Software Foundation; either version 2, or (at your option) any later
-- version.
-- 
-- GNU Modula-2 is distributed in the hope that it will be useful, but WITHOUT ANY
-- WARRANTY; without even the implied warranty of MERCHANTABILITY or
-- FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-- for more details.
-- 
-- You should have received a copy of the GNU General Public License along
-- with gm2; see the file COPYING.  If not, write to the Free Software
-- Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
--
--
--
% module gm2l begin
MODULE gm2l ;
(* Copyright (C) 2001 Free Software Foundation, Inc.
   This file is part of GNU Modula-2.

GNU Modula-2 is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2, or (at your option) any later
version.
 
GNU Modula-2 is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.
 
You should have received a copy of the GNU General Public License along
with gm2; see the file COPYING.  If not, write to the Free Software
Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)

(*
   Author     : Gaius Mulley
   Title      : gm2l
   Date       : Date: Sat 16-09-1989 Time: 17:49:34.18
              : [$Date: 2005/03/24 12:39:38 $]
   SYSTEM     : UNIX (GNU Modula-2)
   Description: generates the list of initialization order for the modules.
                The initialization module list is used for two purposes.
                (i)  for linking all the objects or archives
                (ii) for creating the initialization call sequence for each module.
                If a definition module contains EXPORT UNQUALIFIED and there is no
                implementation module found then we assume this definition module
                will match a foreign language, therefore we do not create an
                initialization call but we do link this object/archive.
                This allows us to write definition modules for C libraries.
*)

IMPORT Break ;
IMPORT DebugPMD ;
IMPORT M2Search ;
IMPORT SArgs ;
IMPORT M2RTS ;
FROM libc IMPORT exit ;
FROM M2LexBuf IMPORT OpenSource, CloseSource, GetToken, ReInitialize, InsertToken, InsertTokenAndRewind,
                     currenttoken, currentstring ;
FROM M2Reserved IMPORT toktype ;
FROM M2Printf IMPORT printf0, printf1, printf2, printf3, printf4,
                     fprintf0, fprintf1, fprintf2, fprintf3, fprintf4 ;
FROM M2FileName IMPORT CalculateFileName, CalculateStemName ;
FROM M2Search IMPORT InitSearchPath, FindSourceFile, PrependSearchPath ;
FROM SArgs IMPORT Narg, GetArg ;
FROM M2Defaults IMPORT GetOptions, GetSearchPath ;
FROM NameKey IMPORT Name, KeyToCharStar, WriteKey, MakeKey, GetKey, makekey, NulName ;
FROM M2Depth IMPORT MakeDependant, GetDepth ;
FROM SFIO IMPORT OpenToWrite, Exists ;
FROM FIO IMPORT File, WriteChar, IsNoError, Close, StdOut, StdErr ;
FROM Storage IMPORT ALLOCATE, DEALLOCATE ;
FROM SYSTEM IMPORT WORD ;
FROM M2Preprocess IMPORT PreprocessModule ;
IMPORT m2flex ;
FROM SYSTEM IMPORT ADDRESS ;
FROM M2Options IMPORT ScanCppArgs ;
FROM DynamicStrings IMPORT String, InitString, KillString, Slice, InitStringCharStar,
                           Mark, EqualArray, string, ConCat, ConCatChar ;
FROM Lists IMPORT List, InitList, KillList, IncludeItemIntoList, GetItemFromList, NoOfItemsInList ;



CONST
   Comment      =  '#' ;  (* Comment identifier *)
   Debugging    = FALSE ;

TYPE
   Source = POINTER TO source ;
   source = RECORD
               name       : Name ;
               Depth      : CARDINAL ;
               OnlyDef    ,
               ForC       : BOOLEAN ;
               next       : Source ;
            END ;
 
(* %%%FORWARD%%%
PROCEDURE Open (ModuleName, ExtName: Name; IsDefinition: BOOLEAN) : BOOLEAN ; FORWARD ;
PROCEDURE ScanSources (src: Name) ; FORWARD ;
PROCEDURE ScanImport ; FORWARD ;
PROCEDURE ScanImportsIn (extension: Name; IsDefinition: BOOLEAN) : BOOLEAN ; FORWARD ;
PROCEDURE MakeModule (ModuleName: Name) ; FORWARD ;
PROCEDURE CalculateDepth ; FORWARD ;
PROCEDURE SortSources ; FORWARD ;
PROCEDURE DisplaySources ; FORWARD ;
PROCEDURE ScanArgs() : BOOLEAN ; FORWARD ;
PROCEDURE CompilationUnit ; FORWARD ;
PROCEDURE ErrorString (s: String) ; FORWARD ;
PROCEDURE ErrorArray (a: ARRAY OF CHAR) ; FORWARD ;
   %%%FORWARD%%% *)

VAR
   fo             : File ;
   LastIdent,
   MainSrc,
   MainName       : Name ;
   Head, Tail     : Source ;    (* head source list *)
   IncludeM2RTS   : BOOLEAN ;   (* do we automatically include M2RTS into the top module? *)
   ImportedModules: List ;      (* current list of imports for the scanned module *)
   pSource        : Source ;    (* current module being parsed *)
   CommentChar    : CHAR ;


(*
   ExamineCompilationUnit - opens the source file to obtain the module name and kind of module.
*)

PROCEDURE ExamineCompilationUnit (VAR name: Name; VAR isdefimp: BOOLEAN) ;
BEGIN
   isdefimp := FALSE ;   (* default to program module *)
   (* stop if we see eof, ';' or '[' *)
   WHILE (currenttoken#eoftok) AND (currenttoken#semicolontok) AND (currenttoken#lsbratok) DO
      IF (currenttoken=implementationtok) OR (currenttoken=definitiontok)
      THEN
         isdefimp := TRUE ;
         GetToken
      END ;
      IF currenttoken=identtok
      THEN
         name := makekey(currentstring) ;
         RETURN
      END ;
      GetToken
   END ;
   m2flex.M2Error(string(InitString('failed to find module name'))) ;
   exit(1)
END ExamineCompilationUnit ;


(*
   ScanSources - scans all the source files for IMPORTs and places all
                 imports into the Sources array.
*)

PROCEDURE ScanSources (src: Name) ;
VAR
   isdefimp: BOOLEAN ;
BEGIN
   Head := NIL ;
   Tail := NIL ;
   IF OpenSource(PreprocessModule(InitStringCharStar(KeyToCharStar(src))))
   THEN
      ExamineCompilationUnit(MainName, isdefimp) ;
      CloseSource ;
      ReInitialize ;
      MakeModule(MainName) ;
      IF IncludeM2RTS
      THEN
         (*
            we should include M2RTS as a dependant module otherwise it simply wont link
         *)
         MakeModule(MakeKey('M2RTS')) ;
         MakeDependant(MainName, MakeKey('M2RTS'))
      END ;
      pSource := Head ;
      WHILE pSource#NIL DO
         ScanImport ;
         pSource := pSource^.next
      END
   ELSE
      fprintf1(StdErr, 'cannot open source file: %a\n', src) ;
      exit(1)
   END
END ScanSources ;


(*
   ScanImportsIn - scans source for imports and any imported file is added
                   to the Sources list.
                   It checks to see whether the definition module
                   contains EXPORT UNQUALIFIED and/or is a DEFINITION MODULE FOR C.
*)

PROCEDURE ScanImportsIn (extension: Name; IsDefinition: BOOLEAN) : BOOLEAN ;
VAR
   modname: Name ;
   i, n   : CARDINAL ;
BEGIN
   IF Open(pSource^.name, extension, IsDefinition)
   THEN
      IF Debugging
      THEN
         printf2('opened %a.%a\n', pSource^.name, extension)
      END ;
      InitList(ImportedModules) ;
      CompilationUnit ;
      CloseSource ;
      i := 1 ;
      n := NoOfItemsInList(ImportedModules) ;
      WHILE i<=n DO
         modname := GetItemFromList(ImportedModules, i) ;
         MakeModule(modname) ;
         MakeDependant(pSource^.name, modname) ;
         INC(i)
      END ;
      KillList(ImportedModules) ;
      RETURN( TRUE )
   ELSE
      RETURN( FALSE )
   END
END ScanImportsIn ;


(*
   ScanImport - looks for .def and .mod source files and scans imports of these
                sources.
*)

PROCEDURE ScanImport ;
BEGIN
   IF ScanImportsIn(MakeKey('def'), TRUE)
   THEN
   END ;
   (* set OnlyDef to TRUE if we dont see a .mod file *)
   pSource^.OnlyDef := NOT ScanImportsIn(MakeKey('mod'), FALSE)
END ScanImport ;

% declaration gm2l begin


(*
   ErrorArray - 
*)

PROCEDURE ErrorArray (a: ARRAY OF CHAR) ;
BEGIN
   ErrorString(InitString(a))
END ErrorArray ;


(*
   ErrorString - 
*)

PROCEDURE ErrorString (s: String) ;
BEGIN
   fprintf1(StdErr, "%s\n", s)
END ErrorString ;


(*
   SyntaxError - after a syntax error we skip all tokens up until we reach
                 a stop symbol.
*)

PROCEDURE SyntaxError (stopset0: SetOfStop0; stopset1: SetOfStop1; stopset2: SetOfStop2) ;
BEGIN
   DescribeError(stopset0, stopset1, stopset2) ;
   IF Debugging
   THEN
      printf0('\nskipping token *** ')
   END ;
   (*
      yes the ORD(currenttoken) looks ugly, but it is *much* safer than
      using currenttoken<sometok as a change to the ordering of the
      token declarations below would cause this to break. Using ORD() we are
      immune from such changes
   *)
   WHILE NOT (((ORD(currenttoken)<32)  AND (currenttoken IN stopset0)) OR
              ((ORD(currenttoken)>=32) AND (ORD(currenttoken)<64) AND (currenttoken IN stopset1)) OR
              ((ORD(currenttoken)>=64) AND (currenttoken IN stopset2)))
   DO
      GetToken
   END ;
   IF Debugging
   THEN
      printf0(' ***\n')
   END
END SyntaxError ;


(*
   SyntaxCheck - 
*)

PROCEDURE SyntaxCheck (stopset0: SetOfStop0; stopset1: SetOfStop1; stopset2: SetOfStop2) ;
BEGIN
   (* and again (see above re: ORD)
    *)
   IF NOT (((ORD(currenttoken)<32)  AND (currenttoken IN stopset0)) OR
     	   ((ORD(currenttoken)>=32) AND (ORD(currenttoken)<64) AND (currenttoken IN stopset1)) OR
           ((ORD(currenttoken)>=64) AND (currenttoken IN stopset2)))
   THEN
      SyntaxError(stopset0, stopset1, stopset2)
   END
END SyntaxCheck ;


(*
   WarnMissingToken - generates a warning message about a missing token, t.
*)

PROCEDURE WarnMissingToken (t: toktype) ;
VAR
   s0 : SetOfStop0 ;
   s1 : SetOfStop1 ;
   s2 : SetOfStop2 ;
   str: String ;
BEGIN
   s0 := SetOfStop0{} ;
   s1 := SetOfStop1{} ;
   s2 := SetOfStop2{} ;
   IF ORD(t)<32
   THEN
      s0 := SetOfStop0{t}
   ELSIF ORD(t)<64
   THEN
      s1 := SetOfStop1{t}
   ELSE
      s2 := SetOfStop2{t}
   END ;
   str := DescribeStop(s0, s1, s2) ;
   
   str := ConCat(InitString('syntax error,'), Mark(str)) ;
   ErrorString(str)
END WarnMissingToken ;


(*
   MissingToken - generates a warning message about a missing token, t.
*)

PROCEDURE MissingToken (t: toktype) ;
BEGIN
   WarnMissingToken(t) ;
   IF (t#identtok) AND (t#integertok) AND (t#realtok) AND (t#stringtok)
   THEN
      IF Debugging
      THEN
         printf0('inserting token\n')
      END ;
      InsertToken(t)
   END
END MissingToken ;


(*
   CheckAndInsert - 
*)

PROCEDURE CheckAndInsert (t: toktype; stopset0: SetOfStop0; stopset1: SetOfStop1; stopset2: SetOfStop2) : BOOLEAN ;
BEGIN
   IF ((ORD(t)<32) AND (t IN stopset0)) OR
      ((ORD(t)>=32) AND (ORD(t)<64) AND (t IN stopset1)) OR
      ((ORD(t)>=64) AND (t IN stopset2))
   THEN
      WarnMissingToken(t) ;
      InsertTokenAndRewind(t) ;
      RETURN( TRUE )
   ELSE
      RETURN( FALSE )
   END
END CheckAndInsert ;


(*
   InStopSet 
*)

PROCEDURE InStopSet (t: toktype; stopset0: SetOfStop0; stopset1: SetOfStop1; stopset2: SetOfStop2) : BOOLEAN ;
BEGIN
   IF ((ORD(t)<32) AND (t IN stopset0)) OR
      ((ORD(t)>=32) AND (ORD(t)<64) AND (t IN stopset1)) OR
      ((ORD(t)>=64) AND (t IN stopset2))
   THEN
      RETURN( TRUE )
   ELSE
      RETURN( FALSE )
   END
END InStopSet ;


(*
   PeepToken - peep token checks to see whether the stopset is satisfied by currenttoken
               If it is not then it will insert a token providing the token
               is one of ; ] ) } . OF END ,

               if the stopset contains <identtok> then we do not insert a token
*)

PROCEDURE PeepToken (stopset0: SetOfStop0; stopset1: SetOfStop1; stopset2: SetOfStop2) ;
BEGIN
   (* and again (see above re: ORD)
    *)
   IF (NOT (((ORD(currenttoken)<32)  AND (currenttoken IN stopset0)) OR
     	    ((ORD(currenttoken)>=32) AND (ORD(currenttoken)<64) AND (currenttoken IN stopset1)) OR
            ((ORD(currenttoken)>=64) AND (currenttoken IN stopset2)))) AND
      (NOT InStopSet(identtok, stopset0, stopset1, stopset2))
   THEN
      (* SyntaxCheck would fail since currentoken is not part of the stopset
         we check to see whether any of currenttoken might be a commonly omitted token *)
      IF CheckAndInsert(semicolontok, stopset0, stopset1, stopset2) OR
         CheckAndInsert(rsbratok, stopset0, stopset1, stopset2) OR
         CheckAndInsert(rparatok, stopset0, stopset1, stopset2) OR
         CheckAndInsert(rcbratok, stopset0, stopset1, stopset2) OR
         CheckAndInsert(periodtok, stopset0, stopset1, stopset2) OR
         CheckAndInsert(oftok, stopset0, stopset1, stopset2) OR
         CheckAndInsert(endtok, stopset0, stopset1, stopset2) OR
         CheckAndInsert(commatok, stopset0, stopset1, stopset2)
      THEN
      END
   END
END PeepToken ;


(*
   Expect - 
*)

PROCEDURE Expect (t: toktype; stopset0: SetOfStop0; stopset1: SetOfStop1; stopset2: SetOfStop2) ;
BEGIN
   IF currenttoken=t
   THEN
      GetToken ;
      PeepToken(stopset0, stopset1, stopset2)
   ELSE
      MissingToken(t)
   END ;
   SyntaxCheck(stopset0, stopset1, stopset2)
END Expect ;


(*
   InitStopSet - initializes the stop set to include token, t.
*)

PROCEDURE InitStopSet (t: toktype; VAR stopset0: SetOfStop0; VAR stopset1: SetOfStop1; VAR stopset2: SetOfStop2) ;
BEGIN
   IF ORD(t)<32
   THEN
      INCL(stopset0, ORD(t))
   ELSIF ORD(t)<64
   THEN
      INCL(stopset1, ORD(t)-32)
   ELSE
      INCL(stopset2, ORD(t)-64)
   END
END InitStopSet ;


(*
   CompilationUnit - parses the source file.
*)

PROCEDURE CompilationUnit ;
VAR
   s0: SetOfStop0 ;
   s1: SetOfStop1 ;
   s2: SetOfStop2 ;
BEGIN
   s0 := SetOfStop0{} ;
   s1 := SetOfStop1{} ;
   s2 := SetOfStop2{} ;
   InitStopSet(eoftok, s0, s1, s2) ;
   InitStopSet(consttok, s0, s1, s2) ;
   InitStopSet(typetok, s0, s1, s2) ;
   InitStopSet(vartok, s0, s1, s2) ;
   InitStopSet(proceduretok, s0, s1, s2) ;
   InitStopSet(begintok, s0, s1, s2) ;
   InitStopSet(moduletok, s0, s1, s2) ;
   InitStopSet(endtok, s0, s1, s2) ;
   FileUnit(s0, s1, s2)
END CompilationUnit ;


(*
   Ident - error checking varient of Ident
*)

PROCEDURE Ident (stopset0: SetOfStop0; stopset1: SetOfStop1; stopset2: SetOfStop2) ;
BEGIN
   LastIdent := makekey(currentstring) ;
   Expect(identtok, stopset0, stopset1, stopset2)
END Ident ;


(*
   str -
*)

PROCEDURE str (stopset0: SetOfStop0; stopset1: SetOfStop1; stopset2: SetOfStop2) ;
BEGIN
   Expect(stringtok, stopset0, stopset1, stopset2)
END str ;


(*
   Integer -
*)

PROCEDURE Integer (stopset0: SetOfStop0; stopset1: SetOfStop1; stopset2: SetOfStop2) ;
BEGIN
   Expect(integertok, stopset0, stopset1, stopset2)
END Integer ;


(*
   Real -
*)

PROCEDURE Real (stopset0: SetOfStop0; stopset1: SetOfStop1; stopset2: SetOfStop2) ;
BEGIN
   Expect(realtok, stopset0, stopset1, stopset2)
END Real ;

% module gm2l end
(*
   MakeModule - makes a module for ModuleName.
*)

PROCEDURE MakeModule (ModuleName: Name) ;
VAR
   s: Source ;
BEGIN
   s := Head ;
   WHILE s#NIL DO
      WITH s^ DO
         IF name=ModuleName
         THEN
            RETURN
         ELSE
            s := s^.next
         END
      END
   END ;
   (* not found so create new entry *)
   IF Head=NIL
   THEN
      NEW(Head) ;
      Tail := Head
   ELSE
      NEW(Tail^.next) ;
      Tail := Tail^.next
   END ;
   WITH Tail^ DO
      name        := ModuleName ;
      Depth       := 0 ;
      ForC        := FALSE ;
      OnlyDef     := FALSE ;
      next        := NIL
   END
END MakeModule ;


(*
   Open - attempts to open a module, it will return TRUE if the module can be found.
*)

PROCEDURE Open (ModuleName, ExtName: Name; IsDefinition: BOOLEAN) : BOOLEAN ;
VAR
   a, b: String ;
BEGIN
   IF (NOT IsDefinition) AND (ModuleName=MainName)
   THEN
      a := InitStringCharStar(KeyToCharStar(MainSrc)) ;
      IF OpenSource(PreprocessModule(a))
      THEN
         a := KillString(a) ;
         RETURN( TRUE )
      ELSE
         a := KillString(a) ;
         RETURN( FALSE )
      END
   ELSE
      a := CalculateFileName(InitStringCharStar(KeyToCharStar(ModuleName)),
                             Mark(InitStringCharStar(KeyToCharStar(ExtName)))) ;
      IF FindSourceFile(a, b) AND OpenSource(PreprocessModule(b))
      THEN
         a := KillString(a) ;
         b := KillString(b) ;
         RETURN( TRUE )
      ELSE
         a := KillString(a) ;
         b := KillString(b) ;
         RETURN( FALSE )
      END
   END
END Open ;


(*
   CalculateDepth - for each module in the list, calculate the dependancy depth.
*)

PROCEDURE CalculateDepth ;
VAR
   p: Source ;
BEGIN
   p := Head ;
   WHILE p#NIL DO
      WITH p^ DO
         Depth := GetDepth(name)
      END ;
      p := p^.next
   END
END CalculateDepth ;


(*
   Swap - swaps the contents of, p, and, q. The next field remains the same.
*)

PROCEDURE Swap (p, q: Source) ;
VAR
   t: source ;
   n: Source ;
BEGIN
   t := p^ ;
   n := p^.next ;
   p^ := q^ ;
   p^.next := n ;  (* preserve the next field of p *)
   n := q^.next ;
   q^ := t ;
   q^.next := n    (* preserve the next field of q *)
END Swap ;


(*
   SortSources - sorts the module sources into the order of runtime
                 initialization.
*)

PROCEDURE SortSources ;
VAR
   pi, pj: Source ;
BEGIN
   pi := Head ;
   WHILE pi#NIL DO
      pj := Head ;
      WHILE pj#NIL DO
         IF (pi#pj) AND (pi^.Depth>pj^.Depth)
         THEN
            Swap(pi, pj)
         END ;
         pj := pj^.next
      END ;
      pi := pi^.next
   END
END SortSources ;


(*
   DisplaySources - displays the source names 1..SourceNo.
*)

PROCEDURE DisplaySources ;
VAR
   p: Source ;
   s: String ;
BEGIN
   CommentChar := Comment ;
   p := Head ;
   WHILE p#NIL DO
      WITH p^ DO
         fprintf3(fo, '%c %a %4d\n', CommentChar, name, Depth)
      END ;
      p := p^.next
   END ;
   fprintf3(fo, '%c\n%c Initialization order\n%c\n', CommentChar, CommentChar, CommentChar) ;
   p := Head ;
   WHILE p#NIL DO
      WITH p^ DO
         (*
            do not automatically link ForC modules,
	    the user must specify them either as -lmodule or module.o
         *)
         IF (NOT ForC) OR (name=MakeKey('SYSTEM'))
         THEN
            fprintf1(fo, '%a\n', name)
         END
      END ;
      p := p^.next
   END
END DisplaySources ;


(*
   OpenOutputFile - attempts to open an output file.
*)

PROCEDURE OpenOutputFile (s: String) ;
BEGIN
   IF EqualArray(s, '-')
   THEN
      fo := StdOut
   ELSE
      fo := OpenToWrite(s) ;
      IF NOT IsNoError(fo)
      THEN
         fprintf1(StdErr, 'cannot write to: %s\n', s) ;
         exit(1)
      END
   END
END OpenOutputFile ;


(*
   ScanArgs - scans the argument list and returns TRUE if the main source
              module is found.
*)

PROCEDURE ScanArgs () : BOOLEAN ;
VAR
   i, n: CARDINAL ;
   s   : String ;
BEGIN
   IncludeM2RTS := TRUE ;
   MainName := NulName ;
   n := SArgs.Narg() ;
   IF n=1
   THEN
      printf0('Usage: gm2l [-M2RTS] [-Isearchpath] [-o outputfile] modulefile\n')
   ELSE
      i := 1 ;
      REPEAT
         IF SArgs.GetArg(s, i)
         THEN
            IF EqualArray(Mark(Slice(s, 0, 2)), '-I')
            THEN
               PrependSearchPath(Slice(s, 2, 0))
            ELSIF EqualArray(s, '-Wcppbegin')
            THEN
               i := ScanCppArgs(i)
            ELSIF EqualArray(s, '-M2RTS')
            THEN
               (* no M2RTS to be automatically linked imported from the main module *)
               IncludeM2RTS := FALSE
            ELSIF EqualArray(s, '-o')
            THEN
               INC(i) ;
               IF GetArg(s, i)
               THEN
                  OpenOutputFile(s)
               END
            ELSE
               MainSrc := makekey(string(s))
            END
         END ;
         INC(i)
      UNTIL i>n
   END ;
   RETURN( MainSrc#NulName )
END ScanArgs ;


BEGIN
   fo := StdOut ;
   IF ScanArgs()
   THEN
      ScanSources(MainSrc) ;
      CalculateDepth ;
      SortSources ;
      DisplaySources
   END ;
   Close(fo)
END gm2l.
% rules
error       'ErrorArray' 'ErrorString'
tokenfunc   'currenttoken'

token   ''                eoftok      -- internal token
token   '+'               plustok
token   '-'               minustok
token   '*'               timestok
token   '/'               dividetok
token   ':='              becomestok
token   '&'               ambersandtok
token   "."               periodtok
token   ","               commatok
token   ";"               semicolontok
token   '('               lparatok
token   ')'               rparatok
token   '['               lsbratok   -- left  square brackets
token   ']'               rsbratok   -- right square brackets
token   '{'               lcbratok   -- left  curly brackets
token   '}'               rcbratok   -- right curly brackets
token   '^'               uparrowtok
token   "'"               singlequotetok
token   '='               equaltok
token   '#'               hashtok
token   '<'               lesstok
token   '>'               greatertok
token   '<>'              lessgreatertok
token   '<='              lessequaltok
token   '>='              greaterequaltok
token   '..'              periodperiodtok
token   ':'               colontok
token   '"'               doublequotestok
token   '|'               bartok
token   'AND'             andtok
token   'ARRAY'           arraytok
token   'BEGIN'           begintok
token   'BY'              bytok
token   'CASE'            casetok
token   'CONST'           consttok
token   'DEFINITION'      definitiontok
token   'DIV'             divtok
token   'DO'              dotok
token   'ELSE'            elsetok
token   'ELSIF'           elsiftok
token   'END'             endtok
token   'EXIT'            exittok
token   'EXPORT'          exporttok
token   'FOR'             fortok
token   'FROM'            fromtok
token   'IF'              iftok
token   'IMPLEMENTATION'  implementationtok
token   'IMPORT'          importtok
token   'IN'              intok
token   'LOOP'            looptok
token   'MOD'             modtok
token   'MODULE'          moduletok
token   'NOT'             nottok
token   'OF'              oftok
token   'OR'              ortok
token   'POINTER'         pointertok
token   'PROCEDURE'       proceduretok
token   'QUALIFIED'       qualifiedtok
token   'UNQUALIFIED'     unqualifiedtok
token   'RECORD'          recordtok
token   'REPEAT'          repeattok
token   'RETURN'          returntok
token   'SET'             settok
token   'THEN'            thentok
token   'TO'              totok
token   'TYPE'            typetok
token   'UNTIL'           untiltok
token   'VAR'             vartok
token   'WHILE'           whiletok
token   'WITH'            withtok
token   'ASM'             asmtok
token   'VOLATILE'        volatiletok
token   '...'             periodperiodperiodtok
token   '__DATE__'        datetok
token   '__LINE__'        linetok
token   '__FILE__'        filetok
token   '__ATTRIBUTE__'   attributetok
token   '__BUILTIN__'     builtintok
token   'integer number'  integertok
token   'identifier'      identtok
token   'real number'     realtok
token   'str'             stringtok

special Ident             first { < identtok > } follow { }
special Integer           first { < integertok > } follow { }
special Real              first { < realtok > } follow { }
special str               first { < stringtok > } follow { }

BNF

-- the following are provided by the module m2flex and also handbuilt procedures below
-- Ident := Letter { ( Letter | Digit ) } =:
-- Integer := Digit { Digit } | OctalDigit { OctalDigit } ( " B " | " C " ) |
--           Digit { HexDigit } " H " =:
-- Real := Digit { Digit } " . " { Digit } [ ScaleFactor ] =:
-- ScaleFactor := " E " [ ( " + " | " - " ) ] Digit { Digit } =:
-- HexDigit := Digit | " A " | " B " | " C " | " D " | " E " | " F " =:
-- Digit := OctalDigit | " 8 " | " 9 " =:
-- OctalDigit := "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" =:
-- String

FileUnit :=  
            ( DefinitionModule |
              ImplementationOrProgramModule )
         =:

ProgramModule := "MODULE" 
                  Ident

                  [ Priority ] ";"

                  { Import
                  }       
                  =:

ImplementationModule := "IMPLEMENTATION" "MODULE"
                         Ident                   
                         [ Priority ] ";"        
                         { Import               
                           }                     
                         =:

ImplementationOrProgramModule := ImplementationModule | ProgramModule =:

DefinitionModule := "DEFINITION" "MODULE" [ "FOR" str                       % pSource^.ForC := TRUE %
                                          ]
                    Ident              
                    ";"
                    { Import             
                             } [ Export  
                                        ]
                  =:

Number := Integer | Real =:

Qualident := Ident { "." Ident } =:

Priority := "[" ConstExpression "]" =:

Export := "EXPORT" ( "QUALIFIED"
                                 IdentList |
                     "UNQUALIFIED"
                                 IdentList |
                     IdentList ) ";" =:

Import :=  "FROM" Ident                                                     % IncludeItemIntoList(ImportedModules, LastIdent) %
                 "IMPORT" IdentList ";" |
           "IMPORT" ImportList ";" =:

IdentList := Ident { "," Ident } =:

ImportList := Ident                                                         % IncludeItemIntoList(ImportedModules, LastIdent) %
                    { "," Ident                                             % IncludeItemIntoList(ImportedModules, LastIdent) %
                                } =:

ConstExpression := SimpleConstExpr [ Relation SimpleConstExpr ] =:

Relation := "=" | "#" | "<>" | "<" | "<=" | ">" | ">=" | "IN" =:

SimpleConstExpr := UnaryOrConstTerm { AddOperator ConstTerm } =:

UnaryOrConstTerm := "+" ConstTerm | "-" ConstTerm | ConstTerm =:

AddOperator := "+" | "-" | "OR" =:

ConstTerm := ConstFactor { MulOperator ConstFactor } =:

MulOperator := "*" | "/" | "DIV" | "MOD" | "AND" | "&" =:

ConstFactor := Number | ConstString | ConstSetOrQualidentOrFunction |
               "(" ConstExpression ")" | "NOT" ConstFactor |
               ConstAttribute =:

-- to help satisfy LL1

ConstString := str =:

ConstSetOrQualidentOrFunction := SimpleSet | Qualident [ SimpleSet | ConstActualParameters ]  =:

ConstActualParameters :=  "(" [ ConstExpList ] ")" =:

ConstExpList := ConstExpression { "," ConstExpression } =:

ConstAttribute := "__ATTRIBUTE__" "__BUILTIN__" "(" "(" Ident ")" ")" =:

SimpleSet := "{" [ Element { "," Element } ] "}" =:

Element := ConstExpression [ ".." ConstExpression ] =:

-- Block tells us when the exports/imports have finished (we use this rule to hand build our stop set)

-- Block := "CONST" |
--          "TYPE" |
--          "VAR" |
--          "PROCEDURE" |
--          "MODULE" |
--          "BEGIN" |
--          "END" =:

FNB
