/* Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc. */
/* This file is part of GNU Modula-2.

GNU Modula-2 is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2, or (at your option) any later
version.

GNU Modula-2 is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with gm2; see the file COPYING.  If not, write to the Free Software
Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

It originated from p2c-1.20 another GNU Project "p2c" file: src/system.imp
*/

(* "p2c", a Pascal to C translator, version 1.20.
   Copyright (C) 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
                 2000, 2001, 2002, 2003, 2004, 2005
   Free Software Foundation.
   Author: Dave Gillespie.
   Author's address: daveg@csvax.caltech.edu; 256-80 Caltech/Pasadena CA 91125.
*)

{ Declarations for Pascal built-in objects }

{ Note: All functions with unusual syntaxes are not included here }


{*IgnoreNonAlpha=0}   { If Language=UCSD, make sure we can parse "__module" }


__module SYSTEM;   {PERMANENT}


__export

{ Standard Pascal functions }
function  arctan(x : longreal) : longreal;
function  cos(x : longreal) : longreal;
function  exp(x : longreal) : longreal;
function  ln(x : longreal) : longreal;
procedure mark(var p);
function  odd(i : integer) : boolean;
procedure release(var p);
function  round(x : longreal) : integer;
function  sin(x : longreal) : longreal;
function  sqrt(x : longreal) : longreal;
function  trunc(x : longreal) : integer;



{ HP Pascal extensions }
function  binary(s : string) : integer;
procedure gotoxy(x, y : integer);
function  hex(s : string) : integer;
function  lastpos(anyvar f : text) : integer;
function  linepos(var f : text) : integer;
procedure moveleft(anyvar s, d : integer; i : integer);
procedure moveright(anyvar s, d : integer; i : integer);
function  octal(s : string) : integer;
function  str(s : string; i, j : integer) : string;
function  strlen(s : string) : integer;
function  strltrim(s : string) : string;
function  strmax(s : string) : integer;
function  strpos(s, s2 : string) : integer;
function  strrpt(s : string; i : integer) : string;
function  strrtrim(s : string) : string;



{ Turbo/UCSD Pascal extensions }
function  copy(s : string; i, j : integer) : string;
procedure delete(var s; i, j : integer);
function  frac(x : longreal) : longreal;
procedure freemem(var p);
procedure getmem(var p; i : integer);
procedure insert(s : string; var s2; i : integer);
function  length(s : string) : integer;
function  log(x : longreal) : longreal;
function  maxavail : integer;
function  memavail : integer;
procedure move(var s, d; i : integer);
function  paramcount : integer;
function  paramstr(i : integer) : string;
function  pos(s, s2 : string) : integer;
function  ptr(i, j : integer) : pointer;
function  pwroften(r : longreal) : longreal;
function  swap(i : integer) : integer;
function  upcase(c : char) : char;


{ Turbo standard variables }

var
   HeapPtr, FreePtr: pointer;


{ Oregon Software Pascal-2 extensions }
{FuncMacro p2_inew(n) = malloc(n)}
{FuncMacro p2_new(x,n) = (*x = Malloc(n))}
{FuncMacro p2_dispose(x,n) = Free(*x)}
procedure noioerror(var f);
function ioerror(var f) : boolean;
function iostatus(var f) : integer;
{FuncMacro exitst(s) = exit(s)}
procedure exitst(s : integer);
{FuncMacro P_getcmdline(low,high,line,len)=(*len=P_getcmdline(low,high,line))}
procedure P_getcmdline(var line : array [low..high : integer] of char; var len : integer);
procedure TimeStamp(var day, month, year, hour, min, sec : integer);


{ VAX Pascal extensions }
function  expo(r : real) : integer;
function  index(s, s2 : string) : integer;
function  pad(s : string; padchar : char; size : integer) : string;
function  substr(s : string; i, j : integer) : string;
function  uround(x : longreal) : integer;
function  utrunc(x : longreal) : integer;



{ MPW Pascal extensions }
function  arccos(r : longreal) : longreal;
function  arcsin(r : longreal) : longreal;
function  arctanh(r : longreal) : longreal;
function  cosh(r : longreal) : longreal;
function  exp10(r : longreal) : longreal;
function  log10(r : longreal) : longreal;
function  scaneq(limit : integer; ch : char; var s : univ integer) : integer;
function  scanne(limit : integer; ch : char; var s : univ integer) : integer;
function  sinh(r : longreal) : longreal;
function  tan(r : longreal) : longreal;
function  tanh(r : longreal) : longreal;


{ SUN Pascal extensions }
type alfa = packed array [1..10] of char;
{FuncMacro argc = P_argc}
function  argc : integer;
{FuncMacro null = 0}
procedure null;



end.



