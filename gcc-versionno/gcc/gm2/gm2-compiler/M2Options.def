(* Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
                 2010, 2011, 2012, 2013
                 Free Software Foundation, Inc. *)
(* This file is part of GNU Modula-2.

GNU Modula-2 is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 3, or (at your option) any later
version.

GNU Modula-2 is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with gm2; see the file COPYING.  If not, write to the Free Software
Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA. *)

DEFINITION MODULE M2Options ;

(*
   Author     : Gaius Mulley
   Title      : M2Options
   Date       : 27/5/87  [$Date: 2013/08/14 20:39:40 $]
   SYSTEM     : UNIX (GNU Modula-2)
   Description: Initializes the user options in the Modula-2 compiler.
   Version    : $Revision: 1.31 $
*)

FROM SYSTEM IMPORT ADDRESS ;
FROM DynamicStrings IMPORT String ;
FROM m2linemap IMPORT location_t ;

EXPORT QUALIFIED SetReturnCheck, SetNilCheck, SetCaseCheck,
                 SetCheckAll, SetVerboseUnbounded, SetQuiet, SetCpp,
                 SetMakeall, SetMakeall0, SetIncludePath,
                 SetUnboundedByReference,
                 SetSearchPath, SetISO, SetPIM, SetPIM2, SetPIM3, SetPIM4,
                 SetPositiveModFloor, SetCompilerDebugging, SetExceptions,
                 SetStudents, SetPedantic, SetPedanticParamNames, SetPedanticCast,
                 SetExtendedOpaque, SetXCode, SetQuadDebugging, SetSources,
                 SetDumpSystemExports,
                 SetSwig, DisplayVersion, SetOptimizing, SetForcedLocation,
                 SetCC1Quiet, SetWholeProgram, SetDebugTraceQuad, SetDebugTraceAPI,
                 SetVerbose,

                 Iso, Pim, Pim2, Pim3, Pim4,
                 PositiveModFloorDiv,
                 Pedantic, Verbose, Statistics,
                 UnboundedByReference, VerboseUnbounded,
                 Profiling, Coding, Optimizing,
                 OptimizeBasicBlock, OptimizeUncalledProcedures,
                 OptimizeCommonSubExpressions,
                 StudentChecking, WholeProgram,
                 NilChecking,
                 WholeDivChecking, WholeValueChecking,
                 IndexChecking, RangeChecking,
                 ReturnChecking, CaseElseChecking,
                 VariantValueChecking,
                 Quiet, LineDirectives, CPreProcessor, Xcode, ExtendedOpaque,
                 PedanticParamNames, PedanticCast,
      	       	 DisplayQuadruples, DebugTraceQuad, DebugTraceAPI,
                 CompilerDebugging, GenerateDebugging, GenerateLineDebug,
                 DumpSystemExports, GenerateSwig, Exceptions,
                 OverrideLocation, FinaliseOptions,
                 DebugBuiltins, setdefextension, setmodextension,
                 SetStatistics,
                 CppProg, CppArg, CppCommandLine, CppRemember ;


VAR
   Iso,                          (* -fiso use ISO SYSTEM.def                 *)
   Pim,                          (* -fpim use PIM [234] SYSTEM.def           *)
   Pim2,                         (* -fpim2 use strict rules.                 *)
   Pim3,                         (* -fpim3 use strict rules.                 *)
   Pim4,                         (* -fpim4 use strict rules.                 *)
   PositiveModFloorDiv,          (* force PIM4 behaviour for DIV and MOD     *)
   CompilerDebugging,            (* -fd internal debugging messages          *)
   DebugTraceQuad,               (* -fdebug-trace-quad                       *)
   DebugTraceAPI,                (* -fdebug-trace-api                        *)
   GenerateDebugging,            (* -g option to generate info for gdb/dbx   *)
   GenerateLineDebug,            (* -gline to generate line debugging.       *)
   Verbose,                      (* -verbose produce verbose error messages. *)
   Pedantic,                     (* -pedantic be pedantic on error checking. *)
   PedanticParamNames,           (* -Wpedantic-param-names                   *)
   PedanticCast,                 (* -Wpedantic-cast warns if sizes differ.   *)
   Statistics,                   (* -fstatistics information about code      *)
   StudentChecking,              (* -Wstudents checks for common student errs*)
   DisplayQuadruples,            (* -Wq option will display quadruples.      *)
   UnboundedByReference,         (* -funbounded-by-reference                 *)
   VerboseUnbounded,             (* -Wverbose-unbounded                      *)
   OptimizeUncalledProcedures,   (* -Ouncalled removes uncalled procedures   *)
   OptimizeBasicBlock,           (* -Obb create basic blocks and optimize.   *)
   OptimizeCommonSubExpressions, (* -Ocse optimize common subexpressions     *)
   WholeProgram,                 (* -fwhole-program optimization.            *)
   NilChecking,                  (* -fnil makes compiler test for pointer    *)
                                 (* NIL                                      *)
   WholeDivChecking,             (* -fwholediv produces code to raise an     *)
                                 (* exception if a whole number divide by    *)
                                 (* zero occurs.                             *)
   WholeValueChecking,           (* -fwholevalue produces code to raise an   *)
                                 (* exception if a whole value variable is   *)
                                 (* about to exceed the type limits.         *)
   IndexChecking,                (* -findex array bounds checking.           *)
   RangeChecking,                (* -frange assignment, set values,          *)
                                 (* constructor values in range.             *)
   ReturnChecking,               (* -freturn checks that functions always    *)
                                 (* exit with a RETURN statement.            *)
   CaseElseChecking,             (* -fcase checks program does not need an   *)
                                 (* else statement within an case statement  *)
                                 (* when the user omits one                  *)
   VariantValueChecking,         (* should we check all values are present   *)
                                 (* in a variant record?  True for ISO and   *)
                                 (* false for PIM.                           *)
   Quiet,                        (* -fquiet option specified.                *)
   Alignment,                    (* should parameters and data be aligned?   *)
   LineDirectives,               (* should compiler understand preprocessor  *)
                                 (* # linenumber "filename" markers?         *)
   CPreProcessor,                (* must we run the cpp on the source?       *)
   Xcode,                        (* should errors follow Xcode format?       *)
   ExtendedOpaque,               (* do we allow non pointer opaque types?    *)
   DumpSystemExports,            (* print all inbuilt system items?          *)
   GenerateSwig,                 (* should we generate a swig interface file?*)
   Exceptions,                   (* should we generate exception code?       *)
   DebugBuiltins,                (* should we always call a real function?   *)
   ForcedLocation,
   Optimizing,
   Coding,
   Profiling         : BOOLEAN ;


(*
   DisplayVersion - displays the version of the compiler.
*)

PROCEDURE DisplayVersion ;


(*
   SetWholeProgram - sets the WholeProgram flag (-fwhole-program).
*)

PROCEDURE SetWholeProgram (value: BOOLEAN) ;


(*
   SetReturnCheck -
*)

PROCEDURE SetReturnCheck (value: BOOLEAN) : BOOLEAN ;


(*
   SetNilCheck -
*)

PROCEDURE SetNilCheck (value: BOOLEAN) : BOOLEAN ;


(*
   SetCaseCheck - set else case checking to, value.
*)

PROCEDURE SetCaseCheck (value: BOOLEAN) : BOOLEAN ;


(*
   SetCheckAll - set all runtime checking to, value.
*)

PROCEDURE SetCheckAll (value: BOOLEAN) : BOOLEAN ;


(*
   SetVerboseUnbounded - sets the VerboseUnbounded flag to, value.
*)

PROCEDURE SetVerboseUnbounded (value: BOOLEAN) : BOOLEAN ;


(*
   SetQuiet - sets the quiet flag to, value.
*)

PROCEDURE SetQuiet (value: BOOLEAN) : BOOLEAN ;


(*
   SetCC1Quiet - sets the cc1quiet flag to, value.
*)

PROCEDURE SetCC1Quiet (value: BOOLEAN) ;


(*
   SetCpp -
*)

PROCEDURE SetCpp (value: BOOLEAN) : BOOLEAN ;


(*
   SetMakeall -
*)

PROCEDURE SetMakeall (value: BOOLEAN) : BOOLEAN ;


(*
   SetMakeall0 -
*)

PROCEDURE SetMakeall0 (value: BOOLEAN) : BOOLEAN ;


(*
   SetIncludePath -
*)

PROCEDURE SetIncludePath (arg: ADDRESS) : BOOLEAN ;


(*
   SetUnboundedByReference -
*)

PROCEDURE SetUnboundedByReference (value: BOOLEAN) : BOOLEAN ;


(*
   SetSearchPath -
*)

PROCEDURE SetSearchPath (arg: ADDRESS) ;


(*
   SetISO -
*)

PROCEDURE SetISO (value: BOOLEAN) ;


(*
   SetPIM -
*)

PROCEDURE SetPIM (value: BOOLEAN) ;


(*
   SetPIM2 -
*)

PROCEDURE SetPIM2 (value: BOOLEAN) ;


(*
   SetPIM3 -
*)

PROCEDURE SetPIM3 (value: BOOLEAN) ;


(*
   SetPIM4 -
*)

PROCEDURE SetPIM4 (value: BOOLEAN) ;


(*
   SetPositiveModFloor -
*)

PROCEDURE SetPositiveModFloor (value: BOOLEAN) ;


(*
   SetWholeDiv -
*)

PROCEDURE SetWholeDiv (value: BOOLEAN) ;


(*
   SetIndex -
*)

PROCEDURE SetIndex (value: BOOLEAN) ;


(*
   SetRange -
*)

PROCEDURE SetRange (value: BOOLEAN) ;


(*
   SetExceptions -
*)

PROCEDURE SetExceptions (value: BOOLEAN) ;


(*
   SetStudents -
*)

PROCEDURE SetStudents (value: BOOLEAN) ;


(*
   SetPedantic -
*)

PROCEDURE SetPedantic (value: BOOLEAN) ;


(*
   SetPedanticParamNames -
*)

PROCEDURE SetPedanticParamNames (value: BOOLEAN) ;


(*
   SetPedanticCast -
*)

PROCEDURE SetPedanticCast (value: BOOLEAN) ;


(*
   SetExtendedOpaque -
*)

PROCEDURE SetExtendedOpaque (value: BOOLEAN) ;


(*
   SetXCode -
*)

PROCEDURE SetXCode (value: BOOLEAN) ;


(*
   SetCompilerDebugging - turn on internal compiler debugging.
*)

PROCEDURE SetCompilerDebugging (value: BOOLEAN) ;


(*
   SetQuadDebugging - display the quadruples (internal debugging).
*)

PROCEDURE SetQuadDebugging (value: BOOLEAN) ;


(*
   SetDebugTraceQuad - 
*)

PROCEDURE SetDebugTraceQuad (value: BOOLEAN) ;


(*
   SetDebugTraceAPI - 
*)

PROCEDURE SetDebugTraceAPI (value: BOOLEAN) ;


(*
   SetSources -
*)

PROCEDURE SetSources (value: BOOLEAN) ;


(*
   SetDumpSystemExports -
*)

PROCEDURE SetDumpSystemExports (value: BOOLEAN) ;


(*
   SetSwig -
*)

PROCEDURE SetSwig (value: BOOLEAN) ;


(*
   SetOptimizing -
*)

PROCEDURE SetOptimizing (value: CARDINAL) ;


(*
   OverrideLocation - possibly override the location value, depending upon
                      whether the -flocation= option was used.
*)

PROCEDURE OverrideLocation (location: location_t) : location_t ;


(*
   SetForcedLocation - sets the location for the lifetime of this compile to, location.
                       This is primarily an internal debugging switch.
*)

PROCEDURE SetForcedLocation (location: location_t) ;


(*
   setdefextension - 
*)

PROCEDURE setdefextension (arg: ADDRESS) ;


(*
   setmodextension - 
*)

PROCEDURE setmodextension (arg: ADDRESS) ;


(*
   SetStatistics - turn on/off generate of compile time statistics.
*)

PROCEDURE SetStatistics (on: BOOLEAN) ;


(*
   SetVerbose - set the Verbose flag to, value.  It returns TRUE.
*)

PROCEDURE SetVerbose (value: BOOLEAN) : BOOLEAN ;


(*
   CppProg - sets the cpp program to be, program.
*)

PROCEDURE CppProg (program: ADDRESS) ;


(*
   CppArg - sets the option and arg in the cpp command line.
*)

PROCEDURE CppArg (opt, arg: ADDRESS; joined: BOOLEAN) ;


(*
   CppCommandLine - returns the Cpp command line and all arguments.
*)

PROCEDURE CppCommandLine () : String ;


(*
   CppRemember - remember a string, s, as a cpp related argument.
                 The string, s, is not garbage collected.
*)

PROCEDURE CppRemember (s: String) ;


(*
   FinaliseOptions - once all options have been parsed we set any inferred
                     values.
*)

PROCEDURE FinaliseOptions ;


END M2Options.
