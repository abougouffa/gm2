# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_twoDsim', [dirname(__file__)])
        except ImportError:
            import _twoDsim
            return _twoDsim
        if fp is not None:
            try:
                _mod = imp.load_module('_twoDsim', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _twoDsim = swig_import_helper()
    del swig_import_helper
else:
    import _twoDsim
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def twoDsim_skipFor(*args):
  return _twoDsim.twoDsim_skipFor(*args)
twoDsim_skipFor = _twoDsim.twoDsim_skipFor

def twoDsim_simulateFor(*args):
  return _twoDsim.twoDsim_simulateFor(*args)
twoDsim_simulateFor = _twoDsim.twoDsim_simulateFor

def twoDsim_replayRate(*args):
  return _twoDsim.twoDsim_replayRate(*args)
twoDsim_replayRate = _twoDsim.twoDsim_replayRate

def twoDsim_fps(*args):
  return _twoDsim.twoDsim_fps(*args)
twoDsim_fps = _twoDsim.twoDsim_fps

def twoDsim_rotate(*args):
  return _twoDsim.twoDsim_rotate(*args)
twoDsim_rotate = _twoDsim.twoDsim_rotate

def twoDsim_accel(*args):
  return _twoDsim.twoDsim_accel(*args)
twoDsim_accel = _twoDsim.twoDsim_accel

def twoDsim_velocity(*args):
  return _twoDsim.twoDsim_velocity(*args)
twoDsim_velocity = _twoDsim.twoDsim_velocity

def twoDsim_pivot(*args):
  return _twoDsim.twoDsim_pivot(*args)
twoDsim_pivot = _twoDsim.twoDsim_pivot

def twoDsim_circle(*args):
  return _twoDsim.twoDsim_circle(*args)
twoDsim_circle = _twoDsim.twoDsim_circle

def twoDsim_fix(*args):
  return _twoDsim.twoDsim_fix(*args)
twoDsim_fix = _twoDsim.twoDsim_fix

def twoDsim_mass(*args):
  return _twoDsim.twoDsim_mass(*args)
twoDsim_mass = _twoDsim.twoDsim_mass

def twoDsim_poly6(*args):
  return _twoDsim.twoDsim_poly6(*args)
twoDsim_poly6 = _twoDsim.twoDsim_poly6

def twoDsim_poly5(*args):
  return _twoDsim.twoDsim_poly5(*args)
twoDsim_poly5 = _twoDsim.twoDsim_poly5

def twoDsim_poly4(*args):
  return _twoDsim.twoDsim_poly4(*args)
twoDsim_poly4 = _twoDsim.twoDsim_poly4

def twoDsim_poly3(*args):
  return _twoDsim.twoDsim_poly3(*args)
twoDsim_poly3 = _twoDsim.twoDsim_poly3

def twoDsim_box(*args):
  return _twoDsim.twoDsim_box(*args)
twoDsim_box = _twoDsim.twoDsim_box

def twoDsim_gravity(*args):
  return _twoDsim.twoDsim_gravity(*args)
twoDsim_gravity = _twoDsim.twoDsim_gravity
# This file is compatible with both classic and new-style classes.


