# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pgeif', [dirname(__file__)])
        except ImportError:
            import _pgeif
            return _pgeif
        if fp is not None:
            try:
                _mod = imp.load_module('_pgeif', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pgeif = swig_import_helper()
    del swig_import_helper
else:
    import _pgeif
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def new_charArray(*args):
  return _pgeif.new_charArray(*args)
new_charArray = _pgeif.new_charArray

def delete_charArray(*args):
  return _pgeif.delete_charArray(*args)
delete_charArray = _pgeif.delete_charArray

def charArray_getitem(*args):
  return _pgeif.charArray_getitem(*args)
charArray_getitem = _pgeif.charArray_getitem

def charArray_setitem(*args):
  return _pgeif.charArray_setitem(*args)
charArray_setitem = _pgeif.charArray_setitem

def batch():
  return _pgeif.batch()
batch = _pgeif.batch

def rm(*args):
  return _pgeif.rm(*args)
rm = _pgeif.rm

def get_time():
  return _pgeif.get_time()
get_time = _pgeif.get_time

def time_until():
  return _pgeif.time_until()
time_until = _pgeif.time_until

def is_frame():
  return _pgeif.is_frame()
is_frame = _pgeif.is_frame

def is_collision():
  return _pgeif.is_collision()
is_collision = _pgeif.is_collision

def do_next_event():
  return _pgeif.do_next_event()
do_next_event = _pgeif.do_next_event

def rotate(*args):
  return _pgeif.rotate(*args)
rotate = _pgeif.rotate

def accel(*args):
  return _pgeif.accel(*args)
accel = _pgeif.accel

def velocity(*args):
  return _pgeif.velocity(*args)
velocity = _pgeif.velocity

def circle(*args):
  return _pgeif.circle(*args)
circle = _pgeif.circle

def fix(*args):
  return _pgeif.fix(*args)
fix = _pgeif.fix

def mass(*args):
  return _pgeif.mass(*args)
mass = _pgeif.mass

def poly6(*args):
  return _pgeif.poly6(*args)
poly6 = _pgeif.poly6

def poly5(*args):
  return _pgeif.poly5(*args)
poly5 = _pgeif.poly5

def poly4(*args):
  return _pgeif.poly4(*args)
poly4 = _pgeif.poly4

def poly3(*args):
  return _pgeif.poly3(*args)
poly3 = _pgeif.poly3

def box(*args):
  return _pgeif.box(*args)
box = _pgeif.box

def gravity(*args):
  return _pgeif.gravity(*args)
gravity = _pgeif.gravity

def purple():
  return _pgeif.purple()
purple = _pgeif.purple

def blue():
  return _pgeif.blue()
blue = _pgeif.blue

def green():
  return _pgeif.green()
green = _pgeif.green

def red():
  return _pgeif.red()
red = _pgeif.red

def black():
  return _pgeif.black()
black = _pgeif.black

def white():
  return _pgeif.white()
white = _pgeif.white

def rgb(*args):
  return _pgeif.rgb(*args)
rgb = _pgeif.rgb

def get_ebuf(*args):
  return _pgeif.get_ebuf(*args)
get_ebuf = _pgeif.get_ebuf

def get_fbuf(*args):
  return _pgeif.get_fbuf(*args)
get_fbuf = _pgeif.get_fbuf
# This file is compatible with both classic and new-style classes.


