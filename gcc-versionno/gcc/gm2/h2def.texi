* h2def::                 Semi-automatic translation of C header files.


@node h2def, Assembly language, Interface to C, Using
@section Semi-automatic translation of C header files

Huge caveat: @samp{h2def} is extremely alpha code and it is very much
a work in progress.  As such it is likely to be heavily changed in the
future.  The documentation for @samp{h2def} is included here for
consistancy and also as this tool was used to produce the
@file{pth.def} and @file{vga.def} modules.  Nevertheless it currently
crashes when attempting to translate @file{stdio.h}.

The tool @samp{h2def} can be used to semi-automatically generate
@code{DEFINITION MODULE FOR "C"} modules. The tool takes as input a C
header file and generates as output a corresponding textual definition
module.  While the tool will not automatically translate complex C
header files it will generate definition modules for simple header
files.

For example consider the following excerpt from the
header file (@file{vga.h}):

@example
/* blit flags */
#define HAVE_BITBLIT 1
#define HAVE_FILLBLIT 2
#define HAVE_IMAGEBLIT 4
#define HAVE_HLINELISTBLIT 8
#define HAVE_BLITWAIT 16

    typedef struct @{
	int width;
	int height;
	int bytesperpixel;
	int colors;
	int linewidth;		/* scanline width in bytes */
	int maxlogicalwidth;	/* maximum logical scanline width */
	int startaddressrange;	/* changeable bits set */
	int maxpixels;		/* video memory / bytesperpixel */
	int haveblit;		/* mask of blit functions available */
	int flags;		/* other flags */

	/* Extended fields: */

	int chiptype;		/* Chiptype detected */
	int memory;		/* videomemory in KB */
	int linewidth_unit;	/* Use only a multiple of this as parameter for set_logicalwidth and
				   set_displaystart */
	char *linear_aperture;	/* points to mmap secondary mem aperture of card (NULL if unavailable) */
	int aperture_size;	/* size of aperture in KB if size>=videomemory. 0 if unavail */
	void (*set_aperture_page) (int page);
	/* if aperture_size<videomemory select a memory page */
	void *extensions;	/* points to copy of eeprom for mach32 */
	/* depends from actual driver/chiptype.. etc. */
    @} vga_modeinfo;

    extern vga_modeinfo *vga_getmodeinfo(int mode);
    extern int vga_getdefaultmode(void);
    extern int vga_getcurrentmode(void);
    extern int vga_getcurrentchipset(void);
    extern char *vga_getmodename(int mode);
@end example

Using the following command line @code{h2def vga.h} will generate
the module below:

@example
DEFINITION MODULE FOR "C" vga ;

CONST
     HAVE_BITBLIT =  1 ;
     HAVE_FILLBLIT =  2 ;
     HAVE_IMAGEBLIT =  4 ;
     HAVE_HLINELISTBLIT =  8 ;
     HAVE_BLITWAIT =  16 ;

TYPE
     vga_modeinfo =   RECORD
                         width: INTEGER ;
                         height: INTEGER ;
                         bytesperpixel: INTEGER ;
                         colors: INTEGER ;
                         linewidth: INTEGER ;
                         maxlogicalwidth: INTEGER ;
                         startaddressrange: INTEGER ;
                         maxpixels: INTEGER ;
                         haveblit: INTEGER ;
                         flags: INTEGER ;
                         chiptype: INTEGER ;
                         memory: INTEGER ;
                         linewidth_unit: INTEGER ;
                         linear_aperture: POINTER TO CHAR ;
                         aperture_size: INTEGER ;
                         set_aperture_page:  PROCEDURE (INTEGER) ;
                         extensions: ADDRESS ;
                      END ;
    
 PROCEDURE vga_getmodeinfo (mode: INTEGER) : ADDRESS ;
 PROCEDURE vga_getdefaultmode () : INTEGER ;
 PROCEDURE vga_getcurrentmode () : INTEGER ;
 PROCEDURE vga_getcurrentchipset () : INTEGER ;
 PROCEDURE vga_getmodename (mode: INTEGER) : ADDRESS ;

END vga.
@end example

The main limitation of @code{h2def} is in the preprocessing handling.
It does not understand the C preprocessor token constructor directives
@code{#} and @code{##}. Also it will not combine successive string
tokens.

Support for the @code{#define} mechanism is limited. Initially the
macro is parsed to check whether it is a constant expression.  If it
fails it is reassigned as a macro definition.  A macro which contains
C statement code cannot be translated into a definition module. These
macros and all dependents are poisoned and are not translated.
At present it does not understand macros with arguments.

The @samp{-I} option to @code{h2def} allows include directories to be
specified and the @samp{-C} option states that a macro definition must
be computed at compile time.  For example consider the following
header file called @code{ifdef.h}:

@example
#if !defined(FOOBAR)
# define FOOBAR
# define MAXIMUM 1000
#else
# define MAXIMUM 2000
#endif
@end example

which if processed by @code{h2def -CFOOBAR ifdef.h} yields the following code:

@example
DEFINITION MODULE FOR "C" ifdef ;

# if (!(defined(FOOBAR)))
CONST
   MAXIMUM = 1000 ;
# else
   MAXIMUM = 2000 ;
# endif
     
END ifdef.
@end example

The @samp{-a} option provides a method whereby the C parameter
construct @code{sometype *foo} is translated in Modula-2 as
@code{foo: ARRAY OF sometype}.

Normally output for @code{h2def} will require some manual
intervention. Some header files need more help than others, for
example the GNU/Linux svga header file @code{vga.h} requires a little
help whereas the GNU pthread file @code{pthread.h} requires more.
Nevertheless the effort required is considerably less than writing the
modules by hand.

The @samp{-e} option will emit an error message if a C syntax error is
encountered. The @samp{-p} option generate a comment for every
occurance of an object which cannot be translated into Modula-2.
