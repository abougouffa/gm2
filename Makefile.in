# Makefile for GNU Modula-2 compiler.
#   Copyright (C) 1987, 1988, 1990, 1991, 1992, 1993, 1994, 1998,
#   1999 Free Software Foundation, Inc.

# This file is part of GNU Modula-2.

# GNU Modula-2 is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.

# GNU Modula-2 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with GNU CC; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.  */

# The makefile built from this file lives in the language subdirectory.
# It's purpose is to provide support for:
#
# 1) recursion where necessary, and only then (building .o's), and
# 2) building and debugging cc1 from the language subdirectory, and
# 3) nothing else.
#
# The parent makefile handles all other chores, with help from the
# language makefile fragment, of course.
#
# The targets for external use are:
# all, TAGS, ???mostlyclean, ???clean.

# Suppress smart makes who think they know how to automake Yacc files
.y.c:

# Variables that exist for you to override.
# See below for how to change them for certain systems.

QUIAT=@

# Various ways of specifying flags for compilations:  
# CFLAGS is for the user to override to, e.g., do a bootstrap with -O2.
# BOOT_CFLAGS is the value of CFLAGS to pass
# to the stage2 and stage3 compilations
# XCFLAGS is used for most compilations but not when using the GCC just built.
XCFLAGS =
CFLAGS = -g
BOOT_CFLAGS = -O $(CFLAGS)
# These exists to be overridden by the x-* and t-* files, respectively.
X_CFLAGS =
T_CFLAGS =

X_CPPFLAGS =
T_CPPFLAGS =

CC = @CC@
AR = ar
AR_FLAGS = rc
SHELL = /bin/sh
MAKEINFO = makeinfo
TEXI2DVI = texi2dvi
LN_S=ln -s
P2C=m2/comp/bin/p2c -c p2crc
PRE=m2/comp/bin/mkfor
M2LINK=m2/comp/bin/mklink
GM2-VERSION=0.1
GM2_FLAGS=-Wbounds -Wreturn -g -Wrecovery

# Define this as & to perform parallel make on a Sequent.
# Note that this has some bugs, and it seems currently necessary 
# to compile all the gen* files first by hand to avoid erroneous results.
P =

# This is used instead of ALL_CFLAGS when compiling with GCC_FOR_TARGET.
# It omits XCFLAGS, and specifies -B./.
# It also specifies -B$(tooldir)/ to find as and ld for a cross compiler.
GCC_CFLAGS=$(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(CFLAGS) $(XCFLAGS) \
	-DHAVE_CONFIG_H


# Tools to use when building a cross-compiler.
# These are used because `configure' appends `cross-make'
# to the makefile when making a cross-compiler.

# CYGNUS LOCAL: We don't use cross-make.  Instead we use the tools
# from the build tree, if they are available.
# program_transform_name and objdir are set by configure.in.
program_transform_name =
objdir = .

target=@target@
xmake_file=@dep_host_xmake_file@
tmake_file=@dep_tmake_file@
#version=`sed -e 's/.*\"\([^ \"]*\)[ \"].*/\1/' < $(srcdir)/version.c`
#mainversion=`sed -e 's/.*\"\([0-9]*\.[0-9]*\).*/\1/' < $(srcdir)/version.c`

# Directory where sources are, from where we are.
srcdir = @srcdir@
VPATH = @srcdir@

# CYGNUS LOCAL
# Directory where texinfo.tex lives
# texidir = $(srcdir)/../../texinfo

# Top build directory, relative to here.
top_builddir = ..

# Internationalization library.
INTLLIBS = @INTLLIBS@

# Additional system libraries to link with.
CLIB=

# Choose the real default target.
ALL=all

# End of variables for you to override.

# Definition of `all' is here so that new rules inserted by sed
# do not specify the default target.
all: all.indirect

# This tells GNU Make version 3 not to put all variables in the environment.
.NOEXPORT:

# sed inserts variable overrides after the following line.
####target overrides
@target_overrides@
####host overrides
@host_overrides@
####cross overrides
@cross_defines@
@cross_overrides@
####build overrides
@build_overrides@
####site overrides
# @site_overrides@
#
# Now figure out from those variables how to compile and link.

all.indirect: Makefile ../cc1gm2$(exeext) gm2support

# IN_GCC tells obstack.h that we are using gcc's <stddef.h> file.
INTERNAL_CFLAGS = $(CROSS) -DIN_GCC @extra_c_flags@

# This is the variable actually used when we compile.
ALL_CFLAGS = $(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(CFLAGS) $(XCFLAGS) -W -Wall -DGM2

# Likewise.
ALL_CPPFLAGS = $(CPPFLAGS) $(X_CPPFLAGS) $(T_CPPFLAGS)

# This is where we get libiberty.a from.
LIBIBERTY = ../../libiberty/libiberty.a

# How to link with both our special library facilities
# and the system's installed libraries.
LIBS = $(LIBIBERTY) $(CLIB) $(INTLLIBS)
LIBDEPS = $(INTLLIBS) $(LIBIBERTY)

# Specify the directories to be searched for header files.
# Both . and srcdir are used, in that order,
# so that tm.h and config.h will be found in the compilation
# subdirectory rather than in the source directory.
INCLUDES = -I. -I.. -I$(srcdir) -I$(srcdir)/.. -I$(srcdir)/../config -I$(srcdir)/../../include

# Always use -I$(srcdir)/config when compiling.
.c.o:
	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<

# The only suffixes we want for implicit rules are .c and .o.
.SUFFIXES:
.SUFFIXES: .c .o

# This tells GNU make version 3 not to export all the variables
# defined in this file into the environment.
.NOEXPORT:

# Lists of files for various purposes.

# Language-specific object files for the gm2 compiler.

# rationale:
#
# here are the two identical compiler front ends. The reason for two is that it is easier to debug the compiler
# in the original Modula-2 source rather than the p2c translated C.

GM2_OBJS          = gccgm2.o                                         # the C implementation module bridging the Modula-2 -> GCC
GM2_LIBS          = gm2-compiler/gm2.a gm2-libs/libgm2.a             # the final Modula-2 front end
GM2_LIBS_BOOT     = gm2-compiler-boot/gm2.a gm2-libs-boot/libgm2.a \
                    m2/comp/p2c/home/libp2c.a                        # the translated Modula-2 -> C front end
GM2_LIBS_PARANOID = gm2-compiler-paranoid/gm2.a \
                    gm2-libs-paranoid/libgm2.a                       # build it again using GM2_LIBS

# Remove patched files from language-independent object file list.

BACKEND = ../toplev.o ../libbackend.a

compiler: ../cc1gm2$(exeext) gm2support

paranoid: ../bcc1gm2$(exeext) verifyparanoid

../bcc1gm2$(exeext): ../cc1gm2$(exeext) checkLinks $(P) $(GM2_OBJS) $(BACKEND) $(LIBDEPS) $(GM2_LIBS_PARANOID)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(GM2_OBJS) $(GM2_LIBS_PARANOID) $(BACKEND) $(LIBS)

../cc1gm2$(exeext): ../acc1gm2$(exeext) checkLinks $(P) $(GM2_OBJS) $(BACKEND) $(LIBDEPS) $(GM2_LIBS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(GM2_OBJS) $(GM2_LIBS) $(BACKEND) $(LIBS)

../acc1gm2$(exeext): checkLinks $(P) $(GM2_OBJS) $(BACKEND) $(LIBDEPS) $(GM2_LIBS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(GM2_OBJS) $(GM2_LIBS_BOOT) $(BACKEND) $(LIBS)

Makefile: $(srcdir)/Makefile.in $(srcdir)/../configure
	cd ..; $(SHELL) config.status

native: config.status ../cc1gm2$(exeext)

# Compiling object files from source files.

# Note that dependencies on obstack.h are not written
# because that file is not part of GCC.

RTL_H = $(srcdir)/../rtl.h $(srcdir)/../rtl.def \
	$(srcdir)/../machmode.h $(srcdir)/../machmode.def
TREE_H = $(srcdir)/../tree.h $(srcdir)/../real.h $(srcdir)/../tree.def \
	$(srcdir)/../machmode.h $(srcdir)/../machmode.def
FLAGS_H = $(srcdir)/../flags.h
INPUT_H = $(srcdir)/../input.h
CONVERT_H = $(srcdir)/../convert.h

gccgm2.o : gccgm2.c $(CONFIG_H) $(TREE_H) $(RTL_H) $(srcdir)/../flags.h

toplev.o : $(srcdir)/../toplev.c $(CONFIG_H) $(TREE_H) $(RTL_H) \
           $(FLAGS_H) $(INPUT_H) ../insn-attr.h $(srcdir)/../xcoffout.h \
           $(srcdir)/../defaults.h $(srcdir)/../output.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \
	  $(MAYBE_TARGET_DEFAULT) $(MAYBE_USE_COLLECT2) \
	  -DTARGET_NAME=\"$(target_alias)\" \
	  -c `echo $(srcdir)/../toplev.c | sed 's,^\./,,'`

c-convert.o : $(srcdir)/../c-convert.c $(CONFIG_H) $(TREE_H) $(RTL_H) \
              $(FLAGS_H) $(INPUT_H) ../insn-attr.h $(srcdir)/../xcoffout.h \
              $(srcdir)/../defaults.h $(srcdir)/../output.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \
	  $(MAYBE_TARGET_DEFAULT) $(MAYBE_USE_COLLECT2) \
	  -DTARGET_NAME=\"$(target_alias)\" \
	  -c `echo $(srcdir)/../c-convert.c | sed 's,^\./,,'`

gccgm2: m2/comp/bin/p2c $(PRE) $(M2LINK) force
	rm -f m2/config.h ; cd m2 ; ln -s config.h.gcc config.h
	( cd m2/comp ; M2PWD="`pwd`" ; export M2PWD ; echo $$M2PWD ; \
          $(MAKE) "QUIAT=$(QUIAT)" \
               "PUSH=LEFTTORIGHT" \
               "DEBUG=-g" \
               "BINDIR=$$M2PWD/bin" \
               "BINDIR1=$$M2PWD/bin1" \
               "INCFILE=$$M2PWD/tools/incfile" \
               "MAKEVERSION=$$M2PWD/tools/makeversion" \
               "MAKECONFIGURE=$$M2PWD/tools/makeconfigure" \
               "STAGEFILE=$$M2PWD/.stage" \
               "MAJORFILE=$$M2PWD/.major" \
               "MINORFILE=$$M2PWD/.minor" \
               "ARCHIVEFILE=$$M2PWD/.archive" \
               "AR=ar" \
               "COPY=cp" \
               "LN=ln -s" \
               "MV=mv" \
               "P2C=$$M2PWD/bin/p2c" \
               "P2CDIR=$$M2PWD/p2c/home" \
               "PRE=$$M2PWD/bin/mkfor" \
               "M2LINK=$$M2PWD/bin/mklink" \
               stage1.gcc )

gm2tools: force
	( cd m2/comp ; M2PWD="`pwd`" ; export M2PWD ; echo $$M2PWD ; \
          $(MAKE) "QUIAT=$(QUIAT)" \
               "PUSH=LEFTTORIGHT" \
               "DEBUG=-g" \
               "BINDIR=$$M2PWD/bin" \
               "BINDIR1=$$M2PWD/bin1" \
               "INCFILE=$$M2PWD/tools/incfile" \
               "MAKEVERSION=$$M2PWD/tools/makeversion" \
               "MAKECONFIGURE=$$M2PWD/tools/makeconfigure" \
               "STAGEFILE=$$M2PWD/.stage" \
               "MAJORFILE=$$M2PWD/.major" \
               "MINORFILE=$$M2PWD/.minor" \
               "ARCHIVEFILE=$$M2PWD/.archive" \
               "AR=ar" \
               "COPY=cp" \
               "LN=ln -s" \
               "MV=mv" \
               "P2C=$$M2PWD/bin/p2c" \
               "P2CDIR=$$M2PWD/p2c/home" \
               "PRE=$$M2PWD/bin/mkfor" \
               "M2LINK=$$M2PWD/bin/mklink" \
               "CFLAGS=-g" \
               stage1.gcctools )


#
# checkLinks builds a source tree of symbolic links from the modules in the m2/comp
#            directory. Not all the modules in m2/comp are needed, some were for
#            x86 etc which are irrelevant to gm2.
#

checkLinks: m2/comp/bin/p2c gm2-libs-boot gm2-compiler-boot gm2-libs gm2-compiler

#
#  the following tables define the source files which are translated into C using p2c
#  and defines the handbuilt C files which p2c cannot translate (due to abstract data types).
#

GM2-LIBS-BOOT-DEFS = ASCII.def       IO.def          Args.def        M2RTS.def       \
                     Assertion.def   NumberIO.def    Break.def       SYSTEM.def      \
                     CmdArgs.def     Scan.def        DebugPMD.def    StrCase.def     \
                     FIO.def         StrIO.def       StrLib.def      TimeString.def  \
                     UnixArgs.def    wrapc.def       Math.def        Environment.def \
                     FpuIO.def       Debug.def       SysStorage.def

GM2-LIBS-BOOT-MODS = ASCII.mod       IO.mod          Args.mod        Assertion.mod   \
                     NumberIO.mod    Break.mod       CmdArgs.mod     Scan.mod        \
                     DebugPMD.mod    StrCase.mod     FIO.mod         StrIO.mod       \
                     TimeString.mod  Math.mod        Environment.mod FpuIO.mod       \
                     Debug.mod       SysStorage.mod

GM2-LIBS-BOOT-C    = wrapc.c         libc.c          UnixArgs.c      StdIO.c         \
                     M2RTS.c         StrLib.c        Selective.c     MemUtils.c      \
                     Storage.c

GM2-LIBS-BOOT-H    = libc.h          StdIO.h         MemUtils.h      Storage.h

GM2-COMP-BOOT-DEFS = FifoQueue.def   M2Debug.def     M2Optimize.def  P1Expression.def\
                     P3Statement.def M2Defaults.def  M2Options.def   P1Statement.def \
                     P3SymBuild.def  M2ALU.def       M2Depth.def     M2Pass.def      \
                     P1SymBuild.def  P3Type.def      M2AsmUtil.def   M2EvalSym.def   \
                     M2Quads.def     P1Type.def      PHCompile.def   M2Atom.def      \
                     M2FileName.def  M2Reference.def P2Compile.def   M2Base.def      \
                     M2Reserved.def  P2Expression.def SymbolKey.def  M2BasicBlock.def\
                     M2Search.def    P2Statement.def M2Batch.def     M2System.def    \
                     P2SymBuild.def  M2Code.def      M2Inline.def    P2Type.def      \
                     M2Comp.def      M2Lex.def       NameKey.def     P3Compile.def   \
                     M2Lexical.def   P1Compile.def   P3Expression.def M2Version.def  \
                     M2Error.def     M2Math.def      M2SubExp.def    M2Constants.def \
                     M2Students.def  M2Entity.def    M2GenGCC.def    M2GCCDeclare.def\
                     SymbolConversion.def M2Configure.def SymbolTable.def Lists.def  \
                     P1SyntaxCheck.def P2Build.def   P3Build.def     PHBuild.def

GM2-COMP-BOOT-MODS = FifoQueue.mod   M2Inline.mod    M2Lex.mod       M2Lexical.mod   \
                     M2AsmUtil.mod   gm2.mod         M2Atom.mod      M2Optimize.mod  \
                     M2Options.mod   M2Pass.mod      M2Batch.mod     M2Quads.mod     \
                     M2Reference.mod M2Comp.mod      M2Reserved.mod  M2Configure.mod \
                     M2Debug.mod     M2Defaults.mod  M2Depth.mod     NameKey.mod     \
                     P1Compile.mod   M2FileName.mod  P1Expression.mod                \
                     P1Statement.mod P1SymBuild.mod  P1Type.mod      P2Compile.mod   \
                     P2Expression.mod P2Statement.mod P2SymBuild.mod P2Type.mod      \
                     P3Compile.mod   P3Expression.mod P3Statement.mod P3SymBuild.mod \
                     PHCompile.mod   SymbolKey.mod   SymbolTable.mod gm2l.mod        \
                     gm2lcc.mod      gm2lgen.mod     gm2lsub.mod                     \
                     M2Error.mod     M2Math.mod      M2SubExp.mod    M2Constants.mod \
                     M2Students.mod  M2Entity.mod    M2BasicBlock.mod M2Code.mod     \
                     M2GenGCC.mod    M2GCCDeclare.mod SymbolConversion.mod           \
                     M2ALU.mod       M2System.mod    M2Base.mod      Lists.mod

GM2-COMP-BOOT-C    = M2Search.c      P1SyntaxCheck.c P3Type.c P2Build.c         \
                     P3Build.c PHBuild.c
GM2-COMP-BOOT-H    = 

#
#  the following tables define the source files used to build gm2 using only Modula-2
#  sources (except for interfacing to libc and gcc).
#
#  It is these files which are the source to ../cc1gm2$(exeext) at the end of stage1
#

GM2-LIBS-DEFS      = ASCII.def       IO.def          Args.def        M2RTS.def       \
                     Assertion.def   NumberIO.def    Break.def       SYSTEM.def      \
                     CmdArgs.def     Scan.def        DebugPMD.def    StrCase.def     \
                     FIO.def         StrIO.def       StrLib.def      TimeString.def  \
                     UnixArgs.def    wrapc.def       Math.def        Environment.def \
                     FpuIO.def       Debug.def       SysStorage.def  MATH.def        \
                     Storage.def     StdIO.def       MemUtils.def    libc.def        \
                     PushBackInput.def

GM2-LIBS-MODS      = ASCII.mod       IO.mod          Args.mod        M2RTS.mod       \
                     Assertion.mod   NumberIO.mod    Break.mod       SYSTEM.mod      \
                     CmdArgs.mod     Scan.mod        DebugPMD.mod    StrCase.mod     \
                     FIO.mod         StrIO.mod       StrLib.mod      TimeString.mod  \
                                                     Math.mod        Environment.mod \
                     FpuIO.mod       Debug.mod       SysStorage.mod  MATH.mod        \
                     Storage.mod     StdIO.mod       MemUtils.mod    PushBackInput.mod

GM2-LIBS-C         = wrapc.c         libc.c          UnixArgs.c      Selective.c
GM2-LIBS-H         = libc.h

GM2-COMP-DEFS      = FifoQueue.def   M2Debug.def     M2Optimize.def  P1Expression.def\
                     P3Statement.def M2Defaults.def  M2Options.def   P1Statement.def \
                     P3SymBuild.def  M2ALU.def       M2Depth.def     M2Pass.def      \
                     P1SymBuild.def  P3Type.def      M2AsmUtil.def   M2EvalSym.def   \
                     M2Quads.def     P1Type.def      PHCompile.def   M2Atom.def      \
                     M2FileName.def  M2Reference.def P2Compile.def   M2Base.def      \
                     M2Reserved.def  P2Expression.def SymbolKey.def  M2BasicBlock.def\
                     M2Search.def    P2Statement.def M2Batch.def     M2System.def    \
                     P2SymBuild.def  M2Code.def      M2Inline.def    P2Type.def      \
                     M2Comp.def      M2Lex.def       NameKey.def     P3Compile.def   \
                     M2Lexical.def   P1Compile.def   P3Expression.def M2Version.def  \
                     M2Error.def     M2Math.def      M2SubExp.def    M2Constants.def \
                     M2Students.def  M2Entity.def    M2GenGCC.def    M2GCCDeclare.def\
                     SymbolConversion.def M2Configure.def SymbolTable.def Lists.def  \
                     P1SyntaxCheck.def bnflex.def    P2Build.def     P3Build.def     \
                     PHBuild.def

GM2-COMP-MODS      = FifoQueue.mod   M2Inline.mod    M2Lex.mod       M2Lexical.mod   \
                     M2AsmUtil.mod   gm2.mod         M2Atom.mod      M2Optimize.mod  \
                     M2Options.mod   M2Pass.mod      M2Batch.mod     M2Quads.mod     \
                     M2Reference.mod M2Comp.mod      M2Reserved.mod  M2Configure.mod \
                     M2Debug.mod     M2Defaults.mod  M2Depth.mod     NameKey.mod     \
                     P1Compile.mod   M2FileName.mod  P1Expression.mod                \
                     P1Statement.mod P1SymBuild.mod  P1Type.mod      P2Compile.mod   \
                     P2Expression.mod P2Statement.mod P2SymBuild.mod P2Type.mod      \
                     P3Compile.mod   P3Expression.mod P3Statement.mod P3SymBuild.mod \
                     PHCompile.mod   SymbolKey.mod   SymbolTable.mod gm2l.mod        \
                     gm2lcc.mod      gm2lgen.mod     gm2lsub.mod     m2m.mod         \
                     M2Error.mod     M2Math.mod      M2SubExp.mod    M2Constants.mod \
                     M2Students.mod  M2Entity.mod    M2BasicBlock.mod M2Code.mod     \
                     M2GenGCC.mod    M2GCCDeclare.mod SymbolConversion.mod           \
                     M2ALU.mod       M2System.mod    M2Base.mod      Lists.mod       \
                     M2Search.mod    P3Type.mod      P1SyntaxCheck.mod bnflex.mod    \
                     ppg.mod         P2Build.mod     P3Build.mod     PHBuild.mod

GM2-TOOLS-MOD      = gm2l.mod        gm2lcc.mod      gm2lgen.mod     gm2lsub.mod     \
                     m2m.mod         ppg.mod

# add ppg.mod when gm2 can compile it

gm2-libs-boot:
	$(QUIAT)mkdir gm2-libs-boot ; cd gm2-libs-boot ; \
	for i in $(GM2-LIBS-BOOT-DEFS) $(GM2-LIBS-BOOT-MODS) ; do \
	   $(LN_S) ../m2/comp/libs/$$i $$i ; \
	done ; \
	for i in $(GM2-LIBS-BOOT-C) $(GM2-LIBS-BOOT-H) ; do \
	   $(LN_S) ../m2/comp/libs/CH/$$i $$i ; \
	done ; \
	$(RM) SYSTEM.def ; \
	$(LN_S) ../m2/comp/libs/STAGE1/SYSTEM.def SYSTEM.def ; \
	for i in libc.def StdIO.def MemUtils.def Storage.def ; do \
           $(LN_S) ../m2/comp/libs/$$i $$i ; \
        done

gm2-libs-boot/%.o: gm2-libs-boot/%.c
	$(CC) -c -g -O2 -I. -Igm2-libs-boot -Wall $(INCLUDES) $< -o $@

gm2-libs-boot/%.o: gm2-libs-boot/%.mod
	$(PRE) gm2-libs-boot/$*
	$(P2C) -s gm2-libs-boot/$*.def gm2-libs-boot/$*.md -o gm2-libs-boot/$*.c
	if [ -f gm2-libs-boot/$*.H ] ; then \
          mv gm2-libs-boot/$*.H gm2-libs-boot/$*.h ; \
        fi
	$(RM) gm2-libs-boot/$*.md
	$(CC) -c $(CFLAGS) -I. -I.. -Igm2-libs-boot $(INCLUDES) gm2-libs-boot/$*.c -o $@

#
#  careful with p2c as it leaves the .h in the cwd and when we translate the .mod
#  it creates a garbage .h file.
#

gm2-libs-boot/%.h: gm2-libs-boot/%.def
	$(P2C) gm2-libs-boot/$*.def -o gm2-libs-boot/$*.H
	mv $*.h gm2-libs-boot/$*.h
	if [ -h gm2-libs-boot/$*.mod ] ; then \
           cp gm2-libs-boot/$*.h gm2-libs-boot/$*.H ; \
        fi

gm2-compiler-boot/%.o: gm2-compiler-boot/%.mod
	$(PRE) gm2-compiler-boot/$*
	$(P2C) -s gm2-compiler-boot/$*.def gm2-compiler-boot/$*.md -o gm2-compiler-boot/$*.c
	if [ -f gm2-compiler-boot/$*.H ] ; then \
          mv gm2-compiler-boot/$*.H gm2-compiler-boot/$*.h ; \
        fi
	$(RM) gm2-compiler-boot/$*.md
	$(CC) -c $(CFLAGS) -I. -I.. -Igm2-libs-boot -Igm2-compiler-boot $(INCLUDES) gm2-compiler-boot/$*.c -o $@

gm2-compiler-boot/%.o: gm2-compiler-boot/%.c
	$(CC) -c -g -O2 -I./ -Igm2-libs-boot -Wall $(INCLUDES) $< -o $@

#
#  careful with p2c as it leaves the .h in the cwd and when we translate the .mod
#  it creates a garbage .h file.
#

gm2-compiler-boot/%.h: gm2-compiler-boot/%.def
	$(P2C) gm2-compiler-boot/$*.def -o gm2-compiler-boot/$*.H
	mv $*.h gm2-compiler-boot/$*.h
	if [ -h gm2-compiler-boot/$*.mod -o -f gm2-compiler-boot/$*.mod ] ; then \
           cp gm2-compiler-boot/$*.h gm2-compiler-boot/$*.H ; \
        fi

#
#  now for the rules which build objects in the gm2-compiler gm2-libs directories
#
gm2-libs/%.o: gm2-libs/%.c
	$(CC) -c -g -I./ -Igm2-libs -Wall $(INCLUDES) $< -o $@

gm2-libs/%.o: gm2-libs/%.mod
	../xgm2 $(GM2_FLAGS) -c -B../a -Igm2-compiler -Igm2-libs $< -o $@

gm2-compiler/%.o: gm2-compiler/%.mod
	../xgm2 $(GM2_FLAGS) -g -c -B../a -Igm2-compiler -Igm2-libs $< -o $@


#
#  we build the cc1gm2$(exeext) from the boot stage and then proceed to build it again using
#  itself. (Not really stage1/stage2 as gcc knows it - as we're attempting to bootstrap
#  from p2c into gm2. The sooner we can debug Modula-2 source from gdb the better :-)
#  So we need the objects to be built from *.mod (not *.c)
#

gm2-boot: $(GM2_LIBS_BOOT) gm2support-boot
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o ../acc1gm2$(exeext) $(GM2_OBJS) $(GM2_LIBS_BOOT) $(BACKEND) $(LIBS)

gm2-libs/libgm2.a: gm2-boot force
	$(MAKE) build-libs
	$(AR) cr $@ $(GM2-LIBS-MODS:%.mod=gm2-libs/%.o) \
                    $(GM2-LIBS-C:%.c=gm2-libs/%.o)

gm2-compiler/gm2.a: gm2-boot force
	$(MAKE) build-compiler
	$(M2LINK) -s -exit -main gccgm2front gm2-gccinit
	mv mod_init.c gm2-compiler
	$(CC) -c -g gm2-compiler/mod_init.c -o gm2-compiler/mod_init.o
	$(AR) cr $@ gm2-compiler/mod_init.o $(GM2-COMP-MODS:%.mod=gm2-compiler/%.o) \
                    gm2-compiler/M2Version.o

gm2-libs-boot/libgm2.a: m2/comp/bin/p2c m2/comp/bin/mkfor force
	$(MAKE) build-libs-boot
	$(AR) cr $@ $(GM2-LIBS-BOOT-MODS:%.mod=gm2-libs-boot/%.o) \
                    $(GM2-LIBS-BOOT-C:%.c=gm2-libs-boot/%.o)

gm2-compiler-boot/gm2.a: m2/comp/bin/p2c m2/comp/bin/mkfor gm2-libs-boot/libgm2.a force
	$(MAKE) "CFLAGS=$(CFLAGS) -Igm2-libs-boot" build-compiler-boot
	$(M2LINK) -s -exit -main gccgm2front gm2-gccinit
	mv mod_init.c gm2-compiler-boot
	$(CC) -c -g gm2-compiler-boot/mod_init.c -o gm2-compiler-boot/mod_init.o
	$(AR) cr $@ gm2-compiler-boot/mod_init.o \
                    $(GM2-COMP-BOOT-MODS:%.mod=gm2-compiler-boot/%.o) \
                    $(GM2-COMP-BOOT-C:%.c=gm2-compiler-boot/%.o) \
                    gm2-compiler-boot/M2Version.o

build-libs-boot: $(GM2-LIBS-BOOT-DEFS:%.def=gm2-libs-boot/%.h) \
                 $(GM2-LIBS-BOOT-MODS:%.mod=gm2-libs-boot/%.o) \
                 $(GM2-LIBS-BOOT-C:%.c=gm2-libs-boot/%.o)

build-compiler-boot: $(GM2-COMP-BOOT-DEFS:%.def=gm2-compiler-boot/%.h) \
                     $(GM2-COMP-BOOT-MODS:%.mod=gm2-compiler-boot/%.o) \
                     $(GM2-COMP-BOOT-C:%.c=gm2-compiler-boot/%.o) \
	             gm2-compiler-boot/M2Version.o

gm2-compiler-boot:
	$(QUIAT)mkdir gm2-compiler-boot ; cd gm2-compiler-boot ; \
	for i in $(GM2-COMP-BOOT-DEFS) $(GM2-COMP-BOOT-MODS) ; do \
           if [ -h "$$i" ] ; then \
              echo "$$i already present" ; \
              exit 1 ; \
           fi ; \
           if [ -f ../m2/comp/gm2s/gcc/$$i ] ; then \
              $(LN_S) ../m2/comp/gm2s/gcc/$$i $$i ; \
           else \
              if [ -f ../m2/comp/gm2s/$$i ] ; then \
                 $(LN_S) ../m2/comp/gm2s/$$i $$i ; \
              else \
                 if [ -f ../$$i ] ; then \
                    $(LN_S) ../$$i $$i ; \
                 else \
                    echo "module $$i cannot be found in either ../m2/comp/gm2s or ../m2/comp/gm2s/gcc or ../" ; \
                    exit 1 ; \
                 fi ; \
              fi ; \
           fi ; \
	done ; \
	for i in $(GM2-COMP-BOOT-C) $(GM2-COMP-BOOT-H) ; do \
	   $(LN_S) ../m2/comp/gm2s/CH/$$i $$i ; \
	done ; \
        $(LN_S) ../gccgm2.def . ; \
        $(LN_S) ../m2/comp/gm2s/Lists.def . ; \
	../m2/comp/tools/makeversion $(GM2-VERSION)a
	$(MAKE) gm2-compiler-boot/gccgm2.h

gm2-compiler-boot/gm2.a: m2/comp/bin/p2c m2/comp/bin/mkfor

m2/comp/p2c/home/libp2c.a:
	( cd m2/comp ; M2PWD="`pwd`" ; export M2PWD ; echo $$M2PWD ; \
          $(MAKE) "QUIAT=$(QUIAT)" "BINDIR=$$M2PWD/bin" COPY="cp" stage0 )

m2/comp/bin/p2c:
	( cd m2/comp ; M2PWD="`pwd`" ; export M2PWD ; echo $$M2PWD ; \
          $(MAKE) "QUIAT=$(QUIAT)" "BINDIR=$$M2PWD/bin" COPY="cp" stage0 )

m2/comp/bin/mkfor:
	( cd m2/comp ; M2PWD="`pwd`" ; export M2PWD ; echo $$M2PWD ; \
          $(MAKE) "QUIAT=$(QUIAT)"       \
                  "BINDIR=$$M2PWD/bin"   \
                  "BINDIR1=$$M2PWD/bin1" \
                  "BINDIR2=$$M2PWD/bin2" \
                  "BINDIR3=$$M2PWD/bin3" \
                  "BINDIR4=$$M2PWD/bin4" \
                  COPY="cp" tools )

$(M2LINK):
	( cd m2/comp ; M2PWD="`pwd`" ; export M2PWD ; echo $$M2PWD ; \
          $(MAKE) "QUIAT=$(QUIAT)"       \
                  "BINDIR=$$M2PWD/bin"   \
                  "BINDIR1=$$M2PWD/bin1" \
                  "BINDIR2=$$M2PWD/bin2" \
                  "BINDIR3=$$M2PWD/bin3" \
                  "BINDIR4=$$M2PWD/bin4" \
                  COPY="cp" tools )

build-libs: gm2-libs $(GM2-LIBS-MODS:%.mod=gm2-libs/%.o) \
            $(GM2-LIBS-C:%.c=gm2-libs/%.o)

build-compiler: gm2-compiler $(GM2-COMP-MODS:%.mod=gm2-compiler/%.o) \
                gm2-compiler/M2Version.o

gm2-libs:
	$(QUIAT)mkdir gm2-libs ; cd gm2-libs ; \
	for i in $(GM2-LIBS-DEFS) $(GM2-LIBS-MODS) ; do \
	   $(LN_S) ../m2/comp/libs/$$i $$i ; \
	done ; \
	for i in $(GM2-LIBS-C) $(GM2-LIBS-H) ; do \
	   $(LN_S) ../m2/comp/libs/CH/$$i $$i ; \
	done ; \
	$(RM) SYSTEM.def ; \
	$(LN_S) ../m2/comp/libs/STAGE2/SYSTEM.def SYSTEM.def

gm2-compiler:
	$(QUIAT)mkdir gm2-compiler ; cd gm2-compiler ; \
	for i in $(GM2-COMP-DEFS) $(GM2-COMP-MODS) ; do \
           if [ -h "$$i" ] ; then \
              echo "$$i already present" ; \
              exit 1 ; \
           fi ; \
           if [ -f ../m2/comp/gm2s/gcc/$$i ] ; then \
              $(LN_S) ../m2/comp/gm2s/gcc/$$i $$i ; \
           else \
              if [ -f ../m2/comp/gm2s/$$i ] ; then \
                 $(LN_S) ../m2/comp/gm2s/$$i $$i ; \
              else \
                 if [ -f ../$$i ] ; then \
                    $(LN_S) ../$$i $$i ; \
                 else \
                    echo "module $$i cannot be found in either ../m2/comp/gm2s or ../m2/comp/gm2s/gcc or ../" ; \
                    exit 1 ; \
                 fi ; \
              fi ; \
           fi ; \
	done ; \
        $(LN_S) ../gccgm2.def . ; \
	../m2/comp/tools/makeversion $(GM2-VERSION)b

#
#  now for the rules which build objects in the gm2-compiler-paranoid gm2-libs-paranoid directories
#

gm2-libs-paranoid/%.o: gm2-libs-paranoid/%.c
	$(CC) -c -g -O2 -I./ -Igm2-libs -Wall $(INCLUDES) $< -o $@

gm2-libs-paranoid/%.o: gm2-libs-paranoid/%.mod
	../xgm2 $(GM2_FLAGS) -c -B../ -Igm2-compiler-paranoid -Igm2-libs-paranoid $< -o $@

gm2-compiler-paranoid/%.o: gm2-compiler-paranoid/%.mod
	../xgm2 $(GM2_FLAGS) -c -B../ -Igm2-compiler-paranoid -Igm2-libs-paranoid $< -o $@


#
#  now for rules which build the paranoid version of gm2
#

gm2-libs-paranoid/libgm2.a: force
	$(MAKE) build-libs-paranoid
	$(AR) cr $@ $(GM2-LIBS-MODS:%.mod=gm2-libs/%.o) \
                    $(GM2-LIBS-C:%.c=gm2-libs/%.o)

gm2-compiler-paranoid/gm2.a: gm2-libs-paranoid/libgm2.a force
	$(MAKE) build-compiler-paranoid
	$(M2LINK) -s -exit -main gccgm2front gm2-gccinit
	mv mod_init.c gm2-compiler-paranoid
	$(CC) -c -g gm2-compiler-paranoid/mod_init.c -o gm2-compiler-paranoid/mod_init.o
	$(AR) cr $@ gm2-compiler-paranoid/mod_init.o $(GM2-COMP-MODS:%.mod=gm2-compiler-paranoid/%.o) \
                    gm2-compiler-paranoid/M2Version.o

build-libs-paranoid: gm2-libs-paranoid
	$(MAKE) $(GM2-LIBS-MODS:%.mod=gm2-libs-paranoid/%.o) \
                $(GM2-LIBS-C:%.c=gm2-libs-paranoid/%.o)

build-compiler-paranoid: gm2-compiler-paranoid
	$(MAKE) $(GM2-COMP-MODS:%.mod=gm2-compiler-paranoid/%.o) \
                gm2-compiler-paranoid/M2Version.o

gm2-libs-paranoid:
	$(QUIAT)mkdir gm2-libs-paranoid ; cd gm2-libs-paranoid ; \
	for i in $(GM2-LIBS-DEFS) $(GM2-LIBS-MODS) ; do \
	   $(LN_S) ../m2/comp/libs/$$i $$i ; \
	done ; \
	for i in $(GM2-LIBS-C) $(GM2-LIBS-H) ; do \
	   $(LN_S) ../m2/comp/libs/CH/$$i $$i ; \
	done ; \
	$(RM) SYSTEM.def ; \
	$(LN_S) ../m2/comp/libs/STAGE2/SYSTEM.def SYSTEM.def

gm2-compiler-paranoid:
	$(QUIAT)mkdir gm2-compiler-paranoid ; cd gm2-compiler-paranoid ; \
	for i in $(GM2-COMP-DEFS) $(GM2-COMP-MODS) ; do \
           if [ -h "$$i" ] ; then \
              echo "$$i already present" ; \
              exit 1 ; \
           fi ; \
           if [ -f ../m2/comp/gm2s/gcc/$$i ] ; then \
              $(LN_S) ../m2/comp/gm2s/gcc/$$i $$i ; \
           else \
              if [ -f ../m2/comp/gm2s/$$i ] ; then \
                 $(LN_S) ../m2/comp/gm2s/$$i $$i ; \
              else \
                 if [ -f ../$$i ] ; then \
                    $(LN_S) ../$$i $$i ; \
                 else \
                    echo "module $$i cannot be found in either ../m2/comp/gm2s or ../m2/comp/gm2s/gcc or ../" ; \
                    exit 1 ; \
                 fi ; \
              fi ; \
           fi ; \
	done ; \
        $(LN_S) ../gccgm2.def . ; \
	../m2/comp/tools/makeversion $(GM2-VERSION)c

#
#  and now the linkage tools and general Modula-2 tools
#

gm2support-boot: gm2lcc gm2l gm2lgen gm2lsub

gm2support: $(GM2-TOOLS-MOD:%.mod=gm2-compiler/%.o) \
            $(GM2-TOOLS-MOD:%.mod=%.exe)
	@if [ -x m2m ] ; then \
            mv m2m gm2m ; \
         fi

%.exe:
	grep -v mod_init m2/comp/gm2s/$(basename $@)init > $(basename $@).lst
	../xgm2 -v -Igm2-libs -Igm2-compiler -g -B./a -B../ -o $(basename $@) -Wuselist gm2-compiler/$(basename $@).mod

gm2lcc: m2/comp/p2c/home/libp2c.a force
	$(M2LINK) -s m2/comp/gm2s/$@init
	$(CC) $(CFLAGS) -c mod_init.c -o mod_init.o
	M2PATH=". gm2-libs-boot gm2-compiler-boot" ; export M2PATH ; \
	$(M2LINK) -l -p2c m2/comp/p2c/home/libp2c.a m2/comp/gm2s/$@init
	$(SHELL) linkcommand
	mv a.out a$@

gm2l: m2/comp/p2c/home/libp2c.a force
	$(M2LINK) -s m2/comp/gm2s/$@init
	$(CC) $(CFLAGS) -c mod_init.c -o mod_init.o
	M2PATH=". gm2-libs-boot gm2-compiler-boot" ; export M2PATH ; \
	$(M2LINK) -l -p2c m2/comp/p2c/home/libp2c.a m2/comp/gm2s/$@init
	$(SHELL) linkcommand
	mv a.out a$@

gm2lgen: m2/comp/p2c/home/libp2c.a force
	$(M2LINK) -s m2/comp/gm2s/$@init
	$(CC) $(CFLAGS) -c mod_init.c -o mod_init.o
	M2PATH=". gm2-libs-boot gm2-compiler-boot" ; export M2PATH ; \
	$(M2LINK) -l -p2c m2/comp/p2c/home/libp2c.a m2/comp/gm2s/$@init
	$(SHELL) linkcommand
	mv a.out a$@

gm2lsub: m2/comp/p2c/home/libp2c.a force
	$(M2LINK) -s m2/comp/gm2s/$@init
	$(CC) $(CFLAGS) -c mod_init.c -o mod_init.o
	M2PATH=". gm2-libs-boot gm2-compiler-boot" ; export M2PATH ; \
	$(M2LINK) -l -p2c m2/comp/p2c/home/libp2c.a m2/comp/gm2s/$@init
	$(SHELL) linkcommand
	mv a.out a$@

#
# verifyparanoid - diffs the output of all three compilers with the compiler source code
#
verifyparanoid: ../acc1gm2$(exeext) ../bcc1gm2$(exeext) ../cc1gm2$(exeext) gm2-compiler-verify force
	@echo "verifying the three generations of GNU Modula-2 compilers - it may take some time.."
	$(QUIAT)cd gm2-compiler-verify ; \
        for i in *.mod ; do \
           echo -n "$$i" ; \
           ../../xgm2 -S -Wbounds -Wreturn -g -c -B../../a -I. $$i -o 1.s ; \
           ../../xgm2 -S -Wbounds -Wreturn -g -c -B../../  -I. $$i -o 2.s ; \
           ../../xgm2 -S -Wbounds -Wreturn -g -c -B../../b -I. $$i -o 3.s ; \
           if ! diff 1.s 2.s >& 1_2.diff ; then \
               echo -n " [stage 1 and stage 2 differ]" ; \
               cp 1.s t.s | as -ahl t.s > $$i.1.lst ; \
               cp 2.s t.s | as -ahl t.s > $$i.2.lst ; \
               echo " " ; \
               exit 1 ; \
           fi ; \
           if ! diff 2.s 3.s >& 2_3.diff ; then \
               echo -n " [stage 2 and stage 3 differ]" ; \
               cp 2.s t.s | as -ahl t.s > $$i.2.lst ; \
               cp 3.s t.s | as -ahl t.s > $$i.3.lst ; \
           fi ; \
           echo " " ; \
        done ; \
	$(RM) -f 1.s 2.s 3.s 2_3.diff 1_2.diff

#
# verifycompiler - diffs the output of the last two compilers using the compiler source code
#                  as the test.
#
verifycompiler: ../bcc1gm2$(exeext) ../cc1gm2$(exeext) gm2-compiler-verify force
	@echo "verifying the last two generations of GNU Modula-2 compilers.."
	$(QUIAT)cd gm2-compiler-verify ; \
        for i in *.mod ; do \
           echo -n "$$i" ; \
           ../../xgm2 -S -Wbounds -Wreturn -c -B../../b -I. $$i -o 1.s ; \
           ../../xgm2 -S -Wbounds -Wreturn -c -B../../  -I. $$i -o 2.s ; \
           if ! diff 1.s 2.s >& 1_2.diff ; then \
               echo -n " [stage 2 and stage 3 differ]" ; \
               cp 1.s t.s | as -ahl t.s > $$i.1.lst ; \
               cp 2.s t.s | as -ahl t.s > $$i.2.lst ; \
               echo " " ; \
           fi ; \
           echo " " ; \
        done ; \
	$(RM) -f 1.s 2.s 3.s 1_2.diff


#
#  keep all the links in a single directory as we are not building a compiler
#  also we omit M2Options.mod as this has the __DATE__ which will cause a diff
#  failure
#	
gm2-compiler-verify:
	$(QUIAT)mkdir gm2-compiler-verify ; cd gm2-compiler-verify ; \
	for i in $(GM2-LIBS-DEFS) $(GM2-LIBS-MODS) ; do \
	   $(LN_S) ../m2/comp/libs/$$i $$i ; \
	done ; \
	for i in $(GM2-LIBS-C) $(GM2-LIBS-H) ; do \
	   $(LN_S) ../m2/comp/libs/CH/$$i $$i ; \
	done ; \
	$(RM) SYSTEM.def ; \
	$(LN_S) ../m2/comp/libs/STAGE2/SYSTEM.def SYSTEM.def ; \
	for i in $(GM2-COMP-DEFS) $(GM2-COMP-MODS) ; do \
           if [ -h "$$i" ] ; then \
              echo "$$i already present" ; \
              exit 1 ; \
           fi ; \
           if [ -f ../m2/comp/gm2s/gcc/$$i ] ; then \
              $(LN_S) ../m2/comp/gm2s/gcc/$$i $$i ; \
           else \
              if [ -f ../m2/comp/gm2s/$$i ] ; then \
                 $(LN_S) ../m2/comp/gm2s/$$i $$i ; \
              else \
                 if [ -f ../$$i ] ; then \
                    $(LN_S) ../$$i $$i ; \
                 else \
                    echo "module $$i cannot be found in either ../m2/comp/gm2s or ../m2/comp/gm2s/gcc or ../" ; \
                    exit 1 ; \
                 fi ; \
              fi ; \
           fi ; \
	done ; \
	../m2/comp/tools/makeversion $(GM2-VERSION)c ; \
	$(RM) -f M2Options.mod ; \
        $(LN_S) ../gccgm2.def .

clean: force
	$(RM) -f *.o *.html *.ps *.dvi *.log *.aux *.info *.ps *.aux *~
	$(RM) -f gm2l gm2lcc gm2lgen gm2lsub linkcommand mod_init.c
	$(RM) -f xgm2l xgm2lgen xgm2lsub xgm2lcc
	( cd m2/comp/p2c ; $(MAKE) "QUIAT=$(QUIAT)" clean )
	$(RM) -rf gm2-libs-boot gm2-compiler-boot gm2-libs gm2-compiler
	$(RM) -rf gm2-libs-paranoid  gm2-compiler-paranoid
	$(RM) -rf gm2-compiler-verify
	$(RM) -f *.lst $(basename $(GM2-TOOLS-MOD)) gm2m
	$(RM) -rf m2/comp/bin m2/comp/bin[1234] m2/comp/p2c/home
	$(RM) -f m2/comp/man/m2f.cat
	$(RM) -f m2/comp/tools/mkfor m2/comp/tools/mklink
	$(RM) -f ../cc1gm2$(exeext) ../acc1gm2$(exeext) ../bcc1gm2$(exeext)
	$(RM) -f agm2l agm2lcc agm2lgen agm2lsub

distclean: force
	-rm -f m2/comp/autotest/run/fail/Makefile m2/comp/autotest/dynamic/Makefile
	-rm -f m2/comp/tools/Makefile m2/comp/autotest/warnings/Makefile
	-rm -f m2/comp/Makefile m2/comp/p2c/examples/Makefile
	-rm -f m2/Makefile m2/comp/autotest/fpu/Makefile m2/comp/bnf/Makefile
	-rm -f m2/comp/autotest/Makefile m2/comp/man/Makefile
	-rm -f m2/comp/p2c/src/Makefile m2/comp/autotest/run/Makefile
	-rm -f m2/comp/autotest/types/Makefile m2/comp/test/Makefile
	-rm -f m2/comp/autotest/run/pass/Makefile m2/comp/autotest/cse/Makefile
	-rm -f Makefile m2/comp/autotest/errors/Makefile m2/comp/p2c/Makefile

force:
