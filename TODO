
What has been done:

(i)   the sources to m2f and gcc compile and link to produce cc1gm2.
      The front end works and compiles all legal Modula-2 into
      intemediate code.
(ii)  the back end will generate code and assembly declarations for
      modules containing global variables of all types. Procedure
      prologue/epilogue is created, but no procedures can be called yet!
(iii) simple expressions are pretty complete.
(iv)  all loop constructs, if then else, case stuff has been done.
(v)   nested module initialization
(vi)  pointers

Nearly all the to do work is concerned with interfacing m2f with
gcc and most of this work is localized in the following files:

  gm2/gm2.c
  gm2/gccgm2.def
  gm2/m2/comp/gm2s/gcc/M2GenGCC.mod
  gm2/m2/comp/gm2s/gcc/M2GCCDeclare.mod

What needs to be done:
  
(i)    - procedure calls
       - identifier declaration is wrong
         (it treats temporaries as real variables).
(ii)   block becomes
(iii)  error recovery needs to be implemented,
       during pass 1 (first and follow sets etc). One of those
       to do's which was never done..
(iv)   unbounded arrays
(v)    inbuilt functions, SIZE, ADR, TSIZE, HIGH etc
(vi)   making the front end non 32 bit dependant
       (gm2/m2/comp/gm2s/M2Base.mod should utilize gcc base types)
(vii)  front end needs to be able to link modules.
       (An easy way is for gcc to kick off the linking programs
       that m2f utilized  - see gm2/m2/comp/gm2s/m2f.mod)
(viii) integrate the small testsuite (gm2/m2/comp/autotest)
       into dejagnu ?? and improve
(ix)   probably many others as well.
       (Coroutines - as mentioned by readers of comp.lang.modula2)
(x)    placing any gcc changes into the gcc cvs source

