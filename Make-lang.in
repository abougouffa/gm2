# Top level -*- makefile -*- fragment for GNU GM2.
#   Copyright (C) 1994, 1995, 1997, 1998, 1999, 2000, 2001
#   Free Software Foundation, Inc.

#This file is part of GNU CC.

#GNU CC is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2, or (at your option)
#any later version.

#GNU CC is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with GNU CC; see the file COPYING.  If not, write to
#the Free Software Foundation, 59 Temple Place - Suite 330,
#Boston, MA 02111-1307, USA.

# This file provides the language dependent support in the main Makefile.
# Each language makefile fragment must provide the following targets:
#
# foo.all.build, foo.all.cross, foo.start.encap, foo.rest.encap,
# foo.info, foo.dvi,
# foo.install-normal, foo.install-common, foo.install-info, foo.install-man,
# foo.uninstall,
# foo.mostlyclean, foo.clean, foo.distclean, foo.extraclean,
# foo.maintainer-clean, foo.stage1, foo.stage2, foo.stage3, foo.stage4
#
# where `foo' is the name of the language.
#
# It should also provide rules for:
#
# - making any compiler driver (eg: gm2)
# - the compiler proper (eg: cc1gm2)
# - define the names for selecting the language in LANGUAGES.

QUIAT=@
GM2_MAKE_DEBUG=

# Actual names to use when installing a native compiler.
GM2_INSTALL_NAME = `echo gm2|sed '$(program_transform_name)'`

# Actual names to use when installing a cross-compiler.
GM2_CROSS_NAME = `echo gm2|sed '$(program_transform_cross_name)'`

GM2 = xgm2

# Define the name of target independent tools to be installed in $(bindir)
# Names are subject to changes

GM2_TARGET_INDEPENDENT_BIN_TOOLS = stage1/gm2/gm2m$(exeext) stage1/gm2/h2def$(exeext)

GM2_LINK_TOOLS = gm2lcc$(exeext) gm2l$(exeext) gm2lgen$(exeext) gm2lsub$(exeext)

GM2_LINK_TOOLS_BOOT = stage1/gm2/gm2lcc$(exeext) stage1/gm2/gm2l$(exeext) \
                      stage1/gm2/gm2lgen$(exeext) stage1/gm2/gm2lsub$(exeext)

GCC_TOOLS_FOR_GM2 = \
            $(GCC_PASSES) $(GCC_PARTS) \
            stage1/gm2/gcc$(exeext) stage1/gm2/cc1$(exeext) \
            stage1/gm2/cpp$(exeext)

# Define the names for selecting GNU Modula-2 in LANGUAGES.
gm2 m2 modula-2 modula2: $(GM2)$(exeext) xgcc$(exeex) cc1gm2$(exeext) \
                 $(GCC_TOOLS_FOR_GM2) $(GM2_LINK_TOOLS) \
                 $(GM2_TARGET_INDEPENDENT_BIN_TOOLS) \
                 build-libs build-libs-iso

.PHONY: gm2 m2 modula-2 modula2 GM2 M2 Modula-2 Modula2 MODULA-2 MODULA2

gm2spec.o: $(srcdir)/gm2/gm2spec.c $(SYSTEM_H) $(GCC_H) $(CONFIG_H)
	(SHLIB_LINK='$(SHLIB_LINK)' \
	SHLIB_MULTILIB='$(SHLIB_MULTILIB)'; \
	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(DRIVER_DEFINES) \
		-DLIBSUBDIR=\"$(libsubdir)\" \
		$(INCLUDES) $(srcdir)/gm2/gm2spec.c $(OUTPUT_OPTION))

# Create the compiler driver for $(GM2).
$(GM2)$(exeext): gcc.o gm2spec.o version.o \
	   prefix.o intl.o $(LIBDEPS) $(EXTRA_GCC_OBJS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ gcc.o gm2spec.o prefix.o intl.o \
	  version.o $(EXTRA_GCC_OBJS) $(LIBS)

# Create a version of the $(GM2) driver which calls the cross-compiler.
$(GM2)-cross$(exeext): $(GM2)$(exeext)
	-rm -f $(GM2)-cross$(exeext)
	cp $(GM2)$(exeext) $(GM2)-cross$(exeext)

po-generated:

#
# directories for the public definition, implementation and object libraries
#
GM2_LIB_DIR_PIM= $(libsubdir)/gm2/pim
GM2_LIB_DIR_ISO= $(libsubdir)/gm2/iso
GM2_DIRS       = $(objdir)/gm2/gm2-compiler-boot $(objdir)/gm2/gm2-libs-boot \
                 $(objdir)/gm2/gm2-libiberty $(objdir)/gm2/gm2-auto \
                 $(objdir)/gm2/gm2-compiler $(objdir)/gm2/gm2-libs \
                 $(objdir)/gm2/gm2-libs-iso \
                 $(objdir)/gm2/gm2-compiler-paranoid $(objdir)/gm2/gm2-libs-paranoid \
                 $(objdir)/gm2/gm2-compiler-verify \
                 stage1/gm2 stage2/gm2 stage3/gm2 stage4/gm2

check_cross: stage1/gm2 force
	for i in x $(INTERNAL_CFLAGS) ; do \
            echo $$i ; \
            if [ "$$i" == "-DCROSS_COMPILE" ] ; then \
                echo "cross compiling Modula-2, we skip stage1, and build using the native Modula-2" ; \
                cp -pr /usr/local/lib/gcc-lib/i686-pc-linux-gnu/3.2/* stage1/gm2 ; \
            fi \
        done

gt-gm2-gm2-lang.h gtype-gm2.h gt-gm2-gccgm2.h : s-gtype; @true

# Build hooks:

gm2.all.build: $(GM2)$(exeext)
gm2.all.cross: $(GM2)-cross$(exeext) stage1/gm2/cc1gm2$(exeext) \
	$(GM2_LINK_TOOLS_BOOT) stage1/gm2/gm2m$(exeext)

gm2.start.encap: $(GM2)$(exeext)
gm2.rest.encap:
gm2.info: $(srcdir)/gm2/gm2.info
gm2.generated-manpages:

gm2.dvi: $(srcdir)/gm2/images/gnu.eps $(srcdir)/gm2/gm2.texi \
         $(srcdir)/gm2/gm2-libs.texi
	$(TEXI2DVI) -I $(srcdir)/gm2 $(srcdir)/gm2/gm2.texi

gm2.ps: gm2.dvi
	dvips -o gm2.ps gm2.dvi

gm2.pdf: gm2.ps
	gs -q -dBATCH -dNOPAUSE -sDEVICE=pdfwrite -sOutputFile=$@ $<

$(srcdir)/gm2/gm2.info: $(srcdir)/gm2/images/gnu.eps \
         $(srcdir)/gm2/gm2.texi $(srcdir)/gm2/gm2-libs.texi
	$(MAKEINFO) -I$(srcdir)/gm2 -o $(srcdir)/gm2/gm2.info $(srcdir)/gm2/gm2.texi

$(srcdir)/gm2/images/gnu.eps: $(srcdir)/gm2/images/gnupng
	pngtopnm $< | pnmtops -noturn > $@

$(srcdir)/gm2/gm2-libs.texi:
	cd $(srcdir)/gm2 ; ./tools-src/def2texi.py > gm2-libs.texi

$(objdir)/gm2/gm2-compiler-boot:
	mkdir $@

$(objdir)/gm2/gm2-libs-boot:
	mkdir $@

$(objdir)/gm2/gm2-libiberty:
	mkdir $@

$(objdir)/gm2/gm2-auto:
	mkdir $@

$(objdir)/gm2/gm2-compiler:
	mkdir $@

$(objdir)/gm2/gm2-libs:
	mkdir $@

$(objdir)/gm2/gm2-libs-iso:
	mkdir $@

$(objdir)/gm2/gm2-compiler-paranoid:
	mkdir $@

$(objdir)/gm2/gm2-libs-paranoid:
	mkdir $@

$(objdir)/gm2/gm2-compiler-verify:
	mkdir $@

stage1/gm2:
	-mkdir -p stage1/gm2

stage2/gm2:
	-mkdir -p stage2/gm2

stage3/gm2:
	-mkdir -p stage3/gm2

stage4/gm2:
	-mkdir -p stage4/gm2

# Install hooks:
# cc1gm2 is installed elsewhere as part of $(COMPILERS).
# $(COMPILERS) is defined in `config-lang.in'

$(GM2_LIB_DIR_PIM):
	-mkdir -p $(GM2_LIB_DIR_PIM)

$(GM2_LIB_DIR_ISO):
	-mkdir -p $(GM2_LIB_DIR_ISO)

gm2.install-normal:
gm2.install-common: installdirs $(GM2_LIB_DIR_PIM) $(GM2_LIB_DIR_ISO)
	-if [ -f $(GM2)$(exeext) ]; then \
	  if [ -f $(GM2)-cross$(exeext) ]; then \
	    rm -f $(DESTDIR)/$(bindir)/$(GM2_CROSS_NAME)$(exeext); \
	    $(INSTALL_PROGRAM) $(GM2)-cross$(exeext) $(DESTDIR)/$(bindir)/$(GM2_CROSS_NAME)$(exeext); \
	    chmod a+x $(DESTDIR)/$(bindir)/$(GM2_CROSS_NAME)$(exeext); \
            for tool in stage1/gm2/cc1gm2$(exeext) \
                        $(GM2_LINK_TOOLS_BOOT) stage1/gm2/gm2m$(exeext) ; do \
              toolbase=`basename $$tool` ; \
              tool_transformed_name=`echo $$toolbase|sed '$(program_transform_name)'`; \
              if [ -f $$tool$(exeext) ]; then \
                rm -f $(DESTDIR)/$(bindir)/$$tool_transformed_name$(exeext); \
                $(INSTALL_PROGRAM) $$tool$(exeext) $(DESTDIR)/$(bindir)/$$tool_transformed_name$(exeext); \
                chmod a+x $(DESTDIR)/$(bindir)/$$tool_transformed_name$(exeext); \
              fi ; \
            done ; \
	  else \
	    rm -f $(DESTDIR)/$(bindir)/$(GM2_INSTALL_NAME)$(exeext); \
	    $(INSTALL_PROGRAM) $(GM2)$(exeext) $(DESTDIR)/$(bindir)/$(GM2_INSTALL_NAME)$(exeext); \
	    chmod a+x $(DESTDIR)/$(bindir)/$(GM2_INSTALL_NAME)$(exeext); \
	  fi ; \
	fi ; \
        for tool in $(GM2_TARGET_INDEPENDENT_BIN_TOOLS); do \
          toolbase=`basename $$tool` ; \
          tool_transformed_name=`echo $$toolbase|sed '$(program_transform_name)'`; \
          if [ -f $$tool$(exeext) ]; then \
            rm -f $(DESTDIR)/$(bindir)/$$tool_transformed_name$(exeext); \
            $(INSTALL_PROGRAM) $$tool$(exeext) $(DESTDIR)/$(bindir)/$$tool_transformed_name$(exeext); \
            chmod a+x $(DESTDIR)/$(bindir)/$$tool_transformed_name$(exeext); \
          fi ; \
        done ; \
	for i in $(srcdir)/gm2/gm2-libs/*.def $(srcdir)/gm2/gm2-libs/*.mod ; do \
           if [ ! -d $$i ] ; then \
              rm -f $(DESTDIR)/$(GM2_LIB_DIR_PIM)/$$i ; \
              $(INSTALL_PROGRAM) $$i $(DESTDIR)/$(GM2_LIB_DIR_PIM) ; \
           fi ; \
        done
	for i in x gm2/gm2-libs/*.o ; do \
           rm -f $(DESTDIR)/$(GM2_LIB_DIR_PIM)/$$i ; \
           if [ -f $$i ] ; then \
              if [ ! -d $$i ] ; then \
                 $(INSTALL_PROGRAM) $$i $(DESTDIR)/$(GM2_LIB_DIR_PIM) ; \
              fi ; \
           fi ; \
        done ; \
	for i in $(srcdir)/gm2/gm2-iso/*.def $(srcdir)/gm2/gm2-libs/*.mod ; do \
           if [ ! -d $$i ] ; then \
              rm -f $(DESTDIR)/$(GM2_LIB_DIR_ISO)/$$i ; \
              $(INSTALL_PROGRAM) $$i $(DESTDIR)/$(GM2_LIB_DIR_ISO) ; \
           fi ; \
        done
	for i in x gm2/gm2-iso/*.o ; do \
           rm -f $(DESTDIR)/$(GM2_LIB_DIR_ISO)/$$i ; \
           if [ -f $$i ] ; then \
              if [ ! -d $$i ] ; then \
                 $(INSTALL_PROGRAM) $$i $(DESTDIR)/$(GM2_LIB_DIR_ISO) ; \
              fi ; \
           fi ; \
        done

gm2.install-info: installdirs
	if [ -d gm2$(exeext) ] ; then \
	  if [ -f $(srcdir)/gm2/gm2.info ]; then \
	    rm -f $(DESTDIR)/$(infodir)/gm2.info*; \
	    for f in $(srcdir)/gm2/gm2.info*; do \
	      realfile=`echo $$f | sed -e 's|.*/\([^/]*\)$$|\1|'`; \
	      $(INSTALL_DATA) $$f $(DESTDIR)/$(infodir)/$$realfile; \
	    done; \
	    chmod a-x $(DESTDIR)/$(infodir)/gm2.info*; \
	  else true; fi; \
	else true; fi
	-if [ -f gm2$(exeext) ] && [ -f $(DESTDIR)/$(infodir)/gm2.info ]; then \
	  if $(SHELL) -c 'install-info --version' >/dev/null 2>&1; then \
	    install-info --dir-file=$(infodir)/dir $(DESTDIR)/$(infodir)/gm2.info; \
	  else true; fi; \
	else true; fi

gm2.install-man:

gm2.uninstall:
	-rm -rf $(bindir)/$(GM2_INSTALL_NAME)
	-rm -rf $(bindir)/$(GM2_CROSS_NAME)
	-rm -f $(bindir)/gm2m$(exeext)

# Clean hooks:
# A lot of the ancillary files are deleted by the main makefile.
# We just have to delete files specific to us.

gm2.mostlyclean:
	-rm -f gm2/*.o
	-rm -f gm2.aux gm2.html gm2.dvi gm2.ps gm2.info gm2.log

gm2.clean:
	-rm -f gm2/*.o
	-rm -f gm2.aux gm2.html gm2.dvi gm2.ps gm2.info gm2.log
	-rm -fr gm2/stage?
	-rm gm2/include
	-rm -f gm2/*.o gm2/*.html gm2/*.ps gm2/*.dvi gm2/*.log gm2/*.aux gm2/*.info gm2/*.ps gm2/*.aux gm2/*~
	-rm -f gm2/linkcommand gm2/mod_init.c
	( cd gm2/p2c/p2c-src ; $(MAKE) "QUIAT=$(QUIAT)" clean )
	-rm -f gm2/gm2-libs-boot/*.[aoch] gm2/gm2-compiler-boot/*.[aoch] gm2/gm2-libs/*.[oa] gm2/gm2-compiler/*.[oa]
	-rm -f gm2/*/*~ gm2/*~
	-rm -f gm2/gm2-libs-paranoid/*  gm2/gm2-compiler-paranoid/* gm2/gm2-compiler-verify/*
	-rm -f gm2/gm2-compiler/mod_init.c
	-rm -f gm2/*.lst gm2/$(basename $(GM2-TOOLS-MOD)) gm2/gm2m
	-rm -f -r gm2/boot-bin gm2/p2c/p2c-src/home
	-rm -f gm2/boot-bin/mklink gm2/boot-bin/p2c
	-rm -f gm2/pg-e gm2/pge
	-rm -f gm2/gm2-auto/*.c gm2/gm2-auto/*~ gm2/gm2-auto/pginit
	-rm -f gm2/gm2-libiberty/*.h gm2/gm2-libiberty/*~
	-rm -f gm2/gm2-auto/pg.o
	-rm -f gm2/gm2.cp gm2/gm2.fn gm2/gm2.pg gm2/gm2.toc gm2/gm2.tp gm2/gm2.vr gm2/gm2.ky
	-rm -f gm2/gm2-compiler/M2Version.mod
	-rm -f gm2/gm2-auto/gm2l.mod gm2/gm2-auto/P1SyntaxCheck.mod
	-rm -f gm2/gm2-auto/P2Build.mod gm2/gm2-auto/P3Build.mod gm2/gm2-auto/PHBuild.mod

gm2.distclean:
	-rm -f gm2/m2/comp/autotest/run/fail/Makefile gm2/m2/comp/autotest/dynamic/Makefile
	-rm -f gm2/m2/comp/autotest/warnings/Makefile
	-rm -f gm2/m2/comp/Makefile gm2/m2/comp/p2c/examples/Makefile
	-rm -f gm2/m2/Makefile gm2/m2/comp/autotest/fpu/Makefile gm2/m2/comp/bnf/Makefile
	-rm -f gm2/m2/comp/autotest/Makefile gm2/m2/comp/man/Makefile
	-rm -f gm2/p2c/p2c-src/src/Makefile gm2/m2/comp/autotest/run/Makefile
	-rm -f gm2/m2/comp/autotest/types/Makefile gm2/m2/comp/test/Makefile
	-rm -f gm2/m2/comp/autotest/run/pass/Makefile gm2/m2/comp/autotest/cse/Makefile
	-rm -f gm2/Makefile gm2/m2/comp/autotest/errors/Makefile gm2/p2c/p2c-src/Makefile

gm2.extraclean:
gm2.realclean:

# Stage hooks:

gm2.stage1: stage1/gm2/cc1gm2$(exeext)
	-mv gm2/*$(objext) stage1/gm2

gm2.stage2: stage2/gm2/cc1gm2$(exeext)
	-mv gm2/*$(objext) stage2/gm2

gm2.stage3: stage3/gm2/cc1gm2$(exeext)
	-mv gm2/*$(objext) stage3/gm2

gm2.stage4: stage4/gm2/cc1gm2$(exeext)
	-mv gm2/*$(objext) stage4/gm2

quit: force
	echo "calling exit"
	exit 1

#
# Rules to build the compiler and tools
#

P2C=gm2/boot-bin/p2c -c $(srcdir)/gm2/p2crc \
 -I$(srcdir)/gm2/gm2-libs-boot/%s.def \
 -I$(srcdir)/gm2/gm2-libs/%s.def -I$(srcdir)/gm2/gm2-compiler/%s.def \
 -I$(srcdir)/gm2/gm2-libiberty/%s.def -M0 -q
M2LINK=gm2/boot-bin/mklink
GM2-VERSION=0.40
GM2_FLAGS=-Wbounds -Wreturn -gstabs

# Language-specific object files for the gm2 compiler.

# rationale:
#
# we build gm2 twice. The first time the Modula-2 sources are
# converted into C via p2c. The resulting compiler and utilities are
# placed into stage1/gm2 directories.  Then this stage1 compiler is
# used to build the stage2 compiler which will be installed on the
# host as part of `make install'.  Debugging the stage2 compiler is
# much prefered as the executable contains debugging info relating
# directly to the Modula-2 source.

GM2_OBJS          = gm2/gccgm2.o gm2/gm2builtins.o gm2/gm2-lang.o        # the C implementation module bridging the Modula-2 -> GCC
GM2_LIBS          = gm2/gm2-compiler/gm2.a gm2/gm2-libs/libgm2.a         # the final Modula-2 front end
GM2_LIBS_BOOT     = gm2/gm2-compiler-boot/gm2.a \
                    gm2/gm2-libs-boot/libgm2.a \
                    gm2/p2c/p2c-src/src/libp2c.a                    # the translated Modula-2 -> C front end
GM2_LIBS_PARANOID = gm2/gm2-compiler-paranoid/gm2.a \
                    gm2/gm2-libs-paranoid/libgm2.a                       # build it again using GM2_LIBS

# Remove patched files from language-independent object file list.

gm2.paranoid: stage3/gm2/cc1gm2$(exeext) gm2.verifyparanoid

# start here 1->2
# we need to ensure that the C compiler and headers are configured correctly
#
cc1gm2$(exeext): force
	if [ "$(host_canonical)" = "$(target)" ] ; then \
           $(MAKE) stage1_build stage2/gm2/$@ ; \
           cp stage2/gm2/$@ $@ ; \
        else \
           $(MAKE) stage1_build stage1/gm2/$@ ; \
           cp stage1/gm2/$@ $@ ; \
        fi

gm2lcc$(exeext): force
	if [ "$(host_canonical)" = "$(target)" ] ; then \
           $(MAKE) stage2/gm2/$@ ; \
           cp stage2/gm2/$@ $@ ; \
        else \
           $(MAKE) stage1/gm2/$@ ; \
           cp stage1/gm2/$@ $@ ; \
        fi

gm2l$(exeext): force
	if [ "$(host_canonical)" = "$(target)" ] ; then \
           $(MAKE) stage2/gm2/$@ ; \
           cp stage2/gm2/$@ $@ ; \
        else \
           $(MAKE) stage1/gm2/$@ ; \
           cp stage1/gm2/$@ $@ ; \
        fi

gm2lgen$(exeext): force
	if [ "$(host_canonical)" = "$(target)" ] ; then \
           $(MAKE) stage2/gm2/$@ ; \
           cp stage2/gm2/$@ $@ ; \
        else \
           $(MAKE) stage1/gm2/$@ ; \
           cp stage1/gm2/$@ $@ ; \
        fi

gm2lsub$(exeext): force
	if [ "$(host_canonical)" = "$(target)" ] ; then \
           $(MAKE) stage2/gm2/$@ ; \
           cp stage2/gm2/$@ $@ ; \
        else \
           $(MAKE) stage1/gm2/$@ ; \
           cp stage1/gm2/$@ $@ ; \
        fi

# end here

stage3/gm2/cc1gm2$(exeext): stage2/gm2/cc1gm2$(exeext) $(P) $(GM2_OBJS) $(BACKEND) $(LIBDEPS) $(GM2_LIBS_PARANOID) $(LIBS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(GM2_OBJS) $(GM2_LIBS_PARANOID) $(BACKEND) $(LIBS)

stage2/gm2/cc1gm2$(exeext): stage1/gm2/cc1gm2$(exeext) $(P) $(GM2_OBJS) $(BACKEND) $(LIBDEPS) $(GM2_LIBS) $(LIBS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(GM2_OBJS) $(GM2_LIBS) $(BACKEND) $(LIBS)

stage1/gm2/cc1gm2$(exeext): $(GM2)$(exeext) $(GM2_DIRS) $(P) $(GM2_OBJS) $(BACKEND) $(LIBDEPS) $(GM2_LIBS_BOOT) $(LIBS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(GM2_OBJS) $(GM2_LIBS_BOOT) $(BACKEND) $(LIBS)

# Compiling object files from source files.

gm2/gccgm2.o : $(srcdir)/gm2/gccgm2.c $(CONFIG_H) $(TREE_H) $(RTL_H) $(srcdir)/flags.h gtype-gm2.h gt-gm2-gccgm2.h
gm2/gm2builtins.o : $(srcdir)/gm2/gm2builtins.c $(CONFIG_H) $(TREE_H) $(RTL_H) $(srcdir)/flags.h
gm2/gm2-lang.o: $(srcdir)/gm2/gm2-lang.c $(CONFIG_H) gt-gm2-gm2-lang.h


#
#  the following tables define the source files which are translated into C using p2c
#  and defines the system interface C files.
#

GM2-LIBS-BOOT-DEFS = ASCII.def       IO.def          Args.def        M2RTS.def       \
                     Assertion.def   NumberIO.def    Break.def       SYSTEM.def      \
                     CmdArgs.def     Scan.def        DebugPMD.def    StrCase.def     \
                     FIO.def         StrIO.def       StrLib.def      TimeString.def  \
                     UnixArgs.def    wrapc.def                       Environment.def \
                     FpuIO.def       Debug.def       SysStorage.def  DynamicStrings.def \
                     SFIO.def        SArgs.def       StdIO.def       \
                     FormatStrings.def PushBackInput.def Storage.def SEnvironment.def\
                     StringConvert.def

GM2-LIBS-BOOT-MODS = ASCII.mod       IO.mod          Args.mod        Assertion.mod   \
                     NumberIO.mod    Break.mod       CmdArgs.mod     Scan.mod        \
                     DebugPMD.mod    StrCase.mod     FIO.mod         StrIO.mod       \
                     TimeString.mod  StrLib.mod                      Environment.mod \
                     FpuIO.mod       Debug.mod       SysStorage.mod  DynamicStrings.mod     \
                     SFIO.mod        M2RTS.mod       SArgs.mod                       \
                     FormatStrings.mod PushBackInput.mod SEnvironment.mod            \
                     StringConvert.mod

GM2-LIBS-BOOT-C    = wrapc.c         UnixArgs.c      StdIO.c         Storage.c       \
                     choosetemp.c

GM2-COMP-BOOT-DEFS = FifoQueue.def   M2Debug.def     M2Optimize.def  M2Defaults.def  \
                     M2Options.def   P3SymBuild.def  M2ALU.def       M2Depth.def     \
                     M2Pass.def      P1SymBuild.def  M2AsmUtil.def   M2EvalSym.def   \
                     M2Quads.def     M2FileName.def  M2Stack.def     \
                     M2Base.def      M2Reserved.def  SymbolKey.def   M2BasicBlock.def\
                     M2Search.def    M2Batch.def     M2System.def    P2SymBuild.def  \
                     M2Code.def      M2Comp.def      m2lex.def       NameKey.def     \
                     M2LexBuf.def    M2Version.def   M2Error.def     \
                     M2SubExp.def    M2Constants.def M2Students.def  M2Entity.def    \
                     M2GenGCC.def    M2GCCDeclare.def \
                     M2Configure.def SymbolTable.def Lists.def       SymbolConversion.def \
                     P1SyntaxCheck.def P2Build.def   P3Build.def     PHBuild.def     \
                     M2Printf.def    bnflex.def      M2Quiet.def     M2Preprocess.def \
                     clex.def        CLexBuf.def     M2Bitset.def    M2Size.def      \
                     M2Scope.def

GM2-COMP-BOOT-MODS = ppg.mod         \
                     FifoQueue.mod   M2LexBuf.mod                             \
                     M2AsmUtil.mod   gm2.mod         M2Optimize.mod  M2Stack.mod     \
                     M2Options.mod   M2Pass.mod      M2Batch.mod     M2Quads.mod     \
                     M2Comp.mod      M2Reserved.mod  M2Configure.mod \
                     M2Debug.mod     M2Defaults.mod  M2Depth.mod     NameKey.mod     \
                     M2FileName.mod  P1SymBuild.mod  P2SymBuild.mod  P3SymBuild.mod  \
                     SymbolKey.mod   SymbolTable.mod                 gm2lcc.mod      \
                     gm2lgen.mod     gm2lsub.mod     M2Error.mod     \
                     M2SubExp.mod    M2Constants.mod M2Students.mod  M2Entity.mod    \
                     M2BasicBlock.mod M2Code.mod     M2GenGCC.mod    M2GCCDeclare.mod \
                     SymbolConversion.mod            M2Base.mod      \
                     M2ALU.mod       M2System.mod    Lists.mod       \
                     M2Printf.mod    bnflex.mod      M2Quiet.mod     M2Search.mod    \
                     M2Preprocess.mod                CLexBuf.mod     M2Bitset.mod    \
                     M2Size.mod      M2Scope.mod

GM2-PPG-MODS      =  SymbolKey.mod   NameKey.mod     Lists.mod       bnflex.mod


#
#  the following tables define the source files used to build gm2 using only Modula-2
#  sources (except for interfacing to libc and gcc).
#
#  It is these files which are the source to cc1gm2$(exeext) at the end of stage1
#

GM2-LIBS-DEFS      = ASCII.def         IO.def          Args.def        M2RTS.def       \
                     Assertion.def     NumberIO.def    Break.def       SYSTEM.def      \
                     CmdArgs.def       Scan.def        DebugPMD.def    StrCase.def     \
                     FIO.def           StrIO.def       StrLib.def      TimeString.def  \
                     UnixArgs.def      wrapc.def                       Environment.def \
                     FpuIO.def         Debug.def       SysStorage.def  \
                     Storage.def       StdIO.def       libc.def        SEnvironment.def\
                     DynamicStrings.def                SFIO.def        SArgs.def \
                     PushBackInput.def StringConvert.def               FormatStrings.def \
                     Builtins.def      cbuiltin.def    MathLib0.def

GM2-LIBS-MODS      = ASCII.mod         IO.mod          Args.mod        M2RTS.mod       \
                     Assertion.mod     NumberIO.mod    Break.mod       SYSTEM.mod      \
                     CmdArgs.mod       Scan.mod        DebugPMD.mod    StrCase.mod     \
                     FIO.mod           StrIO.mod       StrLib.mod      TimeString.mod  \
                                                                       Environment.mod \
                     FpuIO.mod         Debug.mod       SysStorage.mod  \
                     Storage.mod       StdIO.mod                       SEnvironment.mod\
                     DynamicStrings.mod                SFIO.mod        SArgs.mod \
                     PushBackInput.mod StringConvert.mod               FormatStrings.mod \
                     Builtins.mod                      MathLib0.mod

GM2-LIBS-C         = wrapc.c           UnixArgs.c      Selective.c     choosetemp.c

GM2-COMP-DEFS      = FifoQueue.def     M2Debug.def     M2Optimize.def  M2Defaults.def  \
                     M2Options.def     P3SymBuild.def  M2ALU.def       M2Depth.def     \
                     M2Pass.def        P1SymBuild.def  M2AsmUtil.def   M2Quads.def     \
                     M2Stack.def       M2FileName.def  M2Base.def      M2Reserved.def  \
                     SymbolKey.def     M2BasicBlock.def M2Search.def   M2Batch.def     \
                     M2System.def      P2SymBuild.def  M2Code.def      M2Comp.def      \
                     NameKey.def       M2Version.def   M2Error.def     \
                     M2Constants.def   M2Students.def  M2Entity.def    M2GenGCC.def    \
                     M2GCCDeclare.def  M2Configure.def SymbolTable.def Lists.def       \
                     P1SyntaxCheck.def bnflex.def      P2Build.def     P3Build.def     \
                     PHBuild.def       M2SubExp.def    SymbolConversion.def \
                     M2Preprocess.def  M2Printf.def    M2LexBuf.def    M2Quiet.def     \
                     M2Bitset.def      M2Size.def      M2Scope.def

GM2-COMP-MODS      = FifoQueue.mod     M2AsmUtil.mod   gm2.mod         M2Optimize.mod  \
                     M2Stack.mod       M2Options.mod   M2Pass.mod      M2Batch.mod     \
                     M2Quads.mod       M2Comp.mod      M2Reserved.mod  M2Configure.mod \
                     M2Debug.mod       M2Defaults.mod  M2Depth.mod     NameKey.mod     \
                     M2FileName.mod    P1SymBuild.mod  P2SymBuild.mod  P3SymBuild.mod  \
                     SymbolKey.mod     SymbolTable.mod                 gm2lcc.mod      \
                     gm2lgen.mod       gm2lsub.mod                     M2Error.mod     \
                                       M2Constants.mod M2Students.mod  M2Entity.mod    \
                     M2BasicBlock.mod  M2Code.mod      M2GenGCC.mod    M2GCCDeclare.mod\
                     M2ALU.mod         M2System.mod    M2Base.mod      Lists.mod       \
                     M2Search.mod      bnflex.mod      ppg.mod         M2SubExp.mod    \
                     SymbolConversion.mod \
                     M2Preprocess.mod  M2Printf.mod    M2LexBuf.mod    M2Quiet.mod     \
                     M2Bitset.mod      M2Size.mod      M2Scope.mod

GM2-TOOLS-MOD      = gm2l.mod          gm2lcc.mod      gm2lgen.mod     gm2lsub.mod     \
                     gm2m.mod          ppg.mod

GM2-AUTO-MODS      = P2Build.mod       P3Build.mod     PHBuild.mod     P1SyntaxCheck.mod \
                     gm2l.mod          gm2m.mod

GM2-LIBIBERTY-DEFS = choosetemp.def    pexecute.def

#
# GM2-VERIFY-MODS is a list of modules which have no __DATE__ stamp inside them
#                 and thus they can be built by the different versions of gm2.
#                 This list is used for testing only.
#

GM2-VERIFY-MODS    = FifoQueue.mod     M2AsmUtil.mod   gm2.mod         M2Optimize.mod  \
                     M2Stack.mod                       M2Pass.mod      M2Batch.mod     \
                     M2Quads.mod       M2Comp.mod      M2Reserved.mod  M2Configure.mod \
                     M2Debug.mod       M2Defaults.mod  M2Depth.mod     NameKey.mod     \
                     M2FileName.mod    P1SymBuild.mod  P2SymBuild.mod  P3SymBuild.mod  \
                     SymbolKey.mod     SymbolTable.mod                 gm2lcc.mod      \
                     gm2lgen.mod       gm2lsub.mod                     M2Error.mod     \
                                       M2Constants.mod M2Students.mod  M2Entity.mod    \
                     M2BasicBlock.mod  M2Code.mod      M2GenGCC.mod    M2GCCDeclare.mod\
                     M2ALU.mod         M2System.mod    M2Base.mod      Lists.mod       \
                     M2Search.mod      bnflex.mod      ppg.mod         M2SubExp.mod    \
                     SymbolConversion.mod \
                     M2Preprocess.mod  M2Printf.mod    M2LexBuf.mod    M2Quiet.mod     \
                     M2Bitset.mod      M2Size.mod      CLexBuf.mod     M2Options.mod   \
                     M2Scope.mod

#
# the ISO implementation modules are still being written
#

GM2_LIBS_ISO_MODS  = ChanConsts.mod    CharClass.mod   ConvTypes.mod   LongMath.mod \
                     RealMath.mod      Storage.mod     TERMINATION.mod


P2C_INCLUDE_TRANSLATE=-I$(srcdir)/gm2 -Igm2 -I. -I$(srcdir)/../include -Igm2/gm2-libs-boot $(INCLUDES) 

gm2/gm2-libs-boot/%.o: gm2/gm2-libs-boot/%.c
	$(CC) -c -g -O2 -I$(srcdir)/gm2 -Igm2 -I. -Igm2/gm2-libs-boot -Wall $(INCLUDES) $< -o $@

gm2/gm2-libs-boot/%.o: $(srcdir)/gm2/gm2-libs-boot/%.mod
	$(P2C) -s $(srcdir)/gm2/gm2-libs-boot/$*.def $(srcdir)/gm2/gm2-libs-boot/$*.mod -o gm2/gm2-libs-boot/$*.c
	$(CC) -c $(CFLAGS) $(P2C_INCLUDE_TRANSLATE) gm2/gm2-libs-boot/$*.c -o $@

gm2/gm2-libs-boot/%.o: $(srcdir)/gm2/gm2-libs/%.mod
	$(P2C) -s $(srcdir)/gm2/gm2-libs/$*.def $(srcdir)/gm2/gm2-libs/$*.mod -o gm2/gm2-libs-boot/$*.c
	$(CC) -c $(CFLAGS) -I$(srcdir)/gm2 -Igm2 -I. -Igm2/gm2-libs-boot $(INCLUDES) gm2/gm2-libs-boot/$*.c -o $@

gm2/gm2-libs-boot/%.h: $(srcdir)/gm2/gm2-libs/%.def
	$(P2C) $(srcdir)/gm2/gm2-libs/$*.def -h gm2/gm2-libs-boot/$*.h

gm2/gm2-libs-boot/SYSTEM.o: $(srcdir)/gm2/gm2-libs/SYSTEM.mod
	$(P2C) -s $(srcdir)/gm2/gm2-libs-boot/SYSTEM.def $(srcdir)/gm2/gm2-libs/$*.mod -o gm2/gm2-libs-boot/$*.c
	$(CC) -c $(CFLAGS) -I$(srcdir)/gm2 -Igm2 -I. -Igm2/gm2-libs-boot $(INCLUDES) gm2/gm2-libs-boot/$*.c -o $@

gm2/gm2-libs-boot/SYSTEM.h: $(srcdir)/gm2/gm2-libs-boot/SYSTEM.def
	$(P2C) $(srcdir)/gm2/gm2-libs-boot/SYSTEM.def -h gm2/gm2-libs-boot/SYSTEM.h

gm2/gm2-libs-boot/wrapc.o: $(srcdir)/gm2/gm2-libs-ch/wrapc.c gm2/gm2-libs-boot/wrapc.h
	$(CC) -c $(CFLAGS) -I$(srcdir)/gm2 -Igm2 -I. -Igm2/gm2-libs-boot $(INCLUDES) $< -o $@

gm2/gm2-libs-boot/UnixArgs.o: $(srcdir)/gm2/gm2-libs-ch/UnixArgs.c gm2/gm2-libs-boot/UnixArgs.h
	$(CC) -c $(CFLAGS) -I$(srcdir)/gm2 -Igm2 -I. -Igm2/gm2-libs-boot $(INCLUDES) $< -o $@

gm2/gm2-libs-boot/StdIO.o: gm2/gm2-libs-ch/StdIO.c gm2/gm2-libs-boot/StdIO.h
	$(CC) -c $(CFLAGS) -I$(srcdir)/gm2 -Igm2 -I. -Igm2/gm2-libs-boot $(INCLUDES) $< -o $@

gm2/gm2-libs-boot/Storage.o: gm2/gm2-libs-ch/Storage.c gm2/gm2-libs-boot/Storage.h
	$(CC) -c $(CFLAGS) -I$(srcdir)/gm2 -Igm2 -I. -Igm2/gm2-libs-boot $(INCLUDES) $< -o $@

gm2/gm2-libs-boot/choosetemp.o: gm2/gm2-libs-ch/choosetemp.c gm2/gm2-libiberty/choosetemp.h
	$(CC) -c $(CFLAGS) -I$(srcdir)/gm2 -Igm2 -I. -Igm2/gm2-libs-boot -Igm2/gm2-libiberty $(INCLUDES) $< -o $@

gm2/gm2-compiler-boot/gm2.o: $(srcdir)/gm2/gm2-compiler/gm2.mod
	$(P2C) $(srcdir)/gm2/gm2-compiler/gm2.mod -o gm2/gm2-compiler-boot/gm2.c
	$(CC) -c $(CFLAGS) -I$(srcdir)/gm2 -Igm2 -I. -Igm2/gm2-libs-boot -Igm2/gm2-compiler-boot -Igm2/gm2-libiberty $(INCLUDES) gm2/gm2-compiler-boot/gm2.c -o $@

gm2/gm2-compiler-boot/ppg.o: $(srcdir)/gm2/gm2-compiler/ppg.mod
	$(P2C) $(srcdir)/gm2/gm2-compiler/ppg.mod -o gm2/gm2-compiler-boot/ppg.c
	$(CC) -c $(CFLAGS) -I$(srcdir)/gm2 -Igm2 -I. -Igm2/gm2-libs-boot -Igm2/gm2-compiler-boot -Igm2/gm2-libiberty $(INCLUDES) gm2/gm2-compiler-boot/ppg.c -o $@

gm2/gm2-compiler-boot/%.o: $(srcdir)/gm2/gm2-compiler/%.mod
	$(P2C) -s $(srcdir)/gm2/gm2-compiler/$*.def $(srcdir)/gm2/gm2-compiler/$*.mod -o gm2/gm2-compiler-boot/$*.c ; \
	$(CC) -c $(CFLAGS) -I$(srcdir)/gm2 -Igm2 -I. -Igm2/gm2-libs-boot -Igm2/gm2-compiler-boot -Igm2/gm2-libiberty $(INCLUDES) gm2/gm2-compiler-boot/$*.c -o $@

gm2/gm2-compiler-boot/%.o: gm2/gm2-compiler-boot/%.c
	$(CC) -c -g -O2 -I$(srcdir)/gm2 -Igm2 -I. -Igm2/gm2-libs-boot -Wall $(INCLUDES) $< -o $@

gm2/gm2-compiler-boot/P1SyntaxCheck.o: $(objdir)/gm2/gm2-auto/P1SyntaxCheck.mod
	$(P2C) -s $(srcdir)/gm2/gm2-compiler/P1SyntaxCheck.def gm2/gm2-auto/P1SyntaxCheck.mod -o gm2/gm2-auto/P1SyntaxCheck.c
	$(CC) -c $(CFLAGS) -I$(srcdir)/gm2 -Igm2 -I. -Igm2/gm2-libs-boot -Igm2/gm2-compiler-boot -Igm2/gm2-auto -I$(srcdir)/gm2/gm2-libiberty $(INCLUDES) gm2/gm2-auto/P1SyntaxCheck.c -o $@

gm2/gm2-compiler-boot/P2Build.o: $(objdir)/gm2/gm2-auto/P2Build.mod
	$(P2C) -s $(srcdir)/gm2/gm2-compiler/P2Build.def gm2/gm2-auto/P2Build.mod -o gm2/gm2-auto/P2Build.c
	$(CC) -c $(CFLAGS) -I$(srcdir)/gm2 -Igm2 -I. -Igm2/gm2-libs-boot -Igm2/gm2-compiler-boot -Igm2/gm2-auto -I$(srcdir)/gm2/gm2-libiberty $(INCLUDES) gm2/gm2-auto/P2Build.c -o $@

gm2/gm2-compiler-boot/P3Build.o: $(objdir)/gm2/gm2-auto/P3Build.mod
	$(P2C) -s $(srcdir)/gm2/gm2-compiler/P3Build.def gm2/gm2-auto/P3Build.mod -o gm2/gm2-auto/P3Build.c
	$(CC) -c $(CFLAGS) -I$(srcdir)/gm2 -Igm2 -I. -Igm2/gm2-libs-boot -Igm2/gm2-compiler-boot -Igm2/gm2-auto -I$(srcdir)/gm2/gm2-libiberty $(INCLUDES) gm2/gm2-auto/P3Build.c -o $@

gm2/gm2-compiler-boot/PHBuild.o: $(objdir)/gm2/gm2-auto/PHBuild.mod
	$(P2C) -s $(srcdir)/gm2/gm2-compiler/PHBuild.def gm2/gm2-auto/PHBuild.mod -o gm2/gm2-auto/PHBuild.c
	$(CC) -c $(CFLAGS) -I$(srcdir)/gm2 -Igm2 -I. -Igm2/gm2-libs-boot -Igm2/gm2-compiler-boot -Igm2/gm2-auto -I$(srcdir)/gm2/gm2-libiberty $(INCLUDES) gm2/gm2-auto/PHBuild.c -o $@

gm2/gm2-compiler-boot/gm2l.o: $(objdir)/gm2/gm2-auto/gm2l.mod
	$(P2C) gm2/gm2-auto/gm2l.mod -o gm2/gm2-auto/gm2l.c
	$(CC) -c $(CFLAGS) -I$(srcdir)/gm2 -Igm2 -I. -Igm2/gm2-libs-boot -Igm2/gm2-compiler-boot -Igm2/gm2-auto -I$(srcdir)/gm2/gm2-libiberty $(INCLUDES) gm2/gm2-auto/gm2l.c -o $@

gm2/gm2-compiler-boot/gm2m.o: $(objdir)/gm2/gm2-auto/gm2m.mod
	$(P2C) gm2/gm2-auto/gm2m.mod -o gm2/gm2-auto/gm2m.c
	$(CC) -c $(CFLAGS) -I$(srcdir)/gm2 -Igm2 -I. -Igm2/gm2-libs-boot -Igm2/gm2-compiler-boot -Igm2/gm2-auto -I$(srcdir)/gm2/gm2-libiberty $(INCLUDES) gm2/gm2-auto/gm2m.c -o $@

gm2/gm2-compiler-boot/h2def.o: $(objdir)/gm2/gm2-auto/h2def.mod gm2/gm2-compiler-boot/clex.h
	$(P2C) gm2/gm2-auto/h2def.mod -o gm2/gm2-auto/h2def.c
	$(CC) -c $(CFLAGS) -I$(srcdir)/gm2 -Igm2 -I. -Igm2/gm2-libs-boot -Igm2/gm2-compiler-boot -Igm2/gm2-auto -I$(srcdir)/gm2/gm2-libiberty $(INCLUDES) gm2/gm2-auto/h2def.c -o $@

gm2/gm2-compiler-boot/gm2lcc.o: $(srcdir)/gm2/gm2-compiler/gm2lcc.mod
	$(P2C) $(srcdir)/gm2/gm2-compiler/gm2lcc.mod -o gm2/gm2-compiler-boot/gm2lcc.c
	$(CC) -c $(CFLAGS) -I$(srcdir)/gm2 -Igm2 -I. -Igm2/gm2-libs-boot -Igm2/gm2-compiler-boot -Igm2/gm2-auto -I$(srcdir)/gm2/gm2-libiberty $(INCLUDES) gm2/gm2-compiler-boot/gm2lcc.c -o $@

gm2/gm2-compiler-boot/gm2lgen.o: $(srcdir)/gm2/gm2-compiler/gm2lgen.mod
	$(P2C) $(srcdir)/gm2/gm2-compiler/gm2lgen.mod -o gm2/gm2-compiler-boot/gm2lgen.c
	$(CC) -c $(CFLAGS) -I$(srcdir)/gm2 -Igm2 -I. -Igm2/gm2-libs-boot -Igm2/gm2-compiler-boot -Igm2/gm2-auto -I$(srcdir)/gm2/gm2-libiberty $(INCLUDES) gm2/gm2-compiler-boot/gm2lgen.c -o $@

gm2/gm2-compiler-boot/gm2lsub.o: $(srcdir)/gm2/gm2-compiler/gm2lsub.mod
	$(P2C) $(srcdir)/gm2/gm2-compiler/gm2lsub.mod -o gm2/gm2-compiler-boot/gm2lsub.c
	$(CC) -c $(CFLAGS) -I$(srcdir)/gm2 -Igm2 -I. -Igm2/gm2-libs-boot -Igm2/gm2-compiler-boot -Igm2/gm2-auto -I$(srcdir)/gm2/gm2-libiberty $(INCLUDES) gm2/gm2-compiler-boot/gm2lsub.c -o $@

gm2/gm2-compiler-boot/%.h: $(srcdir)/gm2/gm2-compiler/%.def
	$(P2C) $(srcdir)/gm2/gm2-compiler/$*.def -h gm2/gm2-compiler-boot/$*.h

gm2/gm2-compiler-boot/m2lex.o: gm2/gm2-compiler/m2lex.c
	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -I$(srcdir)/gm2 -Igm2 -Igm2/gm2-compiler-boot -Igm2/gm2-libs-boot $< -o $@

gm2/gm2-compiler-boot/clex.o: gm2/gm2-compiler/clex.c gm2/gm2-compiler-boot/CLexBuf.h
	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -I$(srcdir)/gm2 -Igm2 -Igm2/gm2-compiler-boot -Igm2/gm2-libs-boot $< -o $@

gm2/gm2-compiler/m2lex.c: $(srcdir)/gm2/m2.lex
	flex -t $< | sed -e 's/ malloc/xmalloc/' | sed -e 's/ realloc/xrealloc/' > $@

gm2/gm2-compiler/clex.c: $(srcdir)/gm2/c.lex
	flex -t $< | sed -e 's/ malloc/xmalloc/' | sed -e 's/ realloc/xrealloc/' > $@

gm2/gm2-libiberty/%.h: $(srcdir)/gm2/gm2-libiberty/%.def
	$(P2C) $(srcdir)/gm2/gm2-libiberty/$*.def -h gm2/gm2-libiberty/$*.h

gm2/gm2-compiler-boot/M2Version.o: gm2/gm2-compiler-boot/M2Version.mod
	$(P2C) -s $(srcdir)/gm2/gm2-compiler/M2Version.def $< -o gm2/gm2-compiler-boot/M2Version.c
	$(CC) -c $(CFLAGS) -I$(srcdir)/gm2 -Igm2 -I. -Igm2/gm2-libs-boot -Igm2/gm2-compiler-boot -Igm2/gm2-libiberty $(INCLUDES) gm2/gm2-compiler-boot/M2Version.c -o $@

gm2/gm2-compiler-boot/M2Version.mod:
	cd gm2/gm2-compiler-boot ; ../../$(srcdir)/gm2/tools-src/makeversion $(GM2-VERSION)a

#
#  now for the rules which build objects in the gm2-compiler gm2-libs directories
#
gm2/gm2-libs/wrapc.o: $(srcdir)/gm2/gm2-libs-ch/wrapc.c gm2/gm2-libs-boot/wrapc.h
	$(GCC_FOR_TARGET) -c $(CFLAGS) -I$(srcdir)/gm2 -Igm2 -Igm2/gm2-libs-boot $(INCLUDES) $< -o $@

gm2/gm2-libs/UnixArgs.o: $(srcdir)/gm2/gm2-libs-ch/UnixArgs.c gm2/gm2-libs-boot/UnixArgs.h
	$(GCC_FOR_TARGET) -c $(CFLAGS) -I$(srcdir)/gm2 -Igm2 -Igm2/gm2-libs-boot $(INCLUDES) $< -o $@

gm2/gm2-libs/Selective.o: $(srcdir)/gm2/gm2-libs-ch/Selective.c gm2/gm2-libs-boot/Selective.h
	$(GCC_FOR_TARGET) -c $(CFLAGS) -I$(srcdir)/gm2 -Igm2 -Igm2/gm2-libs-boot $(INCLUDES) $< -o $@

gm2/gm2-libs/choosetemp.o: $(srcdir)/gm2/gm2-libs-ch/choosetemp.c gm2/gm2-libiberty/choosetemp.h
	$(GCC_FOR_TARGET) -c $(CFLAGS) -I$(srcdir)/gm2 -Igm2 -Igm2/gm2-libs-boot -Igm2/gm2-libiberty $(INCLUDES) $< -o $@

gm2/gm2-libs/%.o: $(srcdir)/gm2/gm2-libs/%.c
	$(GCC_FOR_TARGET) -c -g -I$(srcdir)/gm2 -Igm2 -I$(srcdir)/gm2/gm2-libs -Wall $(INCLUDES) $< -o $@

gm2/gm2-libs/%.o: $(srcdir)/gm2/gm2-libs/%.mod
	./xgm2 $(GM2_FLAGS) -c -B./stage1/gm2 -I$(srcdir)/gm2/gm2-compiler -I$(srcdir)/gm2/gm2-libs $< -o $@

gm2/gm2-compiler/%.o: $(srcdir)/gm2/gm2-compiler/%.mod
	./xgm2 $(GM2_FLAGS) -g -c -B./stage1/gm2 -I$(srcdir)/gm2/gm2-compiler -I$(srcdir)/gm2/gm2-libs -I$(srcdir)/gm2/gm2-libiberty $< -o $@

gm2/gm2-compiler/m2lex.o: gm2/gm2-compiler/m2lex.c
	$(GCC_FOR_TARGET) -c $(CFLAGS) $(INCLUDES) -I$(srcdir)/gm2 -Igm2 -Igm2/gm2-compiler-boot -Igm2/gm2-libs-boot $< -o $@

gm2/gm2-compiler/clex.o: gm2/gm2-compiler/clex.c gm2/gm2-compiler-boot/CLexBuf.h gm2/gm2-compiler-boot/clex.h
	$(GCC_FOR_TARGET) -c $(CFLAGS) $(INCLUDES) -I$(srcdir)/gm2 -Igm2 -Igm2/gm2-compiler-boot -Igm2/gm2-libs-boot $< -o $@

gm2/gm2-compiler/gm2l.o: $(objdir)/gm2/gm2-auto/gm2l.mod
	./xgm2 $(GM2_FLAGS) -g -c -B./stage1/gm2 -I$(srcdir)/gm2/gm2-compiler -I$(srcdir)/gm2/gm2-libs -I$(srcdir)/gm2/gm2-libiberty $< -o $@

gm2/gm2-compiler/gm2m.o: $(objdir)/gm2/gm2-auto/gm2m.mod
	./xgm2 $(GM2_FLAGS) -g -c -B./stage1/gm2 -I$(srcdir)/gm2/gm2-compiler -I$(srcdir)/gm2/gm2-libs -I$(srcdir)/gm2/gm2-libiberty $< -o $@

gm2/gm2-compiler/P1SyntaxCheck.o: $(objdir)/gm2/gm2-auto/P1SyntaxCheck.mod
	./xgm2 $(GM2_FLAGS) -g -c -B./stage1/gm2 -I$(srcdir)/gm2/gm2-compiler -I$(srcdir)/gm2/gm2-libs -I$(srcdir)/gm2/gm2-libiberty $< -o $@

gm2/gm2-compiler/P2Build.o: $(objdir)/gm2/gm2-auto/P2Build.mod
	./xgm2 $(GM2_FLAGS) -g -c -B./stage1/gm2 -I$(srcdir)/gm2/gm2-compiler -I$(srcdir)/gm2/gm2-libs -I$(srcdir)/gm2/gm2-libiberty $< -o $@

gm2/gm2-compiler/P3Build.o: $(objdir)/gm2/gm2-auto/P3Build.mod
	./xgm2 $(GM2_FLAGS) -g -c -B./stage1/gm2 -I$(srcdir)/gm2/gm2-compiler -I$(srcdir)/gm2/gm2-libs -I$(srcdir)/gm2/gm2-libiberty $< -o $@

gm2/gm2-compiler/PHBuild.o: $(objdir)/gm2/gm2-auto/PHBuild.mod
	./xgm2 $(GM2_FLAGS) -g -c -B./stage1/gm2 -I$(srcdir)/gm2/gm2-compiler -I$(srcdir)/gm2/gm2-libs -I$(srcdir)/gm2/gm2-libiberty $< -o $@

gm2/gm2-compiler/M2Version.o: gm2/gm2-compiler/M2Version.mod
	./xgm2 $(GM2_FLAGS) -g -c -B./stage1/gm2 -I$(srcdir)/gm2/gm2-compiler -I$(srcdir)/gm2/gm2-libs -I$(srcdir)/gm2/gm2-libiberty $< -o $@

gm2/gm2-compiler/M2Version.mod:
	cd gm2/gm2-compiler ; ../../$(srcdir)/gm2/tools-src/makeversion $(GM2-VERSION)b

gm2/gm2-compiler/h2def.o: $(objdir)/gm2/gm2-auto/h2def.mod
	./xgm2 $(GM2_FLAGS) -g -c -B./stage1/gm2 -I$(srcdir)/gm2/gm2-compiler -I$(srcdir)/gm2/gm2-libs -I$(srcdir)/gm2/gm2-libiberty $< -o $@

gm2/gm2-libs-iso/%.o: $(srcdir)/gm2/gm2-libs-iso/%.mod
	./xgm2 $(GM2_FLAGS) -Wiso -c -B./stage1/gm2 -I$(srcdir)/gm2/gm2-iso-libs -I$(srcdir)/gm2/gm2-libs $< -o $@


#
#  we build the cc1gm2$(exeext) from the boot stage and then proceed to build it again using
#  itself.
#

build-libs: $(GM2-LIBS-MODS:%.mod=gm2/gm2-libs/%.o) \
            $(GM2-LIBS-C:%.c=gm2/gm2-libs/%.o)

build-compiler: $(GM2-COMP-MODS:%.mod=gm2/gm2-compiler/%.o) \
                $(GM2-AUTO-MODS:%.mod=gm2/gm2-compiler/%.o) \
                gm2/gm2-compiler/M2Version.o \
                gm2/gm2-compiler/m2lex.o

gm2/gm2-libs/libgm2.a: build-libs
	$(AR_FOR_TARGET) cr $@ $(GM2-LIBS-MODS:%.mod=gm2/gm2-libs/%.o) \
                    $(GM2-LIBS-C:%.c=gm2/gm2-libs/%.o)
	if $(RANLIB_TEST_FOR_TARGET) ; then $(RANLIB) $@ ; else true ; fi

gm2/gm2-compiler/gm2.a: build-compiler
	cd gm2 ; \
	../$(M2LINK) -s -exit -main gccgm2front ../$(srcdir)/gm2/init/gm2-gccinit ; \
	mv mod_init.c gm2-compiler
	$(GCC_FOR_TARGET) -c -g gm2/gm2-compiler/mod_init.c -o gm2/gm2-compiler/mod_init.o
	$(AR_FOR_TARGET) cr $@ gm2/gm2-compiler/mod_init.o $(GM2-COMP-MODS:%.mod=gm2/gm2-compiler/%.o) \
                    gm2/gm2-compiler/M2Version.o \
                    $(GM2-AUTO-MODS:%.mod=gm2/gm2-compiler/%.o) \
                    gm2/gm2-compiler/m2lex.o
	if $(RANLIB_TEST_FOR_TARGET) ; then $(RANLIB) $@ ; else true ; fi

build-libs-iso: $(GM2-LIBS-ISO-MODS:%.mod=gm2/gm2-libs-iso/%.o)

BUILD-LIBS-BOOT = $(GM2-LIBS-BOOT-DEFS:%.def=gm2/gm2-libs-boot/%.h) \
                  $(GM2-LIBS-BOOT-MODS:%.mod=gm2/gm2-libs-boot/%.o) \
                  $(GM2-LIBS-BOOT-C:%.c=gm2/gm2-libs-boot/%.o)

BUILD-COMPILER-BOOT = $(GM2-COMP-BOOT-DEFS:%.def=gm2/gm2-compiler-boot/%.h) \
                      $(GM2-LIBIBERTY-DEFS:%.def=gm2/gm2-libiberty/%.h) \
	              gm2/gm2-compiler-boot/gccgm2.h \
	              gm2/gm2-compiler-boot/gm2builtins.h \
                      $(GM2-AUTO-MODS:%.mod=gm2/gm2-compiler-boot/%.o) \
                      $(GM2-COMP-BOOT-MODS:%.mod=gm2/gm2-compiler-boot/%.o) \
                      gm2/gm2-compiler-boot/m2lex.o \
                      gm2/gm2-compiler-boot/M2Version.o

gm2/gm2-libs-boot/libgm2.a: gm2/boot-bin/p2c $(BUILD-LIBS-BOOT)
	$(AR) cr $@ $(GM2-LIBS-BOOT-MODS:%.mod=gm2/gm2-libs-boot/%.o) \
                    $(GM2-LIBS-BOOT-C:%.c=gm2/gm2-libs-boot/%.o)
	if $(RANLIB_TEST_FOR_TARGET) ; then $(RANLIB) $@ ; else true ; fi

gm2/gm2-compiler-boot/gm2.a: gm2/boot-bin/p2c gm2/boot-bin/mklink \
                         $(BUILD-LIBS-BOOT) $(BUILD-COMPILER-BOOT)
	cd gm2 ; \
	../$(M2LINK) -s -exit -main gccgm2front ../$(srcdir)/gm2/init/gm2-gccinit ; \
	mv mod_init.c gm2-compiler-boot
	$(CC) -c -g gm2/gm2-compiler-boot/mod_init.c -o gm2/gm2-compiler-boot/mod_init.o
	$(AR) cr $@ gm2/gm2-compiler-boot/m2lex.o \
                    gm2/gm2-compiler-boot/mod_init.o \
                    $(GM2-COMP-BOOT-MODS:%.mod=gm2/gm2-compiler-boot/%.o) \
                    $(GM2-AUTO-MODS:%.mod=gm2/gm2-compiler-boot/%.o) \
                    gm2/gm2-compiler-boot/M2Version.o
	if $(RANLIB_TEST_FOR_TARGET) ; then $(RANLIB) $@ ; else true ; fi

gm2-compiler-boot:
	../$(srcdir)/tools-src/makeversion $(GM2-VERSION)a

gm2/gm2-compiler-boot/gm2.a: gm2/boot-bin/p2c

################################################################################################
#
#  b u i l d i n g   p 2 c
#
################################################################################################

P2CSRCS = $(srcdir)/gm2/p2c/p2c-src/src/trans.c \
          $(srcdir)/gm2/p2c/p2c-src/src/stuff.c \
          $(srcdir)/gm2/p2c/p2c-src/src/out.c \
          $(srcdir)/gm2/p2c/p2c-src/src/comment.c \
          $(srcdir)/gm2/p2c/p2c-src/src/lex.c \
          $(srcdir)/gm2/p2c/p2c-src/src/parse.c \
          $(srcdir)/gm2/p2c/p2c-src/src/decl.c \
          $(srcdir)/gm2/p2c/p2c-src/src/expr.c \
          $(srcdir)/gm2/p2c/p2c-src/src/pexpr.c \
          $(srcdir)/gm2/p2c/p2c-src/src/funcs.c \
          $(srcdir)/gm2/p2c/p2c-src/src/dir.c \
          $(srcdir)/gm2/p2c/p2c-src/src/hpmods.c \
          $(srcdir)/gm2/p2c/p2c-src/src/citmods.c

P2CSRCLIST = trans.c stuff.c out.c comment.c lex.c parse.c \
             decl.c expr.c pexpr.c funcs.c dir.c hpmods.c \
             citmods.c

P2COBJS = gm2/boot-bin/trans.o gm2/boot-bin/stuff.o gm2/boot-bin/out.o \
          gm2/boot-bin/comment.o gm2/boot-bin/lex.o gm2/boot-bin/parse.o gm2/boot-bin/decl.o \
          gm2/boot-bin/expr.o gm2/boot-bin/pexpr.o gm2/boot-bin/funcs.o gm2/boot-bin/dir.o

P2C_LIBSRCS = $(srcdir)/gm2/p2c/p2c-src/src/p2clib.c \
              $(srcdir)/gm2/p2c/p2c-src/src/loc.p2clib.c
P2C_LIBOBJS = gm2/boot-bin/p2clib.o gm2/boot-bin/loc-p2clib.o

P2C_PROTOTYPES = gm2/p2c/p2c-src/src/p2c.proto gm2/p2c/p2c-src/src/p2c.hdrs
P2C_INCLUDES = -I. -I$(srcdir) -I$(srcdir)/../include -I../include \
               -I$(srcdir)/gm2/p2c/p2c-src/src -Igm2/p2c/p2c-src/src

ABSHOMEDIR = `cd $(HOMEDIR); pwd`
ABSINCDIR = `cd $(INCDIR); pwd`
ABSLIBDIR = `cd $(LIBDIR); pwd`

gm2/boot-bin/p2c: $(P2C_PROTOTYPES) $(P2COBJS)
	$(CC) $(LDFLAGS) $(P2COBJS) -o $@

gm2/boot-bin/dir.o: $(srcdir)/gm2/p2c/p2c-src/src/dir.c $(srcdir)/gm2/p2c/p2c-src/src/trans.h
	$(CC) -c $(CFLAGS) $(P2C_INCLUDES) $(CUSTDEFS) $< -o $@

gm2/boot-bin/trans.o: $(srcdir)/gm2/p2c/p2c-src/src/trans.c $(srcdir)/gm2/p2c/p2c-src/src/trans.h
	$(CC) -c $(CFLAGS) $(P2C_INCLUDES) -DHASDUMPS -DP2C_HOME=\"$(srcdir)/gm2/p2c/p2c-src/src\" $< -o $@

gm2/boot-bin/stuff.o: $(srcdir)/gm2/p2c/p2c-src/src/stuff.c $(srcdir)/gm2/p2c/p2c-src/src/trans.h
	$(CC) -c $(CFLAGS) $(P2C_INCLUDES) $< -o $@

gm2/boot-bin/out.o: $(srcdir)/gm2/p2c/p2c-src/src/out.c $(srcdir)/gm2/p2c/p2c-src/src/trans.h
	$(CC) -c $(CFLAGS) $(P2C_INCLUDES) $< -o $@

gm2/boot-bin/comment.o: $(srcdir)/gm2/p2c/p2c-src/src/comment.c $(srcdir)/gm2/p2c/p2c-src/src/trans.h
	$(CC) -c $(CFLAGS) $(P2C_INCLUDES) $< -o $@

gm2/boot-bin/lex.o: $(srcdir)/gm2/p2c/p2c-src/src/lex.c $(srcdir)/gm2/p2c/p2c-src/src/trans.h
	$(CC) -c $(CFLAGS) $(P2C_INCLUDES) $< -o $@

gm2/boot-bin/parse.o: $(srcdir)/gm2/p2c/p2c-src/src/parse.c $(srcdir)/gm2/p2c/p2c-src/src/trans.h
	$(CC) -c $(CFLAGS) $(P2C_INCLUDES) $< -o $@

gm2/boot-bin/decl.o: $(srcdir)/gm2/p2c/p2c-src/src/decl.c $(srcdir)/gm2/p2c/p2c-src/src/trans.h
	$(CC) -c $(CFLAGS) $(P2C_INCLUDES) $< -o $@

gm2/boot-bin/expr.o: $(srcdir)/gm2/p2c/p2c-src/src/expr.c $(srcdir)/gm2/p2c/p2c-src/src/trans.h
	$(CC) -c $(CFLAGS) $(P2C_INCLUDES) $< -o $@

gm2/boot-bin/pexpr.o: $(srcdir)/gm2/p2c/p2c-src/src/pexpr.c $(srcdir)/gm2/p2c/p2c-src/src/trans.h
	$(CC) -c $(CFLAGS) $(P2C_INCLUDES) $< -o $@

gm2/boot-bin/funcs.o: $(srcdir)/gm2/p2c/p2c-src/src/funcs.c $(srcdir)/gm2/p2c/p2c-src/src/trans.h
	$(CC) -c $(CFLAGS) $(P2C_INCLUDES) $< -o $@

gm2/boot-bin/hpmods.o: $(srcdir)/gm2/p2c/p2c-src/src/hpmods.c $(srcdir)/gm2/p2c/p2c-src/src/trans.h
	$(CC) -c $(CFLAGS) $(P2C_INCLUDES) $< -o $@

gm2/boot-bin/citmods.o: $(srcdir)/gm2/p2c/p2c-src/src/citmods.c $(srcdir)/gm2/p2c/p2c-src/src/trans.h
	$(CC) -c $(CFLAGS) $(P2C_INCLUDES) $< -o $@

# Making and using makeproto
gm2/p2c/p2c-src/src/p2c.hdrs: $(P2CSRCS) gm2/boot-bin/makeproto
	cd $(srcdir)/gm2/p2c/p2c-src/src/ ; \
	$(objdir)/gm2/boot-bin/makeproto -n -m -h -t16 -a35 -s0 -x $(P2CSRCLIST) -o $(objdir)/$@

gm2/p2c/p2c-src/src/p2c.proto: $(P2CSRCS) gm2/boot-bin/makeproto
	cd $(srcdir)/gm2/p2c/p2c-src/src/ ; \
	$(objdir)/gm2/boot-bin/makeproto -n -m -h -t16 -a35 -s1 -i $(P2CSRCLIST) -o $(objdir)/$@

gm2/boot-bin/makeproto: $(srcdir)/gm2/p2c/p2c-src/src/makeproto.c
	if [ ! -d gm2/boot-bin ] ; then mkdir -p gm2/boot-bin ; fi
	$(CC) $(CFLAGS) $(LDFLAGS) $(P2C_INCLUDES) $< -o $@

# Making the p2c runtime library
gm2/p2c/p2c-src/src/libp2c.a: $(P2C_LIBOBJS)
	$(RM) gm2/p2c/p2c-src/src/libp2c.a
	echo $(P2C_LIBOBJS)
	ar cr $@ $(P2C_LIBOBJS)

gm2/boot-bin/p2clib.o: $(srcdir)/gm2/p2c/p2c-src/src/p2clib.c
	$(CC) -c $(CFLAGS) -I$(srcdir)/gm2/p2c $(P2C_INCLUDES) $< -o $@

gm2/boot-bin/loc-p2clib.o: $(srcdir)/gm2/p2c/p2c-src/src/loc.p2clib.c
	$(CC) -c $(CFLAGS) -I$(srcdir)/gm2/p2c $(P2C_INCLUDES) $< -o $@

################################################################################################
#
#  e n d   o f   p 2 c
#
################################################################################################

gm2/boot-bin/mklink: $(srcdir)/gm2/tools-src/mklink.c
	gcc -g -o $@ $<

gm2/gm2-auto/pg.o: gm2/gm2-auto/pg.mod
	$(P2C) gm2/gm2-auto/pg.mod -o gm2/gm2-auto/pg.c ; \
	$(CC) -c $(CFLAGS) -I$(srcdir)/gm2 -Igm2/gm2-libs-boot -Igm2/gm2-compiler-boot $(INCLUDES) gm2/gm2-auto/pg.c -o $@

gm2/gm2-auto/%.o: gm2/gm2-auto/%.mod
	if [ -f $(srcdir)/gm2/gm2-compiler-boot/$*.def ] ; then \
          $(P2C) -s $(srcdir)/gm2/gm2-compiler-boot/$*.def gm2/gm2-auto/$*.mod -o gm2/gm2-auto/$*.c ; \
        else \
          $(P2C) gm2/gm2-auto/$*.mod -o gm2/gm2-auto/$*.c ; \
        fi
	$(CC) -c $(CFLAGS) -Igm2 -I. -Igm2/gm2-libs-boot -Igm2/gm2-compiler-boot $(INCLUDES) gm2/gm2-auto/$*.c -o $@

gm2/gm2-compiler-boot/%.h: $(srcdir)/gm2/gm2-compiler-boot/%.def
	$(P2C) $(srcdir)/gm2/gm2-compiler-boot/$*.def -h gm2/gm2-compiler-boot/$*.h


#
#  now for the rules which build objects in the gm2-compiler-paranoid gm2-libs-paranoid directories
#

gm2/gm2-libs-paranoid/%.o: gm2/gm2-libs/%.c
	$(CC) -c -g -O2 -I./ -Igm2/gm2-libs -Wall $(INCLUDES) $< -o $@

gm2/gm2-libs-paranoid/%.o: $(srcdir)/gm2/gm2-libs/%.mod
	./xgm2 $(GM2_FLAGS) -c -B./stage2/gm2 -I$(srcdir)/gm2/gm2-compiler -I$(srcdir)/gm2/gm2-libs -I$(srcdir)/gm2/gm2-libiberty $< -o $@

gm2/gm2-compiler-paranoid/%.o: $(srcdir)/gm2/gm2-compiler/%.mod
	./xgm2 $(GM2_FLAGS) -c -B./stage2/gm2 -I$(srcdir)/gm2/gm2-compiler -I$(srcdir)/gm2/gm2-libs -I$(srcdir)/gm2/gm2-libiberty $< -o $@

gm2/gm2-compiler-paranoid/%.o: gm2/gm2-auto/%.mod
	./xgm2 $(GM2_FLAGS) -g -c -B./stage2/gm2 -I$(srcdir)/gm2/gm2-compiler -I$(srcdir)/gm2/gm2-libs -I$(srcdir)/gm2/gm2-libiberty $< -o $@

gm2/gm2-libs-paranoid/wrapc.o: $(srcdir)/gm2/gm2-libs-ch/wrapc.c gm2/gm2-libs-boot/wrapc.h
	$(CC) -c $(CFLAGS) -I$(srcdir)/gm2 -Igm2/gm2-libs-boot $(INCLUDES) $< -o $@

gm2/gm2-libs-paranoid/UnixArgs.o: $(srcdir)/gm2/gm2-libs-ch/UnixArgs.c gm2/gm2-libs-boot/UnixArgs.h
	$(CC) -c $(CFLAGS) -I$(srcdir)/gm2 -Igm2/gm2-libs-boot $(INCLUDES) $< -o $@

gm2/gm2-libs-paranoid/Selective.o: $(srcdir)/gm2/gm2-libs-ch/Selective.c gm2/gm2-libs-boot/Selective.h
	$(CC) -c $(CFLAGS) -I$(srcdir)/gm2 -Igm2/gm2-libs-boot $(INCLUDES) $< -o $@

gm2/gm2-libs-paranoid/choosetemp.o: $(srcdir)/gm2/gm2-libs-ch/choosetemp.c gm2/gm2-libiberty/choosetemp.h
	$(CC) -c $(CFLAGS) -I$(srcdir)/gm2 -Igm2/gm2-libs-boot -Igm2/gm2-libiberty $(INCLUDES) $< -o $@

gm2/gm2-compiler-paranoid/m2lex.o: gm2/gm2-compiler/m2lex.c
	$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -I$(srcdir)/gm2 -Igm2/gm2-compiler-boot -Igm2/gm2-libs-boot $< -o $@

#
#  now for rules which build the paranoid version of gm2
#

gm2/gm2-libs-paranoid/libgm2.a: $(GM2-LIBS-MODS:%.mod=gm2/gm2-libs-paranoid/%.o) \
	                    $(GM2-LIBS-C:%.c=gm2/gm2-libs-paranoid/%.o)
	$(AR) cr $@ $(GM2-LIBS-MODS:%.mod=gm2/gm2-libs-paranoid/%.o) \
                    $(GM2-LIBS-C:%.c=gm2/gm2-libs-paranoid/%.o)
	if $(RANLIB_TEST_FOR_TARGET) ; then $(RANLIB) $@ ; else true ; fi

gm2/gm2-compiler-paranoid/gm2.a: gm2/gm2-compiler-paranoid/mod_init.o \
                             $(GM2-COMP-MODS:%.mod=gm2/gm2-compiler-paranoid/%.o) \
                             $(GM2-AUTO-MODS:%.mod=gm2/gm2-compiler-paranoid/%.o) \
                             gm2/gm2-compiler-paranoid/M2Version.o \
                             gm2/gm2-compiler-paranoid/m2lex.o
	$(AR) cr $@ gm2/gm2-compiler-paranoid/mod_init.o \
                    $(GM2-COMP-MODS:%.mod=gm2/gm2-compiler-paranoid/%.o) \
                    $(GM2-AUTO-MODS:%.mod=gm2/gm2-compiler-paranoid/%.o) \
                    gm2/gm2-compiler-paranoid/M2Version.o \
                    gm2/gm2-compiler-paranoid/m2lex.o
	if $(RANLIB_TEST_FOR_TARGET) ; then $(RANLIB) $@ ; else true ; fi

gm2/gm2-compiler-paranoid/mod_init.o: $(srcdir)/gm2/init/gm2-gccinit
	$(M2LINK) -s -exit -main gccgm2front $(srcdir)/gm2/init/gm2-gccinit
	mv mod_init.c gm2/gm2-compiler-paranoid
	$(CC) -c -g gm2/gm2-compiler-paranoid/mod_init.c -o gm2/gm2-compiler-paranoid/mod_init.o

gm2/gm2-compiler-paranoid/M2Version.mod:
	cd gm2/gm2-compiler-paranoid ; ../../$(srcdir)/gm2/tools-src/makeversion $(GM2-VERSION)c

gm2/gm2-compiler-paranoid/M2Version.o: gm2/gm2-compiler-paranoid/M2Version.mod
	./xgm2 $(GM2_FLAGS) -c -B./stage2/gm2 -I$(srcdir)/gm2/gm2-compiler -I$(srcdir)/gm2/gm2-libs $< -o $@

gm2/gm2-libs-paranoid/%.o: gm2-libs/%.c
	$(CC) -c -g -I./ -Igm2/gm2-libs -Wall $(INCLUDES) $< -o $@

#
#  and now the linkage tools and general Modula-2 tools
#

stage1/gm2/gcc$(exeext): xgcc$(exeext)
	cp -p $< $@

stage1/gm2/cc1$(exeext): cc1$(exeext)
	cp -p $< $@

stage1/gm2/cpp$(exeext): cpp$(exeext)
	cp -p $< $@

stage1/gm2/gm2l$(exeext): gm2/p2c/p2c-src/src/libp2c.a \
     gm2/boot-bin/mklink gm2/boot-bin/p2c \
     gm2/gm2-libs-boot/libgm2.a gm2/gm2-compiler-boot/gm2l.o \
     $(GM2_LIBS_BOOT)
	$(M2LINK) -s -exit $(srcdir)/gm2/init/gm2linit
	mv mod_init.c gm2/gm2-compiler-boot/gm2l_init.c
	$(CC) -c -g gm2/gm2-compiler-boot/gm2l_init.c -o gm2/gm2-compiler-boot/gm2l_init.o
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \
              gm2/gm2-compiler-boot/gm2l_init.o \
              gm2/gm2-compiler-boot/gm2l.o $(GM2_LIBS_BOOT) $(LIBS)

stage1/gm2/gm2lcc$(exeext): gm2/p2c/p2c-src/src/libp2c.a \
     gm2/boot-bin/mklink gm2/boot-bin/p2c \
     gm2/gm2-libs-boot/libgm2.a gm2/gm2-compiler-boot/gm2lcc.o \
     $(GM2_LIBS_BOOT)
	$(M2LINK) -s -exit $(srcdir)/gm2/init/gm2lccinit
	mv mod_init.c gm2/gm2-compiler-boot/gm2lcc_init.c
	$(CC) -c -g gm2/gm2-compiler-boot/gm2lcc_init.c -o gm2/gm2-compiler-boot/gm2lcc_init.o
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \
              gm2/gm2-compiler-boot/gm2lcc_init.o \
              gm2/gm2-compiler-boot/gm2lcc.o $(GM2_LIBS_BOOT) $(LIBS)

stage1/gm2/gm2lgen$(exeext): gm2/p2c/p2c-src/src/libp2c.a \
     gm2/boot-bin/mklink gm2/boot-bin/p2c \
     gm2/gm2-libs-boot/libgm2.a gm2/gm2-compiler-boot/gm2lgen.o
	$(M2LINK) -s -exit $(srcdir)/gm2/init/gm2lgeninit
	mv mod_init.c gm2/gm2-compiler-boot/gm2lgen_init.c
	$(CC) -c -g gm2/gm2-compiler-boot/gm2lgen_init.c -o gm2/gm2-compiler-boot/gm2lgen_init.o
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \
              gm2/gm2-compiler-boot/gm2lgen_init.o \
              gm2/gm2-compiler-boot/gm2lgen.o $(GM2_LIBS_BOOT) $(LIBS)

stage1/gm2/gm2lsub$(exeext): gm2/p2c/p2c-src/src/libp2c.a \
     gm2/boot-bin/mklink gm2/boot-bin/p2c \
     gm2/gm2-libs-boot/libgm2.a gm2/gm2-compiler-boot/gm2lsub.o \
     $(GM2_LIBS_BOOT)
	$(M2LINK) -s -exit $(srcdir)/gm2/init/gm2lsubinit
	mv mod_init.c gm2/gm2-compiler-boot/gm2lsub_init.c
	$(CC) -c -g gm2/gm2-compiler-boot/gm2lsub_init.c -o gm2/gm2-compiler-boot/gm2lsub_init.o
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \
              gm2/gm2-compiler-boot/gm2lsub_init.o \
              gm2/gm2-compiler-boot/gm2lsub.o $(GM2_LIBS_BOOT) $(LIBS)

stage1/gm2/gm2m$(exeext): gm2/p2c/p2c-src/src/libp2c.a \
     gm2/boot-bin/mklink gm2/boot-bin/p2c \
     gm2/gm2-libs-boot/libgm2.a gm2/gm2-compiler-boot/gm2m.o \
     $(GM2_LIBS_BOOT)
	$(M2LINK) -s -exit $(srcdir)/gm2/init/gm2minit
	mv mod_init.c gm2/gm2-compiler-boot/gm2m_init.c
	$(CC) -c -g gm2/gm2-compiler-boot/gm2m_init.c -o gm2/gm2-compiler-boot/gm2m_init.o
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \
              gm2/gm2-compiler-boot/gm2m_init.o \
              gm2/gm2-compiler-boot/gm2m.o $(GM2_LIBS_BOOT) $(LIBS)

stage2/gm2/gm2l$(exeext): $(GM2_LIBS) $(GM2_LINK_TOOLS_BOOT) gm2/gm2-compiler/gm2l.o
	grep -v mod_init $(srcdir)/gm2/init/gm2linit > gm2l.lst
	./xgm2 -Wuselist -Wmodules -c -I$(srcdir)/gm2/gm2-libs -I$(srcdir)/gm2/gm2-compiler \
               -g -B./stage1/gm2/ -B./ gm2/gm2-auto/gm2l.mod
	./xgm2 -v -Igm2/gm2-libs -Igm2/gm2-compiler \
               -I$(srcdir)/gm2/gm2-libs -I$(srcdir)/gm2/gm2-compiler -g -B./stage1/gm2/ -B./ -o $@ \
               -Wuselist gm2/gm2-auto/gm2l.mod $(LIBS)

stage2/gm2/gm2lcc$(exeext): $(GM2_LIBS) $(GM2_LINK_TOOLS_BOOT) gm2/gm2-compiler/gm2lcc.o
	grep -v mod_init $(srcdir)/gm2/init/gm2lccinit > gm2lcc.lst
	./xgm2 -Wuselist -Wmodules -c -I$(srcdir)/gm2/gm2-libs -I$(srcdir)/gm2/gm2-compiler \
               -g -B./stage1/gm2 -B./ $(srcdir)/gm2/gm2-compiler/gm2lcc.mod
	./xgm2 -Igm2/gm2-libs -Igm2/gm2-compiler \
               -I$(srcdir)/gm2/gm2-libs -I$(srcdir)/gm2/gm2-compiler -g -B./stage1/gm2 -B./ -o $@ \
               -Wuselist $(srcdir)/gm2/gm2-compiler/gm2lcc.mod $(LIBS)

stage2/gm2/gm2lgen$(exeext): $(GM2_LIBS) $(GM2_LINK_TOOLS_BOOT) gm2/gm2-compiler/gm2lgen.o
	grep -v mod_init $(srcdir)/gm2/init/gm2lgeninit > gm2lgen.lst
	./xgm2 -Wuselist -Wmodules -c -I$(srcdir)/gm2/gm2-libs -I$(srcdir)/gm2/gm2-compiler \
               -g -B./stage1/gm2 -B./ $(srcdir)/gm2/gm2-compiler/gm2lgen.mod
	./xgm2 -Igm2/gm2-libs -Igm2/gm2-compiler \
               -I$(srcdir)/gm2/gm2-libs -I$(srcdir)/gm2/gm2-compiler -g -B./stage1/gm2 -B./ -o $@ \
               -Wuselist $(srcdir)/gm2/gm2-compiler/gm2lgen.mod $(LIBS)

stage2/gm2/gm2lsub$(exeext): $(GM2_LIBS) $(GM2_LINK_TOOLS_BOOT) gm2/gm2-compiler/gm2lsub.o
	grep -v mod_init $(srcdir)/gm2/init/gm2lsubinit > gm2lsub.lst
	./xgm2 -Wuselist -Wmodules -c -I$(srcdir)/gm2/gm2-libs -I$(srcdir)/gm2/gm2-compiler \
               -g -B./stage1/gm2 -B./ $(srcdir)/gm2/gm2-compiler/gm2lsub.mod
	./xgm2 -Igm2/gm2-libs -Igm2/gm2-compiler \
               -I$(srcdir)/gm2/gm2-libs -I$(srcdir)/gm2/gm2-compiler -g -B./stage1/gm2 -B./ -o $@ \
               -Wuselist $(srcdir)/gm2/gm2-compiler/gm2lsub.mod $(LIBS)

stage2/gm2/gm2m$(exeext): $(GM2_LIBS) $(GM2_LINK_TOOLS_BOOT) gm2/gm2-compiler/gm2m.o
	grep -v mod_init $(srcdir)/gm2/init/gm2minit > gm2m.lst
	./xgm2 -Wuselist -Wmodules -c -I$(srcdir)/gm2/gm2-libs -I$(srcdir)/gm2/gm2-compiler \
               -g -B./stage1/gm2 -B./ gm2/gm2-auto/gm2m.mod
	./xgm2 -Igm2/gm2-libs -Igm2/gm2-compiler \
               -I$(srcdir)/gm2/gm2-libs -I$(srcdir)/gm2/gm2-compiler -g -B./stage1/gm2 -B./ -o $@ \
               -Wuselist gm2/gm2-auto/gm2m.mod $(LIBS)

stage1/gm2/h2def$(exeext): gm2/p2c/p2c-src/src/libp2c.a \
     gm2/boot-bin/mklink gm2/boot-bin/p2c \
     gm2/gm2-libs-boot/libgm2.a \
     gm2/gm2-compiler-boot/clex.o gm2/gm2-compiler-boot/CLexBuf.o \
     gm2/gm2-compiler-boot/h2def.o \
     gm2/gm2-compiler/clex.o \
     $(GM2_LIBS_BOOT)
	$(M2LINK) -s -exit $(srcdir)/gm2/init/h2definit
	mv mod_init.c gm2/gm2-compiler-boot/h2def_init.c
	$(CC) -c -g gm2/gm2-compiler-boot/h2def_init.c -o gm2/gm2-compiler-boot/h2def_init.o
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \
              gm2/gm2-compiler/clex.o \
              gm2/gm2-compiler-boot/CLexBuf.o \
              gm2/gm2-compiler-boot/h2def_init.o \
              gm2/gm2-compiler-boot/h2def.o $(GM2_LIBS_BOOT) $(LIBS)

stage2/gm2/h2def$(exeext): $(GM2_LIBS) $(GM2_LINK_TOOLS_BOOT) \
                           gm2/gm2-compiler/clex.o gm2/gm2-compiler/CLexBuf.o \
                           gm2/gm2-compiler/h2def.o
	grep -v mod_init $(srcdir)/gm2/init/h2definit > h2def.lst
	./xgm2 -Wuselist -Wmodules -c -I$(srcdir)/gm2/gm2-libs -I$(srcdir)/gm2/gm2-compiler \
               -g -B./stage1/gm2 -B./ gm2/gm2-auto/h2def.mod
	./xgm2 -Igm2/gm2-libs -Igm2/gm2-compiler \
               -I$(srcdir)/gm2/gm2-libs -I$(srcdir)/gm2/gm2-compiler -B./stage1/gm2 -B./ -o $@ \
               -Wuselist gm2/gm2-auto/h2def.mod $(LIBS)

gm2/ppg: gm2/p2c/p2c-src/src/libp2c.a gm2/boot-bin/mklink gm2/boot-bin/p2c \
     gm2/gm2-libs-boot/libgm2.a $(GM2-PPG-MODS:%.mod=gm2/gm2-compiler-boot/%.o) \
     gm2/gm2-compiler-boot/ppg.o
	cd gm2 ; \
	../$(M2LINK) -s ../$(srcdir)/gm2/init/ppginit ; \
	$(CC) $(CFLAGS) -c mod_init.c -o mod_init.o ; \
	M2PATH=". gm2-libs-boot gm2-compiler-boot" ; export M2PATH ; \
	../$(M2LINK) -l -p2c p2c/p2c-src/src/libp2c.a ../$(srcdir)/gm2/init/ppginit ; \
	$(SHELL) linkcommand ; \
	$(RM) linkcommand ; \
	mv a.out ppg

gm2/gm2-auto:
	mkdir gm2/gm2-auto

gm2/pg: gm2/gm2-auto gm2/ppg gm2/gm2-auto/pg.mod \
    gm2/p2c/p2c-src/src/libp2c.a gm2/boot-bin/mklink gm2/gm2-libs-boot \
    $(GM2-PPG-MODS:%.mod=gm2/gm2-compiler-boot/%.o)
	sed -e 's/ppg/pg/' < $(srcdir)/gm2/init/ppginit > gm2/gm2-auto/pginit
	$(MAKE) gm2/gm2-auto/pg.o
	$(QUIAT)cd gm2 ; \
	../$(M2LINK) -s ../gm2/gm2-auto/pginit ; \
	$(CC) $(CFLAGS) -c mod_init.c -o mod_init.o ; \
	M2PATH="gm2-auto . gm2-libs-boot gm2-compiler-boot" ; export M2PATH ; \
	../$(M2LINK) -l -p2c p2c/p2c-src/src/libp2c.a ../gm2/gm2-auto/pginit ; \
	$(SHELL) linkcommand ; \
	$(RM) linkcommand ; \
	if [ -x a.out ] ; then \
            mv a.out pg ; \
        else \
            echo "failed to link $@" ; \
            exit 1; \
        fi

gm2/pg-e: gm2/pg
	mv gm2/pg gm2/pg-e

gm2/gm2-auto/pg.mod: gm2/gm2-auto gm2/ppg
	$(srcdir)/gm2/tools-src/buildpg $(srcdir)/gm2/gm2-compiler/ppg.mod -e > gm2/gm2-auto/pg.bnf
	./gm2/ppg -e -l gm2/gm2-auto/pg.bnf > gm2/gm2-auto/pg.mod

verifypg-e: gm2/pg-e
	$(srcdir)/gm2/tools-src/buildpg $(srcdir)/gm2/gm2-compiler/ppg.mod -e > gm2/gm2-auto/pg.bnf
	./gm2/pg-e -e -l gm2/gm2-auto/pg.bnf > gm2/gm2-auto/t.mod
	$(QUIAT)if ! diff gm2/gm2-auto/t.mod gm2/gm2-auto/pg.mod > /dev/null ; then \
           echo "pg failed during self build" ; \
           exit 1 ; \
        fi

buildpge: verifypg-e
	$(srcdir)/gm2/tools-src/buildpg $(srcdir)/gm2/gm2-compiler/ppg.mod > gm2/gm2-auto/pg.bnf
	./gm2/pg-e -l gm2/gm2-auto/pg.bnf > gm2/gm2-auto/pg.mod
	$(MAKE) gm2/gm2-auto/pg.o
	sed -e 's/ppg/pg/' < $(srcdir)/gm2/init/ppginit > gm2/gm2-auto/pginit
	cd gm2 ; \
	../$(M2LINK) -s gm2-auto/pginit ; \
	$(CC) $(CFLAGS) -c mod_init.c -o mod_init.o ; \
	M2PATH="gm2-auto . gm2-libs-boot gm2-compiler-boot" ; export M2PATH ; \
	../$(M2LINK) -l -p2c p2c/p2c-src/src/libp2c.a gm2-auto/pginit ; \
	$(SHELL) linkcommand ; \
	$(RM) linkcommand ; \
	mv a.out pge
	$(RM) gm2/gm2-auto/pg.bnf gm2/gm2-auto/pg.mod

gm2/pge: buildpge
	$(srcdir)/gm2/tools-src/buildpg $(srcdir)/gm2/gm2-compiler/ppg.mod > gm2/gm2-auto/pg.bnf
	./gm2/pge gm2/gm2-auto/pg.bnf > gm2/gm2-auto/t.mod
	./gm2/pg-e gm2/gm2-auto/pg.bnf > gm2/gm2-auto/t1.mod
	$(QUIAT)if ! diff gm2/gm2-auto/t.mod gm2/gm2-auto/t1.mod > /dev/null ; then \
           echo "failure: pg (with error recovery) failed" ; \
           $(RM) gm2/pge ; \
           exit 1 ; \
        fi
	$(RM) gm2/gm2-auto/t.mod gm2/gm2-auto/t1.mod gm2/gm2-auto/pg.bnf

$(objdir)/gm2/gm2-auto/P1SyntaxCheck.mod: $(srcdir)/gm2/bnf/m2.bnf
	$(MAKE) gm2/pge
	./gm2/pge -l $< > $@

$(objdir)/gm2/gm2-auto/P2Build.mod: $(srcdir)/gm2/bnf/m2-2.bnf
	$(MAKE) gm2/pge
	./gm2/pge $< > $@

$(objdir)/gm2/gm2-auto/P3Build.mod: $(srcdir)/gm2/bnf/m2-3.bnf
	$(MAKE) gm2/pge
	./gm2/pge $< > $@

$(objdir)/gm2/gm2-auto/PHBuild.mod: $(srcdir)/gm2/bnf/m2-h.bnf
	$(MAKE) gm2/pge
	./gm2/pge $< > $@

$(objdir)/gm2/gm2-auto/gm2l.mod: $(srcdir)/gm2/bnf/gm2l.bnf
	$(MAKE) gm2/pge
	./gm2/pge $< > $@

$(objdir)/gm2/gm2-auto/gm2m.mod: $(srcdir)/gm2/bnf/gm2m.bnf
	$(MAKE) gm2/pge
	./gm2/pge $< > $@

$(objdir)/gm2/gm2-auto/h2def.mod: $(srcdir)/gm2/bnf/h2def.bnf
	$(MAKE) gm2/pge
	./gm2/pge $< > $@

#
# gm2.verifyparanoid - diffs the output of all three compilers with the compiler source code
#
gm2.verifyparanoid: stage1/gm2/cc1gm2$(exeext) stage2/gm2/cc1gm2$(exeext) stage3/gm2/cc1gm2$(exeext) force
	@echo "verifying the three generations of GNU Modula-2 compilers - it may take some time.."
	$(QUIAT)for i in $(GM2-VERIFY-MODS) ; do \
           echo -n "$$i " ; \
           ./xgm2 -S -Wbounds -Wreturn -g -c -B./stage1/gm2 -I$(srcdir)/gm2/gm2-compiler:$(srcdir)/gm2/gm2-libs:$(srcdir)/gm2/gm2-libiberty $(srcdir)/gm2/gm2-compiler/$$i -o gm2/gm2-compiler-verify/1.s ; \
           echo -n "[1]" ; \
           ./xgm2 -S -Wbounds -Wreturn -g -c -B./stage2/gm2 -I$(srcdir)/gm2/gm2-compiler:$(srcdir)/gm2/gm2-libs:$(srcdir)/gm2/gm2-libiberty $(srcdir)/gm2/gm2-compiler/$$i -o gm2/gm2-compiler-verify/2.s ; \
           echo -n "[2]" ; \
           ./xgm2 -S -Wbounds -Wreturn -g -c -B./stage3/gm2 -I$(srcdir)/gm2/gm2-compiler:$(srcdir)/gm2/gm2-libs:$(srcdir)/gm2/gm2-libiberty $(srcdir)/gm2/gm2-compiler/$$i -o gm2/gm2-compiler-verify/3.s ; \
           echo -n "[3]" ; \
           if ! diff gm2/gm2-compiler-verify/1.s gm2/gm2-compiler-verify/2.s >& gm2/gm2-compiler-verify/1_2.diff ; then \
               echo -n " [stage 1 and stage 2 differ]" ; \
               cp gm2/gm2-compiler-verify/1.s gm2/gm2-compiler-verify/t.s | as -ahl gm2/gm2-compiler-verify/t.s > gm2/gm2-compiler-verify/$$i.1.lst ; \
               cp gm2/gm2-compiler-verify/2.s gm2/gm2-compiler-verify/t.s | as -ahl gm2/gm2-compiler-verify/t.s > gm2/gm2-compiler-verify/$$i.2.lst ; \
               echo " " ; \
               exit 1 ; \
           fi ; \
           if ! diff gm2/gm2-compiler-verify/2.s gm2/gm2-compiler-verify/3.s >& gm2/gm2-compiler-verify/2_3.diff ; then \
               echo -n " [stage 2 and stage 3 differ]" ; \
               cp gm2/gm2-compiler-verify/2.s gm2/gm2-compiler-verify/t.s | as -ahl gm2/gm2-compiler-verify/t.s > gm2/gm2-compiler-verify/$$i.2.lst ; \
               cp gm2/gm2-compiler-verify/3.s gm2/gm2-compiler-verify/t.s | as -ahl gm2/gm2-compiler-verify/t.s > gm2/gm2-compiler-verify/$$i.3.lst ; \
           fi ; \
           echo " " ; \
        done ; \
	$(RM) -f gm2/gm2-compiler-verify/1.s gm2/gm2-compiler-verify/2.s gm2/gm2-compiler-verify/3.s gm2/gm2-compiler-verify/2_3.diff gm2/gm2-compiler-verify/1_2.diff

gm2.maintainer-clean: force
	-rm -f $(srcdir)/gm2/gm2-auto/*
	-rm -f $(srcdir)/gm2/gm2-libs.texi
	-rm -f $(srcdir)/gm2/images/gnu.eps

GM2DISTFILES = CVS ChangeLog gm2/Make-lang.in README bnf config-lang.in \
            el gccgdbinit gccgm2.c gm2builtins.c gm2-auto gm2-compiler gm2-compiler-boot \
            gm2-gccinit gm2-libs gm2-libs-boot gm2-libs-ch gm2.texi gm2spec.c \
            lang-options.h lang-specs.h loc.p2crc m2 m2.lex m2f-src p2c p2crc \
            tools-src gm2-libiberty

gm2.dist: gm2.distclean
	echo gm2-`date '+%Y%m%d'` > .fname
	-rm -rf `cat .fname`
	mkdir `cat .fname`
	dst=`cat .fname`; for f in $(srcdir)/gm2/$(GM2DISTFILES); do \
           cp -pr $(srcdir)/$$f $$dst/$$f ; \
        done
	tar --gzip -chf `cat .fname`.tar.gz `cat .fname`
	-rm -rf `cat .fname` .fname
