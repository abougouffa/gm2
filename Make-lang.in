# Each language makefile fragment must provide the following targets:
#
# foo.all.build, foo.all.cross, foo.start.encap, foo.rest.encap,
# foo.info, foo.dvi,
# foo.install-normal, foo.install-common, foo.install-info, foo.install-man,
# foo.uninstall, foo.distdir,
# foo.mostlyclean, foo.clean, foo.distclean, foo.extraclean, foo.realclean,
# foo.stage1, foo.stage2, foo.stage3, foo.stage4
#
# where `foo' is the name of the language.
#
# It should also provide rules for:
#
# - making any compiler driver (eg: g++)
# - the compiler proper (eg: cc1plus)
# - define the names for selecting the language in LANGUAGES.


# Actual names to use when installing a native compiler.
# (Cygnus configure overrides these when using -program-transform-name).
GM2_INSTALL_NAME = gm2

# Actual names to use when installing a cross-compiler.
# (Cygnus configure overrides these when using -program-transform-name).
GM2_CROSS_NAME = $(target_alias)-gm2

#
# directory for the public definition, implementation and object libraries
#
GM2_LIB_DIR    = $(libsubdir)/gm2


# Extra flags to pass to recursive makes.
GM2_FLAGS_TO_PASS = \
	"GM2_FOR_BUILD=$(GM2_FOR_BUILD) -DEGCS" \
	"GM2FLAGS=$(GM2FLAGS)" \
	"GM2_FOR_TARGET=$(GM2_FOR_TARGET)"

GM2_SRCS = $(srcdir)/gm2/gccgm2.c

xgm2.c: $(srcdir)/gcc.c
	-rm -f $@
	$(LN) $(srcdir)/gcc.c $@

gm2spec.o: $(srcdir)/gm2/gm2spec.c
	$(CC) -DLIBSUBDIR=\"$(libsubdir)\" -c $(ALL_CFLAGS) $(INCLUDES) $(srcdir)/gm2/gm2spec.c

#
# taken from g++ and modified for gm2
#
# We depend on xgm2.c last, to make it obvious where it came from.
xgm2.o: $(CONFIG_H) multilib.h config.status $(lang_specs_files) xgm2.c
	$(CC) $(ALL_CFLAGS) $(INCLUDES) \
	$(DRIVER_DEFINES) \
	-DLANG_SPECIFIC_DRIVER \
        -c xgm2.c

# Create the compiler driver for gm2.

gm2:  xgm2$(exeext) cc1gm2 gm2.all.build

xgm2$(exeext): xgm2.o gm2spec.o version.o prefix.o intl.o $(LIBDEPS) $(EXTRA_GCC_OBJS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ xgm2.o gm2spec.o prefix.o \
	  version.o intl.o $(EXTRA_GCC_OBJS) $(LIBS)

cc1gm2$(exeext): $(P) $(GM2_SRCS) $(LIBDEPS) $(BACKEND) $(LIBDEPS)
	cd gm2; $(MAKE) $(FLAGS_TO_PASS) $(GM2_FLAGS_TO_PASS) ../cc1gm2$(exeext)

# Build hooks:

gm2/gm2lcc: force
	cd gm2; $(MAKE) $(FLAGS_TO_PASS) $(GM2_FLAGS_TO_PASS) gm2lcc

gm2/gm2l: force
	cd gm2; $(MAKE) $(FLAGS_TO_PASS) $(GM2_FLAGS_TO_PASS) gm2l

gm2/gm2lgen: force
	cd gm2; $(MAKE) $(FLAGS_TO_PASS) $(GM2_FLAGS_TO_PASS) gm2lgen

gm2/gm2lsub: force
	cd gm2; $(MAKE) $(FLAGS_TO_PASS) $(GM2_FLAGS_TO_PASS) gm2lsub

gm2.all.build: gm2/gm2lcc gm2/gm2l gm2/gm2lgen gm2/gm2lsub
	for i in $(GM2LINKEXES) ; do \
            rm -f x$$i$(exeext); \
            cp gm2/$$i$(exeext) x$$i$(exeext); \
            chmod a+x x$$i$(exeext); \
        done

gm2.all.cross: 
gm2.start.encap:
gm2.rest.encap:
gm2.info: gm2/gm2.info

gm2.dvi:
	$(TEXI2DVI)  gm2/gm2.texi

gm2/gm2.info:
	$(MAKEINFO) -o gm2/gm2.info gm2/gm2.texi

# Install hooks:
# cc1gm2 is installed elsewhere as part of $(COMPILERS).

GM2LINKEXES = gm2lcc gm2l gm2lgen gm2lsub

$(GM2_LIB_DIR): force
	-if [ ! -d $(GM2_LIB_DIR) ] ; then mkdir $(GM2_LIB_DIR) ; fi

gm2.install-normal:
gm2.install-common: installdirs $(GM2_LIB_DIR)
	-if [ -f cc1gm2$(exeext) ] ; then \
           if [ -f gcc-cross$(exeext) ]; then \
	      rm -f $(bindir)/$(GM2_CROSS_NAME); \
	      $(INSTALL_PROGRAM) xgm2$(exeext) $(bindir)/$(GM2_CROSS_NAME); \
	      chmod a+x $(bindir)/$(GM2_CROSS_NAME); \
           else \
	      rm -f $(bindir)/$(GM2_INSTALL_NAME); \
	      $(INSTALL_PROGRAM) xgm2$(exeext) $(bindir)/$(GM2_INSTALL_NAME); \
	      chmod a+x $(bindir)/$(GM2_INSTALL_NAME); \
           fi ; \
        fi
	for i in $(GM2LINKEXES) ; do \
            rm -f $(bindir)/$$i$(exeext); \
            $(INSTALL_PROGRAM) gm2/$$i$(exeext) $(bindir)/$$i$(exeext); \
            chmod a+x $(bindir)/$$i$(exeext); \
        done
	for i in gm2/gm2-libs/* ; do \
           rm -f $(GM2_LIB_DIR)/$$i ; \
           $(INSTALL_PROGRAM) $$i $(GM2_LIB_DIR) ; \
        done

# Don't delete $(infodir)/gm2.info* unless there's actually new
# docs to install (in case LANGUAGES didn't contain gm2 earlier).
gm2.install-info:
	-for i in gm2/gm2.info*; do \
	  rm -f $(infodir)/gm2.info*; \
	  realfile=`echo $$i | sed -e 's|.*/\([^/]*\)$$|\1|'`; \
	  $(INSTALL_DATA) $$i $(infodir)/$$realfile; \
	done

gm2.install-man:

gm2.uninstall:
	-rm -rf $(bindir)/$(GM2_INSTALL_NAME)
	-rm -rf $(bindir)/$(GM2_CROSS_NAME)
	-for i in $(GM2LINKEXES) ; do \
            rm -f $(bindir)/$$i$(exeext); \
        done

# Clean hooks:
# A lot of the ancillary files are deleted by the main makefile.
# We just have to delete files specific to us.

gm2.mostlyclean:
	-rm -f gm2/*.o xgm2 cc1gm2 xgm2lcc xgm2lgen xgm2lsub xgm2l
	-rm -f  gm2.aux gm2.html gm2.dvi gm2.ps gm2.info gm2.log
gm2.clean:
	-rm -f gm2/*.o xgm2 acc1gm2 cc1gm2 xgm2lcc xgm2lgen xgm2lsub xgm2l
	-rm -f  gm2.aux gm2.html gm2.dvi gm2.ps gm2.info gm2.log
	( cd gm2 ; make clean )
	-rm -fr gm2/stage?
	-rm gm2/include

gm2.distclean:
	-rm -f gm2/Makefile
gm2.extraclean:
gm2.realclean:
	-rm -f gm2/parse.c


# Stage hooks:
# The main makefile has already created stage?/gm2

gm2.stage1:
	-mv gm2/*.o stage1/gm2
gm2.stage2:
	-mv gm2/*.o stage2/gm2
gm2.stage3:
	-mv gm2/*.o stage3/gm2
gm2.stage4:
	-mv gm2/*.o stage4/gm2


# Maintenance hooks:

# This target creates the files that can be rebuilt, but go in the
# distribution anyway.  It then copies the files to the distdir directory.
gm2.distdir:
	mkdir tmp/gm2
	cd gm2; \
	for file in *[0-9a-zA-Z+]; do \
	  ln $$file ../tmp/gm2 >/dev/null 2>&1 || cp $$file ../tmp/gm2; \
	done
