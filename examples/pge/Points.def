(* Copyright (C) 2011 Free Software Foundation, Inc. *)
(* This file is part of GNU Modula-2.

GNU Modula-2 is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 3, or (at your option) any later
version.

GNU Modula-2 is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with gm2; see the file COPYING.  If not, write to the Free Software
Foundation, 51 Franklin Street, Fifth Floor,
Boston, MA 02110-1301, USA. *)

DEFINITION MODULE Points ;

(*
    Title      : point
    Author     : Gaius Mulley
    System     : GNU Modula-2
    Date       : Wed Oct 10 03:42:49 2012
    Revision   : $Version$ 
    Description: provides a simple vector type.
*)

FROM Fractions IMPORT Fract ;

TYPE
   Point = RECORD
              x, y: Fract ;
           END ;


(*
   initPoint - returns a Point from two fractions.
               The fractions are contained within the point structure.
               It does not take a copy of the fractions.
*)

PROCEDURE initPoint (x, y: Fract) : Point ;


(*
   rootPoint - grafts, p, into the roots of the garbage tree.
*)

PROCEDURE rootPoint (p: Point) : Point ;


(*
   unRootPoint - removes, p, from the roots of the garbage tree.
*)

PROCEDURE unRootPoint (p: Point) : Point ;


(*
   dupPoint - returns a duplication of, p.
*)

PROCEDURE dupPoint (p: Point) : Point ;


(*
   markPoint - marks Point, p, to be saved from garbage collection.
*)

PROCEDURE markPoint (p: Point) ;


(*
   addPoint - returns a new point (a+b).
*)

PROCEDURE addPoint (a, b: Point) : Point ;


(*
   subPoint - returns a new point (a-b).
*)

PROCEDURE subPoint (a, b: Point) : Point ;


(*
   negatePoint - negates the point, p.  The same point, p, is returned.
*)

PROCEDURE negatePoint (p: Point) : Point ;


(*
   scalePoint - returns a new point which is scaled by, s.
*)

PROCEDURE scalePoint (p: Point; s: Fract) : Point ;


(*
   zeroPoint - returns a new point (0, 0)
*)

PROCEDURE zeroPoint () : Point ;


END Points.
