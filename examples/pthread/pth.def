(* automatically generated for GNU Modula-2 by:
   h2def -I../../m2/comp/autotest/gm2 modified_pth.h 

   and modified by hand
*)
DEFINITION MODULE FOR "C" pth ;


FROM SYSTEM IMPORT ADDRESS, BITSET ;

CONST
     PTH_VERSION_STR =  "1.4.1 (27-Jan-2002)" ;
     PTH_VERSION_HEX =  1065473 ;
     PTH_VERSION =  PTH_VERSION_HEX ;
     
TYPE
     fd_set =  ADDRESS ;
     size_t =   CARDINAL ;
    
     sigset_t =  ADDRESS ;
     pid_t =   INTEGER ;
     ssize_t =   CARDINAL ;
     socklen_t =   CARDINAL ;
     off_t =   INTEGER ;
     sig_atomic_t =   INTEGER ;
     nfds_t =   CARDINAL ;
    
CONST
     PTH_KEY_MAX =  256 ;
     PTH_ATFORK_MAX =  128 ;
     PTH_DESTRUCTOR_ITERATIONS =  4 ;
     PTH_SYSCALL_HARD =  0 ;
     PTH_SYSCALL_SOFT =  0 ;
     
TYPE
     pth_time_t =  RECORD
                      tv_sec: INTEGER ;
                      tv_usec: INTEGER ;
                   END ;

     pth_t =  ADDRESS ;
     pth_state_t =   pth_state_en ;
     pth_state_en =  ( PTH_STATE_SCHEDULER, PTH_STATE_NEW, PTH_STATE_READY, PTH_STATE_WAITING, PTH_STATE_DEAD) ;
    
CONST
     PTH_PRIO_MAX =   5 ;
     PTH_PRIO_STD =  0 ;
     PTH_PRIO_MIN =  -( 5) ;
     
TYPE
     pth_attr_t =  ADDRESS ;
    
CONST
     PTH_ATTR_PRIO = 0 ;
     PTH_ATTR_NAME = 1 ;
     PTH_ATTR_JOINABLE = 2 ;
     PTH_ATTR_CANCEL_STATE = 3 ;
     PTH_ATTR_STACK_SIZE = 4 ;
     PTH_ATTR_STACK_ADDR = 5 ;
     PTH_ATTR_TIME_SPAWN = 6 ;
     PTH_ATTR_TIME_LAST = 7 ;
     PTH_ATTR_TIME_RAN = 8 ;
     PTH_ATTR_START_FUNC = 9 ;
     PTH_ATTR_START_ARG = 10 ;
     PTH_ATTR_STATE = 11 ;
     PTH_ATTR_EVENTS = 12 ;
     PTH_ATTR_BOUND = 13 ;
     PTH_ATTR_DEFAULT =  0 ;


    (* event subject classes *)
    PTH_EVENT_FD    =  BITSET {1} ;
    PTH_EVENT_SELECT=  BITSET {2} ;
    PTH_EVENT_SIGS  =  BITSET {3} ;
    PTH_EVENT_TIME  =  BITSET {4} ;
    PTH_EVENT_MSG   =  BITSET {5} ;
    PTH_EVENT_MUTEX =  BITSET {6} ;
    PTH_EVENT_COND  =  BITSET {7} ;
    PTH_EVENT_TID   =  BITSET {8} ;
    PTH_EVENT_FUNC  =  BITSET {9} ;

    (* event occurange restrictions *)
    PTH_UNTIL_OCCURRED     =  BITSET {11} ;
    PTH_UNTIL_FD_READABLE  =  BITSET {12} ;
    PTH_UNTIL_FD_WRITEABLE =  BITSET {13} ;
    PTH_UNTIL_FD_EXCEPTION =  BITSET {14} ;
    PTH_UNTIL_TID_NEW      =  BITSET {15} ;
    PTH_UNTIL_TID_READY    =  BITSET {16} ;
    PTH_UNTIL_TID_WAITING  =  BITSET {17} ;
    PTH_UNTIL_TID_DEAD     =  BITSET {18} ;

    (* event structure handling modes *)
    PTH_MODE_REUSE  =  BITSET {20} ;
    PTH_MODE_CHAIN  =  BITSET {21} ;
    PTH_MODE_STATIC =  BITSET {22} ;
     
TYPE
     pth_event_t =  ADDRESS ;
    
CONST
     PTH_FREE_THIS = 0 ;
     PTH_FREE_ALL = 1 ;
     
TYPE
     pth_key_t =   INTEGER ;
    
CONST
     PTH_KEY_INIT =  -( 1) ;
     
TYPE
     pth_once_t =   INTEGER ;
    
CONST
     PTH_ONCE_INIT =  FALSE ;
     
TYPE
     pth_ringnode_t =   pth_ringnode_st ;
    pth_ringnode_st = RECORD
                         rn_next: POINTER TO  pth_ringnode_t ;
                         rn_prev: POINTER TO  pth_ringnode_t ;
                      END ;
     pth_ring_t =   pth_ring_st ;
    pth_ring_st = RECORD
                     r_hook: POINTER TO  pth_ringnode_t ;
                     r_nodes: CARDINAL ;
                  END ;
     pth_msgport_t =  ADDRESS ;
     pth_message_t =   pth_message_st ;
    pth_message_st = RECORD
                        m_node: pth_ringnode_t ;
                        m_replyport: pth_msgport_t ;
                        m_size: CARDINAL ;
                        m_data: ADDRESS ;
                     END ;
     pth_mutex_t =   pth_mutex_st ;
    pth_mutex_st = RECORD
                      mx_node: pth_ringnode_t ;
                      mx_state: INTEGER ;
                      mx_owner: pth_t ;
                      mx_count: CARDINAL ;
                   END ;
     pth_rwlock_t =   pth_rwlock_st ;
    pth_rwlock_st = RECORD
                       rw_state: INTEGER ;
                       rw_mode: CARDINAL ;
                       rw_readers: CARDINAL ;
                       rw_mutex_rd: pth_mutex_t ;
                       rw_mutex_rw: pth_mutex_t ;
                    END ;
     pth_cond_t =   pth_cond_st ;
    pth_cond_st = RECORD
                     cn_state: CARDINAL ;
                     cn_waiters: CARDINAL ;
                  END ;
     pth_barrier_t =   pth_barrier_st ;
    pth_barrier_st = RECORD
                        br_state: CARDINAL ;
                        br_threshold: INTEGER ;
                        br_count: INTEGER ;
                        br_cycle: INTEGER ;
                        br_cond: pth_cond_t ;
                        br_mutex: pth_mutex_t ;
                     END ;
    
CONST
     POLLIN =  1 ;
     POLLPRI =  2 ;
     POLLOUT =  4 ;
     POLLERR =  8 ;
     POLLHUP =  16 ;
     POLLNVAL =  32 ;
     POLLRDNORM =  POLLIN ;
     POLLRDBAND =  POLLIN ;
     POLLWRNORM =  POLLOUT ;
     POLLWRBAND =  POLLOUT ;
     INFTIM =  -( 1) ;
     
CONST
     PTH_FAKE_RWV =  0 ;
     
TYPE
    iovec = RECORD
               iov_base: ADDRESS ;
               iov_len: size_t ;
            END ;
    
CONST
     UIO_MAXIOV =  1024 ;
     PTH_EXT_SFIO =  0 ;
     
TYPE
     Sfdisc_t =  ADDRESS ;
    
 PROCEDURE pth_init () : INTEGER ;
 PROCEDURE pth_kill () : INTEGER ;
 PROCEDURE pth_ctrl (p1: CARDINAL; ...) : INTEGER ;
 PROCEDURE pth_version () : INTEGER ;
 PROCEDURE pth_attr_of (p2: pth_t) : pth_attr_t ;
 PROCEDURE pth_attr_new () : pth_attr_t ;
 PROCEDURE pth_attr_init (p3: pth_attr_t) : INTEGER ;
 PROCEDURE pth_attr_set (p4: pth_attr_t; p5: INTEGER; ...) : INTEGER ;
 PROCEDURE pth_attr_get (p6: pth_attr_t; p7: INTEGER; ...) : INTEGER ;
 PROCEDURE pth_attr_destroy (p8: pth_attr_t) : INTEGER ;
 PROCEDURE pth_spawn (p10: pth_attr_t; p11: p9; p12: ADDRESS) : pth_t;

TYPE
     p9 =    PROCEDURE (ADDRESS) : ADDRESS ;
    
 PROCEDURE pth_once (p14: ADDRESS; p15: p13; p16: ADDRESS) : INTEGER;

TYPE
     p13 =    PROCEDURE (ADDRESS) ;
    
 PROCEDURE pth_self () : pth_t ;
 PROCEDURE pth_suspend (p17: pth_t) : INTEGER ;
 PROCEDURE pth_resume (p18: pth_t) : INTEGER ;
 PROCEDURE pth_yield (p19: pth_t) : INTEGER ;
 PROCEDURE pth_nap (p20: pth_time_t) : INTEGER ;
 PROCEDURE pth_wait (p21: pth_event_t) : INTEGER ;
 PROCEDURE pth_cancel (p22: pth_t) : INTEGER ;
 PROCEDURE pth_abort (p23: pth_t) : INTEGER ;
 PROCEDURE pth_raise (p24: pth_t; p25: INTEGER) : INTEGER ;
 PROCEDURE pth_join (p26: pth_t; p27: ADDRESS) : INTEGER ;
 PROCEDURE pth_exit (p28: ADDRESS) ;
 PROCEDURE pth_fdmode (p29: INTEGER; p30: INTEGER) : INTEGER ;
 PROCEDURE pth_time (p31: INTEGER; p32: INTEGER) : pth_time_t ;
 PROCEDURE pth_timeout (p33: INTEGER; p34: INTEGER) : pth_time_t ;
 PROCEDURE pth_cancel_state (p35: INTEGER; p36: ADDRESS) ;
 PROCEDURE pth_cancel_point  ;
 PROCEDURE pth_event (p37: CARDINAL; ...) : pth_event_t ;
 PROCEDURE pth_event_typeof (p38: pth_event_t) : CARDINAL ;
 PROCEDURE pth_event_extract (ev: pth_event_t; ...) : INTEGER ;
 PROCEDURE pth_event_concat (p39: pth_event_t; ...) : pth_event_t ;
 PROCEDURE pth_event_isolate (p40: pth_event_t) : pth_event_t ;
 PROCEDURE pth_event_walk (p41: pth_event_t; p42: CARDINAL) : pth_event_t ;
 PROCEDURE pth_event_occurred (p43: pth_event_t) : INTEGER ;
 PROCEDURE pth_event_free (p44: pth_event_t; p45: INTEGER) : INTEGER ;
 PROCEDURE pth_key_create (p47: ADDRESS; p48: p46) : INTEGER;

TYPE
     p46 =    PROCEDURE (ADDRESS) ;
    
 PROCEDURE pth_key_delete (p49: pth_key_t) : INTEGER ;
 PROCEDURE pth_key_setdata (p50: pth_key_t; p51: ADDRESS) : INTEGER ;
 PROCEDURE pth_key_getdata (p52: pth_key_t) : ADDRESS ;
 PROCEDURE pth_msgport_create (p53: ADDRESS) : pth_msgport_t ;
 PROCEDURE pth_msgport_destroy (p54: pth_msgport_t) ;
 PROCEDURE pth_msgport_find (p55: ADDRESS) : pth_msgport_t ;
 PROCEDURE pth_msgport_pending (p56: pth_msgport_t) : INTEGER ;
 PROCEDURE pth_msgport_put (p57: pth_msgport_t; p58: ADDRESS) : INTEGER ;
 PROCEDURE pth_msgport_get (p59: pth_msgport_t) : ADDRESS ;
 PROCEDURE pth_msgport_reply (p60: ADDRESS) : INTEGER ;
 PROCEDURE pth_cleanup_push (p62: p61; p63: ADDRESS) : INTEGER;

TYPE
     p61 =    PROCEDURE (ADDRESS) ;
    
 PROCEDURE pth_cleanup_pop (p64: INTEGER) : INTEGER ;
 PROCEDURE pth_atfork_push (p68: p65; p69: p66; p70: p67; p71: ADDRESS) : INTEGER;

TYPE
     p65 =    PROCEDURE (ADDRESS);
     p66 =    PROCEDURE (ADDRESS);
     p67 =    PROCEDURE (ADDRESS) ;
    
 PROCEDURE pth_atfork_pop () : INTEGER ;
 PROCEDURE pth_fork () : pid_t ;
 PROCEDURE pth_mutex_init (p72: ADDRESS) : INTEGER ;
 PROCEDURE pth_mutex_acquire (p73: ADDRESS; p74: INTEGER; p75: pth_event_t) : INTEGER ;
 PROCEDURE pth_mutex_release (p76: ADDRESS) : INTEGER ;
 PROCEDURE pth_rwlock_init (p77: ADDRESS) : INTEGER ;
 PROCEDURE pth_rwlock_acquire (p78: ADDRESS; p79: INTEGER; p80: INTEGER; p81: pth_event_t) : INTEGER ;
 PROCEDURE pth_rwlock_release (p82: ADDRESS) : INTEGER ;
 PROCEDURE pth_cond_init (p83: ADDRESS) : INTEGER ;
 PROCEDURE pth_cond_await (p84: ADDRESS; p85: ADDRESS; p86: pth_event_t) : INTEGER ;
 PROCEDURE pth_cond_notify (p87: ADDRESS; p88: INTEGER) : INTEGER ;
 PROCEDURE pth_barrier_init (p89: ADDRESS; p90: INTEGER) : INTEGER ;
 PROCEDURE pth_barrier_reach (p91: ADDRESS) : INTEGER ;
 PROCEDURE pth_sfiodisc () : ADDRESS ;
 PROCEDURE pth_sigwait_ev (p92: ADDRESS; p93: ADDRESS; p94: pth_event_t) : INTEGER ;
 PROCEDURE pth_connect_ev (p95: INTEGER; p96: ADDRESS; p97: socklen_t; p98: pth_event_t) : INTEGER ;
 PROCEDURE pth_accept_ev (p99: INTEGER; p100: ADDRESS; p101: ADDRESS; p102: pth_event_t) : INTEGER ;
 PROCEDURE pth_select_ev (p103: INTEGER; p104: ADDRESS; p105: ADDRESS; p106: ADDRESS; p107: ADDRESS; p108: pth_event_t) : INTEGER ;
 PROCEDURE pth_poll_ev (p109: ADDRESS; p110: nfds_t; p111: INTEGER; p112: pth_event_t) : INTEGER ;
 PROCEDURE pth_read_ev (p113: INTEGER; p114: ADDRESS; p115: size_t; p116: pth_event_t) : ssize_t ;
 PROCEDURE pth_write_ev (p117: INTEGER; p118: ADDRESS; p119: size_t; p120: pth_event_t) : ssize_t ;
 PROCEDURE pth_readv_ev (p121: INTEGER; p122: ADDRESS; p123: INTEGER; p124: pth_event_t) : ssize_t ;
 PROCEDURE pth_writev_ev (p125: INTEGER; p126: ADDRESS; p127: INTEGER; p128: pth_event_t) : ssize_t ;
 PROCEDURE pth_recv_ev (p129: INTEGER; p130: ADDRESS; p131: size_t; p132: INTEGER; p133: pth_event_t) : ssize_t ;
 PROCEDURE pth_send_ev (p134: INTEGER; p135: ADDRESS; p136: size_t; p137: INTEGER; p138: pth_event_t) : ssize_t ;
 PROCEDURE pth_recvfrom_ev (p139: INTEGER; p140: ADDRESS; p141: size_t; p142: INTEGER; p143: ADDRESS; p144: ADDRESS; p145: pth_event_t) : ssize_t ;
 PROCEDURE pth_sendto_ev (p146: INTEGER; p147: ADDRESS; p148: size_t; p149: INTEGER; p150: ADDRESS; p151: socklen_t; p152: pth_event_t) : ssize_t ;
 PROCEDURE pth_usleep (p153: CARDINAL) : INTEGER ;
 PROCEDURE pth_sleep (p154: CARDINAL) : CARDINAL ;
 PROCEDURE pth_waitpid (p155: pid_t; p156: ADDRESS; p157: INTEGER) : pid_t ;
 PROCEDURE pth_system (p158: ADDRESS) : INTEGER ;
 PROCEDURE pth_sigmask (p159: INTEGER; p160: ADDRESS; p161: ADDRESS) : INTEGER ;
 PROCEDURE pth_sigwait (p162: ADDRESS; p163: ADDRESS) : INTEGER ;
 PROCEDURE pth_connect (p164: INTEGER; p165: ADDRESS; p166: socklen_t) : INTEGER ;
 PROCEDURE pth_accept (p167: INTEGER; p168: ADDRESS; p169: ADDRESS) : INTEGER ;
 PROCEDURE pth_select (p170: INTEGER; p171: ADDRESS; p172: ADDRESS; p173: ADDRESS; p174: ADDRESS) : INTEGER ;
 PROCEDURE pth_poll (p175: ADDRESS; p176: nfds_t; p177: INTEGER) : INTEGER ;
 PROCEDURE pth_read (p178: INTEGER; p179: ADDRESS; p180: size_t) : ssize_t ;
 PROCEDURE pth_write (p181: INTEGER; p182: ADDRESS; p183: size_t) : ssize_t ;
 PROCEDURE pth_readv (p184: INTEGER; p185: ADDRESS; p186: INTEGER) : ssize_t ;
 PROCEDURE pth_writev (p187: INTEGER; p188: ADDRESS; p189: INTEGER) : ssize_t ;
 PROCEDURE pth_recv (p190: INTEGER; p191: ADDRESS; p192: size_t; p193: INTEGER) : ssize_t ;
 PROCEDURE pth_send (p194: INTEGER; p195: ADDRESS; p196: size_t; p197: INTEGER) : ssize_t ;
 PROCEDURE pth_recvfrom (p198: INTEGER; p199: ADDRESS; p200: size_t; p201: INTEGER; p202: ADDRESS; p203: ADDRESS) : ssize_t ;
 PROCEDURE pth_sendto (p204: INTEGER; p205: ADDRESS; p206: size_t; p207: INTEGER; p208: ADDRESS; p209: socklen_t) : ssize_t ;
 PROCEDURE pth_pread (p210: INTEGER; p211: ADDRESS; p212: size_t; p213: off_t) : ssize_t ;
 PROCEDURE pth_pwrite (p214: INTEGER; p215: ADDRESS; p216: size_t; p217: off_t) : ssize_t ;

END pth.
